{
  "version": 2,
  "contentHash": "bafybeif4mn7a6uy47lbgguq3trps6oq6mpxlmi2ekmre2fuidcfokhxb6a",
  "timestamp": 1749477796,
  "blockNumber": 22667272,
  "rootMimeType": "text/html",
  "totalSize": 792286,
  "favicon": "favicon.svg",
  "title": "Swix",
  "distributionPurity": {
    "externalScripts": [],
    "externalMedia": []
  },
  "networkingPurity": [
    {
      "file": "index.html#inline-script-1",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "/[dynamic_module_preload_href]"
          ],
          "library": "built-in",
          "type": "self",
          "motivation": "The script contains an IIFE that iterates over `<link rel=\"modulepreload\">` tags using `document.querySelectorAll('link[rel=\"modulepreload\"]')` and also uses a `MutationObserver` to detect dynamically added `<link rel=\"modulepreload\">` tags. For each such link element (`b`), it calls `fetch(b.href, _)` to preload the resource. `b.href` is the URL from the link tag, typically a relative path to a JavaScript module for the current application."
        },
        {
          "method": "fetch",
          "urls": [
            "https://gw.elib.top/transfer"
          ],
          "library": "built-in",
          "type": "auxiliary",
          "motivation": "The script defines a constant `ER` which resolves to `\"https://gw.elib.top/transfer\"`. This URL is then used in a `fetch(ER, ...)` call within a function `UR(e)`. This appears to be a direct API call."
        },
        {
          "method": "fetch",
          "urls": [
            "https://gateway.ipfs.io/ipfs/[CID_placeholder]"
          ],
          "library": "ethers.js",
          "type": "auxiliary",
          "motivation": "The script defines a `FetchRequest` class (`el`) which has a static method `getGateway` and uses a map `Mf` where `Mf.ipfs` is a function that transforms an `ipfs://` URL into `https://gateway.ipfs.io/ipfs/...`. If an instance of `FetchRequest` is created with an `ipfs://` URL and its `send()` method is called, it will internally use its default `getUrlFunc` (which is `W8`, a wrapper around global `fetch`) to make a request to the transformed IPFS gateway URL. This `FetchRequest` and IPFS handling is consistent with ethers.js functionality."
        }
      ]
    }
  ],
  "libraryUsage": [
    {
      "file": "index.html#inline-script-1",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code extensively uses React's `Symbol.for('react.element')`, `Symbol.for('react.fragment')`, JSX-related function calls (e.g., `N.jsx`, `N.jsxs` where `N` is React's jsx-runtime), component lifecycle patterns (`useEffect`, `useState`, `useRef`), and `React.memo`. These are core React APIs and patterns."
        },
        {
          "name": "ReactDOM",
          "motivation": "The code includes calls like `Q_[Hr(489)](by)` which resolves to `ReactDOM.createRoot(by)` or similar DOM manipulation functions from ReactDOM, specifically for rendering React components into the DOM. `Q_` is derived from `react-dom/client`."
        },
        {
          "name": "Tippy.js",
          "motivation": "The code initializes and uses a variable `q6` which is identified as `tippy` through its usage patterns (e.g., `q6.defaultProps`, `q6.setDefaultProps`, and `q6` being assigned `fE(e,x)` where `fE` is `tippy`). It is configured with `q6.setDefaultProps({render:cg})`, characteristic of Tippy.js for tooltips/popovers."
        },
        {
          "name": "tailwind-merge",
          "motivation": "The code contains `const $x=cw(Uw);` where `cw` is a function that processes class strings, and `Uw` is a configuration object (`Uw=()=>{const e=He(\"color\"),...return{cacheSize:500,...}}`) typical of `tailwind-merge` used to resolve conflicting Tailwind CSS classes."
        },
        {
          "name": "ethers.js",
          "motivation": "The code includes numerous patterns and artifacts strongly indicative of ethers.js (likely v6+), such as the definition and potential use of a `FetchRequest` class (`el`), handling of blockchain-specific data types (`BigInt` for numbers, hex strings for addresses/hashes via functions like `re` for `getAddress`), ABI encoding/decoding concepts (`Interface` class `J1`, `AbiCoder` class `Jc`, `ParamType` class `Je`), transaction construction (`Transaction` class `Do`), error handling (constants like `CALL_EXCEPTION`), contract interaction proxies (`Contract` class `Gc`), and TypedData signing structures (`TypedDataEncoder` class `Mo`). Constants like `Vc` (ZeroAddress) and `bb` (ZeroHash) also align."
        }
      ]
    }
  ],
  "urls": [],
  "ethereum": [],
  "fallbacks": []
}