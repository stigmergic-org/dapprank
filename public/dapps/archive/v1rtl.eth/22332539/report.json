{
  "version": 2,
  "contentHash": "bafybeidjglvyrtlubh25bc5xinca4p6i26l3ngpkc66xjj6twjvetpm7py",
  "timestamp": 1745429258,
  "blockNumber": 22332539,
  "rootMimeType": "inode/directory",
  "totalSize": 62740310,
  "favicon": "emoji.webp",
  "title": "v1rtl.site",
  "distributionPurity": {
    "externalScripts": [],
    "externalMedia": [
      {
        "file": "blog/coverage-in-deno/index.html",
        "occurences": [
          {
            "type": "img",
            "url": "https://img.shields.io/github/workflow/status/talentlessguy/tinyhttp/CI?style=flat-square"
          },
          {
            "type": "img",
            "url": "https://img.shields.io/codecov/c/gh/talentlessguy/tinyhttp-deno?style=flat-square"
          }
        ]
      },
      {
        "file": "blog/deno-graphql/index.html",
        "occurences": [
          {
            "type": "img",
            "url": "https://user-images.githubusercontent.com/35937217/112218821-4133c800-8c35-11eb-984a-5c21fa71c229.png"
          }
        ]
      }
    ]
  },
  "networkingPurity": [
    {
      "file": "_astro/ClientRouter.astro_astro_type_script_index_0_lang.BScVxmeO.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "[dynamic same-origin path]"
          ],
          "library": "Astro Client Router",
          "type": "self",
          "motivation": "The code utilizes `fetch` in several places (`ge` function, `S` function for prefetching, and an internal loader function `l` within the main navigation function `j`) primarily to retrieve HTML content for subsequent pages or to prefetch linked resources. \n\n*   In `ge(e, t)` and the loader function `l`, `fetch` is called with a URL derived from link `href` attributes or form `action` attributes (potentially modified by `URLSearchParams` for GET forms). The options (`t` or `h`) can include method (`POST` for forms), body (`FormData`), and signal (`AbortController.signal`).\n*   In `S(e, t)`, `fetch` is called with `{priority: 'low'}` for prefetching URLs extracted from `<a>` tags.\n\nThese URLs are dynamically determined based on the application's structure and user interaction, always targeting resources within the same origin as the currently loaded page (relative paths or absolute paths on the same domain). Therefore, the type is `self`."
        }
      ]
    }
  ],
  "libraryUsage": [
    {
      "file": "_astro/Canvas.CQPbf1Db.js",
      "occurences": [
        {
          "name": "SolidJS",
          "motivation": "The code imports several functions (`f`, `o`, `e`, `h`, `g`, `t`, `u`, `a`, `s`, `S`) from a local module (`./web.DwuW1JMW.js`). The usage patterns of these functions strongly resemble SolidJS primitives: \n- `f` (likely `createSignal`) is used to create reactive state (`const [a, w] = c(...)`).\n- `o` (likely `onMount`) is used to run code after the component mounts (`u(()=>{...})`).\n- `h` (likely `onCleanup`) is used to register cleanup logic (`p(()=>{...})`).\n- `e` (likely `createComponent`) is used with `g` to render a component (`g(x,{...})`).\n- `g` (likely `template`) is used with `y` to create DOM elements (`y(L)` where `L` is HTML string).\n- `t` (likely `html`) is used with `E` to define an HTML template string (`E(\"<canvas id=canvas>\")`).\n- `a` (likely `createEffect`) is used with `k` to react to changes in signals (`k(n=>{...})`).\n- `S` (likely `Show`) is used with `x` for conditional rendering (`g(x,{ when(){return h()}, ... })`)."
        }
      ]
    },
    {
      "file": "_astro/ClientRouter.astro_astro_type_script_index_0_lang.BScVxmeO.js",
      "occurences": [
        {
          "name": "Astro Client Router",
          "motivation": "The code implements client-side navigation, view transitions, and prefetching logic characteristic of the Astro web framework. It uses Astro-specific custom events (e.g., `astro:page-load`, `astro:before-swap`, `astro:after-swap`), data attributes (e.g., `data-astro-transition-persist`, `data-astro-prefetch`, `data-astro-rerun`), custom element names (`astro-island`), and checks for specific meta tags (`astro-view-transitions-enabled`, `astro-view-transitions-fallback`). Functions like `J` (script deduplication), `Q` (attribute merging), `Z` (head merging), `ee` (body swapping with persistence), `ge` (fetching HTML), `j` (navigation logic), and `S` (prefetching) are all part of Astro's client-side enhancement strategy."
        }
      ]
    },
    {
      "file": "_astro/client.h-aQTJ1F.js",
      "occurences": [
        {
          "name": "SolidJS",
          "motivation": "```javascript\nimport{$ as w,j as q,k as K,l as I,f as J,m as V,n as X,e as C,p as Y}from\"./web.DwuW1JMW.js\";\n// ...\nconst S=()=>C(e,h);\nreturn i?C(Y,{get children(){return S()}}):S()\n```\n\nThe code imports minified functions (`q`, `K`, `I`, `J`, `V`, `X`, `C`, `Y`) which correspond to SolidJS core reactivity and rendering functions like `batch`, `onCleanup`, `isTracking`, `createSignal`, `hydrate`, `render`, `createComponent`, and `Suspense` respectively. The rendering pattern `C(Component, props)` is characteristic of SolidJS. The code also defines reactive state management using Proxies and Symbols (`L`, `$`, `b`, `M`), similar to Solid's stores (`createStore`, `produce`, `reconcile`). The function `Z` resembles `createStore`."
        },
        {
          "name": "Astro Integration",
          "motivation": "```javascript\nvar x=n=>(e,f,r,{client:o})=>{ // Entry point signature typical for Astro integrations\n  if(!n.hasAttribute(\"ssr\"))return; // Checks for Astro SSR attribute\n  // ...\n  const h=document.createTreeWalker(n,NodeFilter.SHOW_ELEMENT,a=>a===n?NodeFilter.FILTER_SKIP:a.nodeName===\"ASTRO-SLOT\"?NodeFilter.FILTER_ACCEPT:a.nodeName===\"ASTRO-ISLAND\"?NodeFilter.FILTER_REJECT:NodeFilter.FILTER_SKIP);\n  // ...\n  t[h]||(t[h]=document.createElement(\"astro-slot\"),h!==\"default\"&&t[h].setAttribute(\"name\",h),t[h].innerHTML=a)\n  // ...\n  n.addEventListener(\"astro:unmount\",()=>O(),{once:!0})\n}\n```\n\nThe code explicitly interacts with Astro-specific concepts:\n- It checks for the `ssr` attribute on the host element (`n`).\n- It uses `document.createTreeWalker` to find `ASTRO-SLOT` elements.\n- It creates `astro-slot` elements dynamically.\n- It listens for the `astro:unmount` event for cleanup.\n- The exported function signature `(element, props, slots, { client })` matches the expected interface for an Astro frontend integration."
        }
      ]
    },
    {
      "file": "_astro/web.DwuW1JMW.js",
      "occurences": [
        {
          "name": "SolidJS",
          "motivation": "The code utilizes a reactive system with functions like `G` (createSignal), `I` (createEffect), `x` (createMemo), `z` (createRoot), `pe` (onCleanup), `ee` (createContext), `te` (useContext), `Me` (Suspense), and `Be` (Show), which are characteristic of SolidJS. It also includes specific symbols `Symbol(\"solid-proxy\")` and `Symbol(\"solid-track\")` used by SolidJS. Furthermore, the presence of hydration logic involving `globalThis._$HY`, `data-hk` attributes, and functions like `_e`, `Re`, `Ge`, `Q` strongly indicates the use of SolidJS's server-side rendering and hydration capabilities."
        }
      ]
    },
    {
      "file": "blog/coverage-in-deno/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code includes an event listener for `astro:before-swap`, which is a specific event triggered by the Astro framework during client-side view transitions."
        }
      ]
    },
    {
      "file": "blog/coverage-in-deno/index.html#inline-script-2",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code defines a custom element `astro-island`, references `self.Astro` and `window.Astro`, uses `import()` to dynamically load components/renderers based on attributes (`component-url`, `renderer-url`), and manages hydration states (`astro:hydrate`, `astro:only`). These are core concepts and patterns used by the Astro web framework."
        }
      ]
    },
    {
      "file": "blog/deno-graphql/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code includes an event listener for `astro:before-swap`, which is a specific event triggered by the Astro framework during client-side view transitions."
        }
      ]
    },
    {
      "file": "blog/deno-graphql/index.html#inline-script-2",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code defines a custom element `astro-island`, references `self.Astro` and `window.Astro`, uses `import()` to dynamically load components/renderers based on attributes (`component-url`, `renderer-url`), and manages hydration states (`astro:hydrate`, `astro:only`). These are core concepts and patterns used by the Astro web framework."
        }
      ]
    },
    {
      "file": "blog/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code includes an event listener for `astro:before-swap`, which is a specific event triggered by the Astro framework during client-side view transitions."
        }
      ]
    },
    {
      "file": "blog/index.html#inline-script-2",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code defines a custom element `astro-island`, references `self.Astro` and `window.Astro`, uses `import()` to dynamically load components/renderers based on attributes (`component-url`, `renderer-url`), and manages hydration states (`astro:hydrate`, `astro:only`). These are core concepts and patterns used by the Astro web framework."
        }
      ]
    },
    {
      "file": "blog/lets-write-frontend-in-go/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code includes an event listener for `astro:before-swap`, which is a specific event triggered by the Astro framework during client-side view transitions."
        }
      ]
    },
    {
      "file": "blog/lets-write-frontend-in-go/index.html#inline-script-2",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code defines a custom element `astro-island`, references `self.Astro` and `window.Astro`, uses `import()` to dynamically load components/renderers based on attributes (`component-url`, `renderer-url`), and manages hydration states (`astro:hydrate`, `astro:only`). These are core concepts and patterns used by the Astro web framework."
        }
      ]
    },
    {
      "file": "blog/lets-write-frontend-in-go/index.html#inline-script-3",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code explicitly checks for `self.Astro` and assigns a function to `self.Astro.load`. It also dispatches a custom event `astro:load`, which is a common pattern in the Astro framework for handling client-side script loading."
        }
      ]
    },
    {
      "file": "blog/lets-write-frontend-in-go/index.html#inline-script-4",
      "occurences": [
        {
          "name": "Custom Event Tracker (_$HY)",
          "motivation": "The code defines a global object `_$HY` and attaches `click` and `input` event listeners to the document. It traverses the DOM (`t` function) looking for elements with a `data-hk` attribute and pushes event details into `_$HY.events`. This pattern suggests a custom script for tracking specific user interactions rather than a standard, well-known library."
        }
      ]
    },
    {
      "file": "blog/nextjs-nexus-prisma-auth/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code includes an event listener for `astro:before-swap`, which is a specific event triggered by the Astro framework during client-side view transitions."
        }
      ]
    },
    {
      "file": "blog/nextjs-nexus-prisma-auth/index.html#inline-script-2",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code defines a custom element `astro-island`, references `self.Astro` and `window.Astro`, uses `import()` to dynamically load components/renderers based on attributes (`component-url`, `renderer-url`), and manages hydration states (`astro:hydrate`, `astro:only`). These are core concepts and patterns used by the Astro web framework."
        }
      ]
    },
    {
      "file": "blog/presenting-tinyhttp-10/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code includes an event listener for `astro:before-swap`, which is a specific event triggered by the Astro framework during client-side view transitions."
        }
      ]
    },
    {
      "file": "blog/presenting-tinyhttp-10/index.html#inline-script-2",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code defines a custom element `astro-island`, references `self.Astro` and `window.Astro`, uses `import()` to dynamically load components/renderers based on attributes (`component-url`, `renderer-url`), and manages hydration states (`astro:hydrate`, `astro:only`). These are core concepts and patterns used by the Astro web framework."
        }
      ]
    },
    {
      "file": "index.html#inline-script-1",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code defines a custom element `astro-island`, references `self.Astro` and `window.Astro`, uses `import()` to dynamically load components/renderers based on attributes (`component-url`, `renderer-url`), and manages hydration states (`astro:hydrate`, `astro:only`). These are core concepts and patterns used by the Astro web framework."
        }
      ]
    },
    {
      "file": "index.html#inline-script-2",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code includes an event listener for `astro:before-swap`, which is a specific event triggered by the Astro framework during client-side view transitions."
        }
      ]
    },
    {
      "file": "ph/alps-italy-18/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code includes an event listener for `astro:before-swap`, which is a specific event triggered by the Astro framework during client-side view transitions."
        }
      ]
    },
    {
      "file": "ph/alps-italy-18/index.html#inline-script-2",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code defines a custom element `astro-island`, references `self.Astro` and `window.Astro`, uses `import()` to dynamically load components/renderers based on attributes (`component-url`, `renderer-url`), and manages hydration states (`astro:hydrate`, `astro:only`). These are core concepts and patterns used by the Astro web framework."
        }
      ]
    },
    {
      "file": "ph/bagrati-catherdal-kutaisi-georgia-1/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code includes an event listener for `astro:before-swap`, which is a specific event triggered by the Astro framework during client-side view transitions."
        }
      ]
    },
    {
      "file": "ph/bagrati-catherdal-kutaisi-georgia-1/index.html#inline-script-2",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code defines a custom element `astro-island`, references `self.Astro` and `window.Astro`, uses `import()` to dynamically load components/renderers based on attributes (`component-url`, `renderer-url`), and manages hydration states (`astro:hydrate`, `astro:only`). These are core concepts and patterns used by the Astro web framework."
        }
      ]
    },
    {
      "file": "ph/bagrati-catherdal-kutaisi-georgia-2/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code includes an event listener for `astro:before-swap`, which is a specific event triggered by the Astro framework during client-side view transitions."
        }
      ]
    },
    {
      "file": "ph/bagrati-catherdal-kutaisi-georgia-2/index.html#inline-script-2",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code defines a custom element `astro-island`, references `self.Astro` and `window.Astro`, uses `import()` to dynamically load components/renderers based on attributes (`component-url`, `renderer-url`), and manages hydration states (`astro:hydrate`, `astro:only`). These are core concepts and patterns used by the Astro web framework."
        }
      ]
    },
    {
      "file": "ph/bagrati-catherdal-kutaisi-georgia-3/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code includes an event listener for `astro:before-swap`, which is a specific event triggered by the Astro framework during client-side view transitions."
        }
      ]
    },
    {
      "file": "ph/bagrati-catherdal-kutaisi-georgia-3/index.html#inline-script-2",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code defines a custom element `astro-island`, references `self.Astro` and `window.Astro`, uses `import()` to dynamically load components/renderers based on attributes (`component-url`, `renderer-url`), and manages hydration states (`astro:hydrate`, `astro:only`). These are core concepts and patterns used by the Astro web framework."
        }
      ]
    },
    {
      "file": "ph/batumi-georgia-4/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code includes an event listener for `astro:before-swap`, which is a specific event triggered by the Astro framework during client-side view transitions."
        }
      ]
    },
    {
      "file": "ph/batumi-georgia-4/index.html#inline-script-2",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code defines a custom element `astro-island`, references `self.Astro` and `window.Astro`, uses `import()` to dynamically load components/renderers based on attributes (`component-url`, `renderer-url`), and manages hydration states (`astro:hydrate`, `astro:only`). These are core concepts and patterns used by the Astro web framework."
        }
      ]
    },
    {
      "file": "ph/batumi-georgia-5/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code includes an event listener for `astro:before-swap`, which is a specific event triggered by the Astro framework during client-side view transitions."
        }
      ]
    },
    {
      "file": "ph/batumi-georgia-5/index.html#inline-script-2",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code defines a custom element `astro-island`, references `self.Astro` and `window.Astro`, uses `import()` to dynamically load components/renderers based on attributes (`component-url`, `renderer-url`), and manages hydration states (`astro:hydrate`, `astro:only`). These are core concepts and patterns used by the Astro web framework."
        }
      ]
    },
    {
      "file": "ph/batumi-georgia-6/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code includes an event listener for `astro:before-swap`, which is a specific event triggered by the Astro framework during client-side view transitions."
        }
      ]
    },
    {
      "file": "ph/batumi-georgia-6/index.html#inline-script-2",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code defines a custom element `astro-island`, references `self.Astro` and `window.Astro`, uses `import()` to dynamically load components/renderers based on attributes (`component-url`, `renderer-url`), and manages hydration states (`astro:hydrate`, `astro:only`). These are core concepts and patterns used by the Astro web framework."
        }
      ]
    },
    {
      "file": "ph/batumi-georgia-7/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code includes an event listener for `astro:before-swap`, which is a specific event triggered by the Astro framework during client-side view transitions."
        }
      ]
    },
    {
      "file": "ph/batumi-georgia-7/index.html#inline-script-2",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code defines a custom element `astro-island`, references `self.Astro` and `window.Astro`, uses `import()` to dynamically load components/renderers based on attributes (`component-url`, `renderer-url`), and manages hydration states (`astro:hydrate`, `astro:only`). These are core concepts and patterns used by the Astro web framework."
        }
      ]
    },
    {
      "file": "ph/bran-castle-romania-20/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code includes an event listener for `astro:before-swap`, which is a specific event triggered by the Astro framework during client-side view transitions."
        }
      ]
    },
    {
      "file": "ph/bran-castle-romania-20/index.html#inline-script-2",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code defines a custom element `astro-island`, references `self.Astro` and `window.Astro`, uses `import()` to dynamically load components/renderers based on attributes (`component-url`, `renderer-url`), and manages hydration states (`astro:hydrate`, `astro:only`). These are core concepts and patterns used by the Astro web framework."
        }
      ]
    },
    {
      "file": "ph/como-italy-16/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code includes an event listener for `astro:before-swap`, which is a specific event triggered by the Astro framework during client-side view transitions."
        }
      ]
    },
    {
      "file": "ph/como-italy-16/index.html#inline-script-2",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code defines a custom element `astro-island`, references `self.Astro` and `window.Astro`, uses `import()` to dynamically load components/renderers based on attributes (`component-url`, `renderer-url`), and manages hydration states (`astro:hydrate`, `astro:only`). These are core concepts and patterns used by the Astro web framework."
        }
      ]
    },
    {
      "file": "ph/como-italy-33/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code includes an event listener for `astro:before-swap`, which is a specific event triggered by the Astro framework during client-side view transitions."
        }
      ]
    },
    {
      "file": "ph/como-italy-33/index.html#inline-script-2",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code defines a custom element `astro-island`, references `self.Astro` and `window.Astro`, uses `import()` to dynamically load components/renderers based on attributes (`component-url`, `renderer-url`), and manages hydration states (`astro:hydrate`, `astro:only`). These are core concepts and patterns used by the Astro web framework."
        }
      ]
    },
    {
      "file": "ph/como-lake-italy-17/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code includes an event listener for `astro:before-swap`, which is a specific event triggered by the Astro framework during client-side view transitions."
        }
      ]
    },
    {
      "file": "ph/como-lake-italy-17/index.html#inline-script-2",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code defines a custom element `astro-island`, references `self.Astro` and `window.Astro`, uses `import()` to dynamically load components/renderers based on attributes (`component-url`, `renderer-url`), and manages hydration states (`astro:hydrate`, `astro:only`). These are core concepts and patterns used by the Astro web framework."
        }
      ]
    },
    {
      "file": "ph/como-lake-italy-34/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code includes an event listener for `astro:before-swap`, which is a specific event triggered by the Astro framework during client-side view transitions."
        }
      ]
    },
    {
      "file": "ph/como-lake-italy-34/index.html#inline-script-2",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code defines a custom element `astro-island`, references `self.Astro` and `window.Astro`, uses `import()` to dynamically load components/renderers based on attributes (`component-url`, `renderer-url`), and manages hydration states (`astro:hydrate`, `astro:only`). These are core concepts and patterns used by the Astro web framework."
        }
      ]
    },
    {
      "file": "ph/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code includes an event listener for `astro:before-swap`, which is a specific event triggered by the Astro framework during client-side view transitions."
        }
      ]
    },
    {
      "file": "ph/index.html#inline-script-2",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code defines a custom element `astro-island`, references `self.Astro` and `window.Astro`, uses `import()` to dynamically load components/renderers based on attributes (`component-url`, `renderer-url`), and manages hydration states (`astro:hydrate`, `astro:only`). These are core concepts and patterns used by the Astro web framework."
        }
      ]
    },
    {
      "file": "ph/kaali-crater-saaremaa-estonia-29/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code includes an event listener for `astro:before-swap`, which is a specific event triggered by the Astro framework during client-side view transitions."
        }
      ]
    },
    {
      "file": "ph/kaali-crater-saaremaa-estonia-29/index.html#inline-script-2",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code defines a custom element `astro-island`, references `self.Astro` and `window.Astro`, uses `import()` to dynamically load components/renderers based on attributes (`component-url`, `renderer-url`), and manages hydration states (`astro:hydrate`, `astro:only`). These are core concepts and patterns used by the Astro web framework."
        }
      ]
    },
    {
      "file": "ph/kutaisi-georgia-0/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code includes an event listener for `astro:before-swap`, which is a specific event triggered by the Astro framework during client-side view transitions."
        }
      ]
    },
    {
      "file": "ph/kutaisi-georgia-0/index.html#inline-script-2",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code defines a custom element `astro-island`, references `self.Astro` and `window.Astro`, uses `import()` to dynamically load components/renderers based on attributes (`component-url`, `renderer-url`), and manages hydration states (`astro:hydrate`, `astro:only`). These are core concepts and patterns used by the Astro web framework."
        }
      ]
    },
    {
      "file": "ph/kuuresaare-castle-saaremaa-estonia-28/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code includes an event listener for `astro:before-swap`, which is a specific event triggered by the Astro framework during client-side view transitions."
        }
      ]
    },
    {
      "file": "ph/kuuresaare-castle-saaremaa-estonia-28/index.html#inline-script-2",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code defines a custom element `astro-island`, references `self.Astro` and `window.Astro`, uses `import()` to dynamically load components/renderers based on attributes (`component-url`, `renderer-url`), and manages hydration states (`astro:hydrate`, `astro:only`). These are core concepts and patterns used by the Astro web framework."
        }
      ]
    },
    {
      "file": "ph/leisi-saaremaa-estonia-32/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code includes an event listener for `astro:before-swap`, which is a specific event triggered by the Astro framework during client-side view transitions."
        }
      ]
    },
    {
      "file": "ph/leisi-saaremaa-estonia-32/index.html#inline-script-2",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code defines a custom element `astro-island`, references `self.Astro` and `window.Astro`, uses `import()` to dynamically load components/renderers based on attributes (`component-url`, `renderer-url`), and manages hydration states (`astro:hydrate`, `astro:only`). These are core concepts and patterns used by the Astro web framework."
        }
      ]
    },
    {
      "file": "ph/lemiste-estonia-19/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code includes an event listener for `astro:before-swap`, which is a specific event triggered by the Astro framework during client-side view transitions."
        }
      ]
    },
    {
      "file": "ph/lemiste-estonia-19/index.html#inline-script-2",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code defines a custom element `astro-island`, references `self.Astro` and `window.Astro`, uses `import()` to dynamically load components/renderers based on attributes (`component-url`, `renderer-url`), and manages hydration states (`astro:hydrate`, `astro:only`). These are core concepts and patterns used by the Astro web framework."
        }
      ]
    },
    {
      "file": "ph/milan-italy-15/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code includes an event listener for `astro:before-swap`, which is a specific event triggered by the Astro framework during client-side view transitions."
        }
      ]
    },
    {
      "file": "ph/milan-italy-15/index.html#inline-script-2",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code defines a custom element `astro-island`, references `self.Astro` and `window.Astro`, uses `import()` to dynamically load components/renderers based on attributes (`component-url`, `renderer-url`), and manages hydration states (`astro:hydrate`, `astro:only`). These are core concepts and patterns used by the Astro web framework."
        }
      ]
    },
    {
      "file": "ph/narva-estonia-21/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code includes an event listener for `astro:before-swap`, which is a specific event triggered by the Astro framework during client-side view transitions."
        }
      ]
    },
    {
      "file": "ph/narva-estonia-21/index.html#inline-script-2",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code defines a custom element `astro-island`, references `self.Astro` and `window.Astro`, uses `import()` to dynamically load components/renderers based on attributes (`component-url`, `renderer-url`), and manages hydration states (`astro:hydrate`, `astro:only`). These are core concepts and patterns used by the Astro web framework."
        }
      ]
    },
    {
      "file": "ph/narva-estonia-22/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code includes an event listener for `astro:before-swap`, which is a specific event triggered by the Astro framework during client-side view transitions."
        }
      ]
    },
    {
      "file": "ph/narva-estonia-22/index.html#inline-script-2",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code defines a custom element `astro-island`, references `self.Astro` and `window.Astro`, uses `import()` to dynamically load components/renderers based on attributes (`component-url`, `renderer-url`), and manages hydration states (`astro:hydrate`, `astro:only`). These are core concepts and patterns used by the Astro web framework."
        }
      ]
    },
    {
      "file": "ph/narva-estonia-23/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code includes an event listener for `astro:before-swap`, which is a specific event triggered by the Astro framework during client-side view transitions."
        }
      ]
    },
    {
      "file": "ph/narva-estonia-23/index.html#inline-script-2",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code defines a custom element `astro-island`, references `self.Astro` and `window.Astro`, uses `import()` to dynamically load components/renderers based on attributes (`component-url`, `renderer-url`), and manages hydration states (`astro:hydrate`, `astro:only`). These are core concepts and patterns used by the Astro web framework."
        }
      ]
    },
    {
      "file": "ph/narva-estonia-24/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code includes an event listener for `astro:before-swap`, which is a specific event triggered by the Astro framework during client-side view transitions."
        }
      ]
    },
    {
      "file": "ph/narva-estonia-24/index.html#inline-script-2",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code defines a custom element `astro-island`, references `self.Astro` and `window.Astro`, uses `import()` to dynamically load components/renderers based on attributes (`component-url`, `renderer-url`), and manages hydration states (`astro:hydrate`, `astro:only`). These are core concepts and patterns used by the Astro web framework."
        }
      ]
    },
    {
      "file": "ph/narva-estonia-25/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code includes an event listener for `astro:before-swap`, which is a specific event triggered by the Astro framework during client-side view transitions."
        }
      ]
    },
    {
      "file": "ph/narva-estonia-25/index.html#inline-script-2",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code defines a custom element `astro-island`, references `self.Astro` and `window.Astro`, uses `import()` to dynamically load components/renderers based on attributes (`component-url`, `renderer-url`), and manages hydration states (`astro:hydrate`, `astro:only`). These are core concepts and patterns used by the Astro web framework."
        }
      ]
    },
    {
      "file": "ph/saaremaa-estonia-26/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code includes an event listener for `astro:before-swap`, which is a specific event triggered by the Astro framework during client-side view transitions."
        }
      ]
    },
    {
      "file": "ph/saaremaa-estonia-26/index.html#inline-script-2",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code defines a custom element `astro-island`, references `self.Astro` and `window.Astro`, uses `import()` to dynamically load components/renderers based on attributes (`component-url`, `renderer-url`), and manages hydration states (`astro:hydrate`, `astro:only`). These are core concepts and patterns used by the Astro web framework."
        }
      ]
    },
    {
      "file": "ph/saaremaa-estonia-27/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code includes an event listener for `astro:before-swap`, which is a specific event triggered by the Astro framework during client-side view transitions."
        }
      ]
    },
    {
      "file": "ph/saaremaa-estonia-27/index.html#inline-script-2",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code defines a custom element `astro-island`, references `self.Astro` and `window.Astro`, uses `import()` to dynamically load components/renderers based on attributes (`component-url`, `renderer-url`), and manages hydration states (`astro:hydrate`, `astro:only`). These are core concepts and patterns used by the Astro web framework."
        }
      ]
    },
    {
      "file": "ph/saaremaa-estonia-30/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code includes an event listener for `astro:before-swap`, which is a specific event triggered by the Astro framework during client-side view transitions."
        }
      ]
    },
    {
      "file": "ph/saaremaa-estonia-30/index.html#inline-script-2",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code defines a custom element `astro-island`, references `self.Astro` and `window.Astro`, uses `import()` to dynamically load components/renderers based on attributes (`component-url`, `renderer-url`), and manages hydration states (`astro:hydrate`, `astro:only`). These are core concepts and patterns used by the Astro web framework."
        }
      ]
    },
    {
      "file": "ph/saaremaa-estonia-31/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code includes an event listener for `astro:before-swap`, which is a specific event triggered by the Astro framework during client-side view transitions."
        }
      ]
    },
    {
      "file": "ph/saaremaa-estonia-31/index.html#inline-script-2",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code defines a custom element `astro-island`, references `self.Astro` and `window.Astro`, uses `import()` to dynamically load components/renderers based on attributes (`component-url`, `renderer-url`), and manages hydration states (`astro:hydrate`, `astro:only`). These are core concepts and patterns used by the Astro web framework."
        }
      ]
    },
    {
      "file": "ph/tbilisi-georgia-10/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code includes an event listener for `astro:before-swap`, which is a specific event triggered by the Astro framework during client-side view transitions."
        }
      ]
    },
    {
      "file": "ph/tbilisi-georgia-10/index.html#inline-script-2",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code defines a custom element `astro-island`, references `self.Astro` and `window.Astro`, uses `import()` to dynamically load components/renderers based on attributes (`component-url`, `renderer-url`), and manages hydration states (`astro:hydrate`, `astro:only`). These are core concepts and patterns used by the Astro web framework."
        }
      ]
    },
    {
      "file": "ph/tbilisi-georgia-11/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code includes an event listener for `astro:before-swap`, which is a specific event triggered by the Astro framework during client-side view transitions."
        }
      ]
    },
    {
      "file": "ph/tbilisi-georgia-11/index.html#inline-script-2",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code defines a custom element `astro-island`, references `self.Astro` and `window.Astro`, uses `import()` to dynamically load components/renderers based on attributes (`component-url`, `renderer-url`), and manages hydration states (`astro:hydrate`, `astro:only`). These are core concepts and patterns used by the Astro web framework."
        }
      ]
    },
    {
      "file": "ph/tbilisi-georgia-12/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code includes an event listener for `astro:before-swap`, which is a specific event triggered by the Astro framework during client-side view transitions."
        }
      ]
    },
    {
      "file": "ph/tbilisi-georgia-12/index.html#inline-script-2",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code defines a custom element `astro-island`, references `self.Astro` and `window.Astro`, uses `import()` to dynamically load components/renderers based on attributes (`component-url`, `renderer-url`), and manages hydration states (`astro:hydrate`, `astro:only`). These are core concepts and patterns used by the Astro web framework."
        }
      ]
    },
    {
      "file": "ph/tbilisi-georgia-13/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code includes an event listener for `astro:before-swap`, which is a specific event triggered by the Astro framework during client-side view transitions."
        }
      ]
    },
    {
      "file": "ph/tbilisi-georgia-13/index.html#inline-script-2",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code defines a custom element `astro-island`, references `self.Astro` and `window.Astro`, uses `import()` to dynamically load components/renderers based on attributes (`component-url`, `renderer-url`), and manages hydration states (`astro:hydrate`, `astro:only`). These are core concepts and patterns used by the Astro web framework."
        }
      ]
    },
    {
      "file": "ph/tbilisi-georgia-14/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code includes an event listener for `astro:before-swap`, which is a specific event triggered by the Astro framework during client-side view transitions."
        }
      ]
    },
    {
      "file": "ph/tbilisi-georgia-14/index.html#inline-script-2",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code defines a custom element `astro-island`, references `self.Astro` and `window.Astro`, uses `import()` to dynamically load components/renderers based on attributes (`component-url`, `renderer-url`), and manages hydration states (`astro:hydrate`, `astro:only`). These are core concepts and patterns used by the Astro web framework."
        }
      ]
    },
    {
      "file": "ph/tbilisi-georgia-8/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code includes an event listener for `astro:before-swap`, which is a specific event triggered by the Astro framework during client-side view transitions."
        }
      ]
    },
    {
      "file": "ph/tbilisi-georgia-8/index.html#inline-script-2",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code defines a custom element `astro-island`, references `self.Astro` and `window.Astro`, uses `import()` to dynamically load components/renderers based on attributes (`component-url`, `renderer-url`), and manages hydration states (`astro:hydrate`, `astro:only`). These are core concepts and patterns used by the Astro web framework."
        }
      ]
    },
    {
      "file": "ph/tbilisi-georgia-9/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code includes an event listener for `astro:before-swap`, which is a specific event triggered by the Astro framework during client-side view transitions."
        }
      ]
    },
    {
      "file": "ph/tbilisi-georgia-9/index.html#inline-script-2",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code defines a custom element `astro-island`, references `self.Astro` and `window.Astro`, uses `import()` to dynamically load components/renderers based on attributes (`component-url`, `renderer-url`), and manages hydration states (`astro:hydrate`, `astro:only`). These are core concepts and patterns used by the Astro web framework."
        }
      ]
    },
    {
      "file": "support/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code includes an event listener for `astro:before-swap`, which is a specific event triggered by the Astro framework during client-side view transitions."
        }
      ]
    },
    {
      "file": "support/index.html#inline-script-2",
      "occurences": [
        {
          "name": "Astro",
          "motivation": "The code defines a custom element `astro-island`, references `self.Astro` and `window.Astro`, uses `import()` to dynamically load components/renderers based on attributes (`component-url`, `renderer-url`), and manages hydration states (`astro:hydrate`, `astro:only`). These are core concepts and patterns used by the Astro web framework."
        }
      ]
    }
  ],
  "urls": [],
  "ethereum": [],
  "fallbacks": []
}