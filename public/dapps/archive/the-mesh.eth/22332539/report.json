{
  "version": 2,
  "contentHash": "bafybeif2pqo6sufuvszfytofsnm2ob4ww55oni4n44iqsvh6wljiuxw5ki",
  "timestamp": 1745429018,
  "blockNumber": 22332539,
  "rootMimeType": "text/html",
  "totalSize": null,
  "favicon": "",
  "title": "The Mesh | Landing Site",
  "distributionPurity": {
    "externalScripts": [
      {
        "file": "index.html",
        "occurences": [
          {
            "type": "script",
            "url": "https://cdn.jsdelivr.net/npm/@alch/alchemy-web3@latest/dist/alchemyWeb3.min.js"
          }
        ]
      }
    ],
    "externalMedia": [
      {
        "file": "index.html",
        "occurences": [
          {
            "type": "img",
            "url": "https://lh3.googleusercontent.com/ZVahGUEdDhVWpg6dDytkIq6shW_YvFZZdz6xlb7EtgEH3uXE1CSXndVpOOfBybz7chUk3gzH1Ev781PdMmoHl9OUlDPmYvLA582p0Q=s0"
          }
        ]
      }
    ]
  },
  "networkingPurity": [
    {
      "file": "index.html#inline-script-1",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://eth-mainnet.alchemyapi.io/v2/"
          ],
          "library": "AlchemyWeb3",
          "type": "rpc",
          "motivation": "The `AlchemyWeb3` library is initialized with the URL `https://eth-mainnet.alchemyapi.io/v2/yQIn2v-52S5IEE-JjzJUx0HoFFSpvE2k`. Subsequent smart contract interactions like `theMesh.methods.reveal(tokenId).call()`, `theMesh.methods.ownerOf(i).call()`, `theMesh.methods.getNftBalance(addr).call()`, etc., use this configured instance. These interactions send JSON-RPC requests to the specified Alchemy endpoint. AlchemyWeb3 likely uses `fetch` (or potentially `XMLHttpRequest`) internally to make these HTTP requests to the RPC endpoint."
        }
      ]
    }
  ],
  "libraryUsage": [
    {
      "file": "index.html#inline-script-1",
      "occurences": [
        {
          "name": "AlchemyWeb3",
          "motivation": "The code explicitly calls `AlchemyWeb3.createAlchemyWeb3()` to initialize a connection to the Ethereum network via Alchemy's infrastructure. It then uses the resulting `w3` object and its `eth.Contract` interface to interact with a smart contract."
        }
      ]
    }
  ],
  "urls": [],
  "ethereum": [],
  "fallbacks": []
}