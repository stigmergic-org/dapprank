{
  "version": 2,
  "contentHash": "bafybeia5byb5rrsjv7ir5f6wgmnn2izlflhc6fsxxk556l2uph7rs7otue",
  "timestamp": 1745435722,
  "blockNumber": 22333730,
  "rootMimeType": "inode/directory",
  "totalSize": 2452890,
  "favicon": "nns.svg",
  "title": "Nick Name Service (NNS)",
  "distributionPurity": {
    "externalScripts": [],
    "externalMedia": []
  },
  "networkingPurity": [
    {
      "file": "assets/ccip-DTSuYPnc.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "<URL_from_OffchainLookup_revert>"
          ],
          "library": "CCIP Read (EIP-3668) Client Logic",
          "type": "auxiliary",
          "motivation": "```markdown\nThe `ccipRequest` function (`T`) iterates through an array of `urls` (passed as argument `a`, originating from the `OffchainLookup` revert data). Inside the loop, it calls `fetch(t.replace(\"{sender}\", r.toLowerCase()).replace(\"{data}\", c), ...)`, where `t` is one of the URLs from the input array. \n\n- The URL is dynamically constructed based on the URL string provided by the smart contract's revert data, substituting placeholders `{sender}` and `{data}`.\n- The method is determined dynamically: 'POST' if the URL template `t` does *not* include `'{data}'`, and 'GET' otherwise.\n- Data (`{data: c, sender: r}`) is sent in the request body for POST requests.\n- The purpose is to fetch off-chain data from a CCIP Read gateway as specified in EIP-3668, making it an 'auxiliary' service distinct from standard RPC or bundler endpoints.\n- This `fetch` call is part of the custom CCIP Read implementation within this code, not directly from a generic third-party library like axios or ethers within this specific snippet (though underlying functions imported might use them).\n```"
        }
      ]
    },
    {
      "file": "assets/index-BLWCd6Nq.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://explorer-api.walletconnect.com/"
          ],
          "library": "WalletConnect Web3Modal",
          "type": "auxiliary",
          "motivation": "The code calls `p.fetchTransactions(O.getPlainAddress(this.caipAddress))`. Based on the identification of `p` as a WalletConnect Web3Modal controller responsible for transactions, this function internally makes network requests (likely using `fetch`) to retrieve transaction history data for the specified address. The typical endpoint for this in WalletConnect is the Explorer API."
        },
        {
          "method": "fetch",
          "urls": [
            "https://pulse.walletconnect.com/"
          ],
          "library": "WalletConnect Web3Modal",
          "type": "auxiliary",
          "motivation": "The code calls `z.sendEvent({...})` to track the `LOAD_MORE_TRANSACTIONS` event. Based on the identification of `z` as the WalletConnect Web3Modal `EventsController`, this function internally sends analytics/tracking data (likely using `fetch` or potentially `navigator.sendBeacon`) to WalletConnect's analytics endpoint (Pulse)."
        }
      ]
    },
    {
      "file": "assets/index-BXiJ_fQB.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://www.walletlink.org/events"
          ],
          "library": "@coinbase/wallet-sdk",
          "type": "auxiliary",
          "motivation": "```javascript\n// In WalletLinkHTTP.prototype.markUnseenEventsAsSeen\nfetch(`${this.linkAPIUrl}/events/${t.eventId}/seen`, ...);\n// In WalletLinkHTTP.prototype.fetchUnseenEvents\nfetch(`${this.linkAPIUrl}/events?unseen=true`, ...);\n// linkAPIUrl is defined as \"https://www.walletlink.org\"\n```\n- The code makes `fetch` calls to URLs constructed dynamically using `this.linkAPIUrl` (which defaults to `https://www.walletlink.org`) and paths `/events/:eventId/seen` and `/events?unseen=true`.\n- These calls are part of the `WalletLinkHTTP` class within the Coinbase Wallet SDK, used for managing event states with the WalletLink backend."
        },
        {
          "method": "fetch",
          "urls": [
            "variable (jsonRpcUrl)"
          ],
          "library": "@coinbase/wallet-sdk",
          "type": "rpc",
          "motivation": "```javascript\n// In RelayAbstract.prototype.makeEthereumJSONRPCRequest\nwindow.fetch(h, { // h is the jsonRpcUrl parameter\n  method: \"POST\",\n  body: JSON.stringify(t),\n  mode: \"cors\",\n  headers: { \"Content-Type\": \"application/json\" }\n}).then(...);\n// This is called by CoinbaseWalletProvider._handleAsynchronousMethods\n(await this.initializeRelay()).makeEthereumJSONRPCRequest(u, this.jsonRpcUrl).catch(...);\n```\n- The `makeEthereumJSONRPCRequest` function within the SDK's `RelayAbstract` class uses `fetch` to send JSON-RPC requests.\n- The URL (`h`) is passed as a parameter and corresponds to `this.jsonRpcUrl` in the `CoinbaseWalletProvider`.\n- This URL is configurable via the SDK constructor (`_jsonRpcUrlFromOpts`) or local storage (`m`, key `DefaultJsonRpcUrl`) and represents the connection endpoint for the Ethereum node."
        },
        {
          "method": "WebSocket",
          "urls": [
            "wss://www.walletlink.org/rpc"
          ],
          "library": "@coinbase/wallet-sdk",
          "type": "auxiliary",
          "motivation": "```javascript\n// In WalletLinkWebSocket constructor\nthis.url = t.replace(/^http/, \"ws\"); // t is linkAPIUrl\n// In WalletLinkWebSocket.prototype.connect\nthis.webSocket = o = new this.WebSocketClass(this.url);\n// url becomes wss://www.walletlink.org/rpc\n```\n- The `WalletLinkWebSocket` class, part of the Coinbase Wallet SDK, establishes a WebSocket connection.\n- The URL is derived from the `linkAPIUrl` (defaulting to `https://www.walletlink.org`), changing the protocol to `ws` (implicitly `wss` for https) and appending `/rpc`.\n- This WebSocket is used for real-time communication between the dapp and the mobile wallet via the WalletLink backend."
        }
      ]
    },
    {
      "file": "assets/index-CDjaS65L.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://pulse.walletconnect.org/e"
          ],
          "library": "Internal Fetch Wrapper (El)",
          "type": "auxiliary",
          "motivation": "The code defines an `El` class wrapping `fetch`. An instance `q_` is created with `baseUrl` set to `pe.getAnalyticsUrl()`, which resolves to `G.PULSE_API_URL` ('https://pulse.walletconnect.org'). It's called with `path: \"/e\"` for sending analytics events.\n```javascript\nz_=pe.getAnalyticsUrl(),q_=new El({baseUrl:z_,clientId:null})\n// ...\nawait q_.post({path:\"/e\",params:We.getSdkProperties(),body:{eventId:pe.getUUID(),...}})\n```"
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.web3modal.org/getWalletImage/"
          ],
          "library": "Internal Fetch Wrapper (El)",
          "type": "auxiliary",
          "motivation": "The `El` wrapper instance `vr` (baseUrl `pe.getApiUrl()`, which is `G.W3M_API_URL` 'https://api.web3modal.org') is used with `getBlob` and path `/getWalletImage/*`.\n```javascript\nW_=pe.getApiUrl(),vr=new El({baseUrl:W_,clientId:null})\n// ...\nconst e=`${vr.baseUrl}/getWalletImage/${t}`;\nr=await vr.getBlob({path:e,params:Ce._getSdkProperties()})\n```"
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.web3modal.org/public/getAssetImage/"
          ],
          "library": "Internal Fetch Wrapper (El)",
          "type": "auxiliary",
          "motivation": "The `El` wrapper instance `vr` (baseUrl `pe.getApiUrl()`, which is `G.W3M_API_URL` 'https://api.web3modal.org') is used with `getBlob` and path `/public/getAssetImage/*`.\n```javascript\nW_=pe.getApiUrl(),vr=new El({baseUrl:W_,clientId:null})\n// ...\nconst e=`${vr.baseUrl}/public/getAssetImage/${t}`;\nr=await vr.getBlob({path:e,params:Ce._getSdkProperties()})\n// Used for Network and Connector images\n```"
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.web3modal.org/public/getCurrencyImage/"
          ],
          "library": "Internal Fetch Wrapper (El)",
          "type": "auxiliary",
          "motivation": "The `El` wrapper instance `vr` (baseUrl `pe.getApiUrl()`, which is `G.W3M_API_URL` 'https://api.web3modal.org') is used with `getBlob` and path `/public/getCurrencyImage/*`.\n```javascript\nW_=pe.getApiUrl(),vr=new El({baseUrl:W_,clientId:null})\n// ...\nconst e=`${vr.baseUrl}/public/getCurrencyImage/${t}`;\nr=await vr.getBlob({path:e,params:Ce._getSdkProperties()})\n```"
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.web3modal.org/public/getTokenImage/"
          ],
          "library": "Internal Fetch Wrapper (El)",
          "type": "auxiliary",
          "motivation": "The `El` wrapper instance `vr` (baseUrl `pe.getApiUrl()`, which is `G.W3M_API_URL` 'https://api.web3modal.org') is used with `getBlob` and path `/public/getTokenImage/*`.\n```javascript\nW_=pe.getApiUrl(),vr=new El({baseUrl:W_,clientId:null})\n// ...\nconst e=`${vr.baseUrl}/public/getTokenImage/${t}`;\nr=await vr.getBlob({path:e,params:Ce._getSdkProperties()})\n```"
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.web3modal.org/getWallets"
          ],
          "library": "Internal Fetch Wrapper (El)",
          "type": "auxiliary",
          "motivation": "The `El` wrapper instance `vr` (baseUrl `pe.getApiUrl()`, which is `G.W3M_API_URL` 'https://api.web3modal.org') is used with `get` and path `/getWallets`.\n```javascript\nW_=pe.getApiUrl(),vr=new El({baseUrl:W_,clientId:null})\n// ...\n{data:e}=await vr.get({path:\"/getWallets\",params:{...}})\n```"
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.web3modal.org/getAnalyticsConfig"
          ],
          "library": "Internal Fetch Wrapper (El)",
          "type": "auxiliary",
          "motivation": "The `El` wrapper instance `vr` (baseUrl `pe.getApiUrl()`, which is `G.W3M_API_URL` 'https://api.web3modal.org') is used with `get` and path `/getAnalyticsConfig`.\n```javascript\nW_=pe.getApiUrl(),vr=new El({baseUrl:W_,clientId:null})\n// ...\n{isAnalyticsEnabled:t}=await vr.get({path:\"/getAnalyticsConfig\",params:Ce._getSdkProperties()})\n```"
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/supported-chains"
          ],
          "library": "Internal Fetch Wrapper (El)",
          "type": "auxiliary",
          "motivation": "The `El` wrapper instance `Kr.api` (baseUrl `pe.getBlockchainApiUrl()`, which is `G.BLOCKCHAIN_API_RPC_URL` 'https://rpc.walletconnect.org') is used with `get` and path `v1/supported-chains`.\n```javascript\nIC=pe.getBlockchainApiUrl(),Kr=ft({clientId:null,api:new El({baseUrl:IC,clientId:null}),...})\n// ...\nconst t=await ue.get({path:\"v1/supported-chains\"});\n```"
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/identity/"
          ],
          "library": "Internal Fetch Wrapper (El)",
          "type": "auxiliary",
          "motivation": "The `El` wrapper instance `Kr.api` (baseUrl `pe.getBlockchainApiUrl()`, which is `G.BLOCKCHAIN_API_RPC_URL` 'https://rpc.walletconnect.org') is used with `get` and path `/v1/identity/*`.\n```javascript\nIC=pe.getBlockchainApiUrl(),Kr=ft({clientId:null,api:new El({baseUrl:IC,clientId:null}),...})\n// ...\nconst s=await ue.get({path:`/v1/identity/${t}`,params:{...}});\n```"
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/account/",
            "https://rpc.walletconnect.org/v1/account/"
          ],
          "library": "Internal Fetch Wrapper (El)",
          "type": "auxiliary",
          "motivation": "The `El` wrapper instance `Kr.api` (baseUrl `pe.getBlockchainApiUrl()`, which is `G.BLOCKCHAIN_API_RPC_URL` 'https://rpc.walletconnect.org') is used with `get` and paths `/v1/account/*/history` and `/v1/account/*/balance`.\n```javascript\nIC=pe.getBlockchainApiUrl(),Kr=ft({clientId:null,api:new El({baseUrl:IC,clientId:null}),...})\n// ...\nue.get({path:`/v1/account/${t}/history`,...})\n// ...\nue.get({path:`/v1/account/${t}/balance`,...})\n```"
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/convert/quotes"
          ],
          "library": "Internal Fetch Wrapper (El)",
          "type": "auxiliary",
          "motivation": "The `El` wrapper instance `Kr.api` (baseUrl `pe.getBlockchainApiUrl()`, which is `G.BLOCKCHAIN_API_RPC_URL` 'https://rpc.walletconnect.org') is used with `get` and path `/v1/convert/quotes`.\n```javascript\nIC=pe.getBlockchainApiUrl(),Kr=ft({clientId:null,api:new El({baseUrl:IC,clientId:null}),...})\n// ...\nue.get({path:\"/v1/convert/quotes\",headers:{...},params:{...}})\n```"
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/convert/tokens"
          ],
          "library": "Internal Fetch Wrapper (El)",
          "type": "auxiliary",
          "motivation": "The `El` wrapper instance `Kr.api` (baseUrl `pe.getBlockchainApiUrl()`, which is `G.BLOCKCHAIN_API_RPC_URL` 'https://rpc.walletconnect.org') is used with `get` and path `/v1/convert/tokens`.\n```javascript\nIC=pe.getBlockchainApiUrl(),Kr=ft({clientId:null,api:new El({baseUrl:IC,clientId:null}),...})\n// ...\nue.get({path:\"/v1/convert/tokens\",params:{chainId:t}})\n```"
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/fungible/price"
          ],
          "library": "Internal Fetch Wrapper (El)",
          "type": "auxiliary",
          "motivation": "The `El` wrapper instance `Kr.api` (baseUrl `pe.getBlockchainApiUrl()`, which is `G.BLOCKCHAIN_API_RPC_URL` 'https://rpc.walletconnect.org') is used with `post` and path `/v1/fungible/price`.\n```javascript\nIC=pe.getBlockchainApiUrl(),Kr=ft({clientId:null,api:new El({baseUrl:IC,clientId:null}),...})\n// ...\nKr.api.post({path:\"/v1/fungible/price\",body:{...},headers:{...}})\n```"
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/convert/allowance"
          ],
          "library": "Internal Fetch Wrapper (El)",
          "type": "auxiliary",
          "motivation": "The `El` wrapper instance `Kr.api` (baseUrl `pe.getBlockchainApiUrl()`, which is `G.BLOCKCHAIN_API_RPC_URL` 'https://rpc.walletconnect.org') is used with `get` and path `/v1/convert/allowance`.\n```javascript\nIC=pe.getBlockchainApiUrl(),Kr=ft({clientId:null,api:new El({baseUrl:IC,clientId:null}),...})\n// ...\nue.get({path:\"/v1/convert/allowance\",params:{...},headers:{...}})\n```"
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/convert/gas-price"
          ],
          "library": "Internal Fetch Wrapper (El)",
          "type": "auxiliary",
          "motivation": "The `El` wrapper instance `Kr.api` (baseUrl `pe.getBlockchainApiUrl()`, which is `G.BLOCKCHAIN_API_RPC_URL` 'https://rpc.walletconnect.org') is used with `get` and path `/v1/convert/gas-price`.\n```javascript\nIC=pe.getBlockchainApiUrl(),Kr=ft({clientId:null,api:new El({baseUrl:IC,clientId:null}),...})\n// ...\nue.get({path:\"/v1/convert/gas-price\",headers:{...},params:{...}})\n```"
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/convert/build-transaction"
          ],
          "library": "Internal Fetch Wrapper (El)",
          "type": "auxiliary",
          "motivation": "The `El` wrapper instance `Kr.api` (baseUrl `pe.getBlockchainApiUrl()`, which is `G.BLOCKCHAIN_API_RPC_URL` 'https://rpc.walletconnect.org') is used with `post` and path `/v1/convert/build-transaction`.\n```javascript\nIC=pe.getBlockchainApiUrl(),Kr=ft({clientId:null,api:new El({baseUrl:IC,clientId:null}),...})\n// ...\nKr.api.post({path:\"/v1/convert/build-transaction\",headers:{...},body:{...}})\n```"
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/convert/build-approve"
          ],
          "library": "Internal Fetch Wrapper (El)",
          "type": "auxiliary",
          "motivation": "The `El` wrapper instance `Kr.api` (baseUrl `pe.getBlockchainApiUrl()`, which is `G.BLOCKCHAIN_API_RPC_URL` 'https://rpc.walletconnect.org') is used with `get` and path `/v1/convert/build-approve`.\n```javascript\nIC=pe.getBlockchainApiUrl(),Kr=ft({clientId:null,api:new El({baseUrl:IC,clientId:null}),...})\n// ...\nue.get({path:\"/v1/convert/build-approve\",headers:{...},params:{...}})\n```"
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/profile/account/",
            "https://rpc.walletconnect.org/v1/profile/account"
          ],
          "library": "Internal Fetch Wrapper (El)",
          "type": "auxiliary",
          "motivation": "The `El` wrapper instance `Kr.api` (baseUrl `pe.getBlockchainApiUrl()`, which is `G.BLOCKCHAIN_API_RPC_URL` 'https://rpc.walletconnect.org') is used with `get` and `post` on path `/v1/profile/account/*` and `/v1/profile/account`.\n```javascript\nIC=pe.getBlockchainApiUrl(),Kr=ft({clientId:null,api:new El({baseUrl:IC,clientId:null}),...})\n// ...\nue.get({path:`/v1/profile/account/${t}`,params:{...}})\n// ...\nKr.api.post({path:\"/v1/profile/account\",body:{...},headers:{...}})\n```"
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/profile/reverse/"
          ],
          "library": "Internal Fetch Wrapper (El)",
          "type": "auxiliary",
          "motivation": "The `El` wrapper instance `Kr.api` (baseUrl `pe.getBlockchainApiUrl()`, which is `G.BLOCKCHAIN_API_RPC_URL` 'https://rpc.walletconnect.org') is used with `get` and path `/v1/profile/reverse/*`.\n```javascript\nIC=pe.getBlockchainApiUrl(),Kr=ft({clientId:null,api:new El({baseUrl:IC,clientId:null}),...})\n// ...\nue.get({path:`/v1/profile/reverse/${t}`,params:{...}})\n```"
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/profile/suggestions/"
          ],
          "library": "Internal Fetch Wrapper (El)",
          "type": "auxiliary",
          "motivation": "The `El` wrapper instance `Kr.api` (baseUrl `pe.getBlockchainApiUrl()`, which is `G.BLOCKCHAIN_API_RPC_URL` 'https://rpc.walletconnect.org') is used with `get` and path `/v1/profile/suggestions/*`.\n```javascript\nIC=pe.getBlockchainApiUrl(),Kr=ft({clientId:null,api:new El({baseUrl:IC,clientId:null}),...})\n// ...\nue.get({path:`/v1/profile/suggestions/${t}`,params:{...}})\n```"
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/generators/onrampurl"
          ],
          "library": "Internal Fetch Wrapper (El)",
          "type": "auxiliary",
          "motivation": "The `El` wrapper instance `Kr.api` (baseUrl `pe.getBlockchainApiUrl()`, which is `G.BLOCKCHAIN_API_RPC_URL` 'https://rpc.walletconnect.org') is used with `post` and path `/v1/generators/onrampurl`.\n```javascript\nIC=pe.getBlockchainApiUrl(),Kr=ft({clientId:null,api:new El({baseUrl:IC,clientId:null}),...})\n// ...\nKr.api.post({path:\"/v1/generators/onrampurl\",params:{...},body:{...}})\n```"
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/onramp/options"
          ],
          "library": "Internal Fetch Wrapper (El)",
          "type": "auxiliary",
          "motivation": "The `El` wrapper instance `Kr.api` (baseUrl `pe.getBlockchainApiUrl()`, which is `G.BLOCKCHAIN_API_RPC_URL` 'https://rpc.walletconnect.org') is used with `get` and path `/v1/onramp/options`.\n```javascript\nIC=pe.getBlockchainApiUrl(),Kr=ft({clientId:null,api:new El({baseUrl:IC,clientId:null}),...})\n// ...\nawait ue.get({path:\"/v1/onramp/options\"})\n```"
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/onramp/quote"
          ],
          "library": "Internal Fetch Wrapper (El)",
          "type": "auxiliary",
          "motivation": "The `El` wrapper instance `Kr.api` (baseUrl `pe.getBlockchainApiUrl()`, which is `G.BLOCKCHAIN_API_RPC_URL` 'https://rpc.walletconnect.org') is used with `post` and path `/v1/onramp/quote`.\n```javascript\nIC=pe.getBlockchainApiUrl(),Kr=ft({clientId:null,api:new El({baseUrl:IC,clientId:null}),...})\n// ...\nawait Kr.api.post({path:\"/v1/onramp/quote\",params:{...},body:{...}})\n```"
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/sessions/"
          ],
          "library": "Internal Fetch Wrapper (El)",
          "type": "auxiliary",
          "motivation": "The `El` wrapper instance `Kr.api` (baseUrl `pe.getBlockchainApiUrl()`, which is `G.BLOCKCHAIN_API_RPC_URL` 'https://rpc.walletconnect.org') is used with `get` and path `/v1/sessions/*`.\n```javascript\nIC=pe.getBlockchainApiUrl(),Kr=ft({clientId:null,api:new El({baseUrl:IC,clientId:null}),...})\n// ...\nue.get({path:`/v1/sessions/${t}`})\n```"
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/sessions/"
          ],
          "library": "Internal Fetch Wrapper (El)",
          "type": "auxiliary",
          "motivation": "The `El` wrapper instance `Kr.api` (baseUrl `pe.getBlockchainApiUrl()`, which is `G.BLOCKCHAIN_API_RPC_URL` 'https://rpc.walletconnect.org') is used with `post` and path `/v1/sessions/*/revoke`.\n```javascript\nIC=pe.getBlockchainApiUrl(),Kr=ft({clientId:null,api:new El({baseUrl:IC,clientId:null}),...})\n// ...\nKr.api.post({path:`/v1/sessions/${t}/revoke`,params:{...},body:{...}})\n```"
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/"
          ],
          "library": "viem / wagmi / Native fetch",
          "type": "rpc",
          "motivation": "Used within `WT` for EIP-1271 verification, constructing a URL like `https://rpc.walletconnect.org/v1/?chainId=...&projectId=...`. Also used generically by `wagmi`/`viem` HTTP transports (`Zo`, `On`, `fL`) where the base URL can be configured or defaults to RPC URLs possibly derived from `rpc.walletconnect.org`.\n```javascript\nh=await fetch(`${i||zT}/?chainId=${n}&projectId=${s}`,{method:\"POST\",body:JSON.stringify({...method:\"eth_call\"...})})\n// ...\nfunction Zo(t,e={}){ ... const I=fL(_,{fetchOptions:n,onRequest:a,onResponse:u,timeout:C});return cm({...,request(...){...await I.request(...)} ... })}\n```"
        },
        {
          "method": "fetch",
          "urls": [
            "https://echo.walletconnect.com/"
          ],
          "library": "Native fetch",
          "type": "auxiliary",
          "motivation": "Used in `registerDeviceToken` to post data to `ER`/projectId/clients, where `ER` is 'https://echo.walletconnect.com'.\n```javascript\nawait fetch(u,{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({client_id:s,type:o,token:i,always_raw:a})})\n// where u is `${ER}/${this.projectId}/clients`\n```"
        },
        {
          "method": "fetch",
          "urls": [
            "https://verify.walletconnect.org/attestation/"
          ],
          "library": "Native fetch",
          "type": "auxiliary",
          "motivation": "Used in `fetchAttestation` to fetch attestation data from the Verify API v1.\n```javascript\na=await fetch(`${i}/attestation/${s}?v2Supported=true`,{signal:this.abortController.signal});\n// where i defaults to 'https://verify.walletconnect.org'\n```"
        },
        {
          "method": "fetch",
          "urls": [
            "https://verify.walletconnect.org/v3/public-key"
          ],
          "library": "Native fetch",
          "type": "auxiliary",
          "motivation": "Used in `fetchPublicKey` to fetch the public key for Verify API v2 JWT validation.\n```javascript\ni=await fetch(`${this.verifyUrlV3}/public-key`,{signal:this.abortController.signal});\n// where verifyUrlV3 is 'https://verify.walletconnect.org/v3'\n```"
        },
        {
          "method": "fetch",
          "urls": [
            "https://pulse.walletconnect.org/batch"
          ],
          "library": "Native fetch",
          "type": "auxiliary",
          "motivation": "Used in `sendEvent` to send batched analytics data to the Pulse API.\n```javascript\nreturn await fetch(`${IR}?projectId=${this.core.projectId}&st=events_sdk&sv=js-${s0}${i}`,{method:\"POST\",body:JSON.stringify(s)})\n// where IR is 'https://pulse.walletconnect.org/batch'\n```"
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/bundler"
          ],
          "library": "Native fetch",
          "type": "bundler",
          "motivation": "Used in `getUserOperationReceipt` to fetch user operation receipts from the WalletConnect bundler endpoint (`gM`).\n```javascript\ni=await fetch(s,{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify(Js(\"eth_getUserOperationReceipt\",...))});\n// where s is derived from `${gM}?projectId=...&chainId=...&bundler=...` and gM is 'https://rpc.walletconnect.org/v1/bundler'\n```"
        },
        {
          "method": "WebSocket",
          "urls": [
            "wss://relay.walletconnect.org"
          ],
          "library": "Internal WebSocket Wrapper (V7) / @walletconnect/jsonrpc-provider",
          "type": "auxiliary",
          "motivation": "The `V7` class wraps the native WebSocket API. It's instantiated within the Relayer (`xk`) with a URL constructed by `dT`, which includes the base URL `this.relayUrl` (defaulting to `tA`, 'wss://relay.walletconnect.org') and adds necessary connection parameters like auth, projectId, and user agent.\n```javascript\nconst tA=\"wss://relay.walletconnect.org\";\n// ...\nlet V7=class{ ... constructor(e){ ... const i=new W7(e,[],s); ... }}\n// ...\nthis.provider=new mn(new V7(dT({...,relayUrl:this.relayUrl,...})))\n```"
        }
      ]
    },
    {
      "file": "assets/index-FXfGfrzZ.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "Determined by configuration: `options.jsonRpcUrl` or `chain.rpcUrls.default.http[0]`"
          ],
          "library": "Coinbase Wallet SDK",
          "type": "rpc",
          "motivation": "```javascript\n// Example call using the provider\nconst c = await (await this.getProvider()).request({ method: \"eth_chainId\" });\n\n// Determining the RPC URL for the provider (v3/headless mode)\nconst h = r.jsonRpcUrl || (i == null ? void 0 : i.rpcUrls.default.http[0]);\nw = f.makeWeb3Provider(h, l);\n```\nThe code utilizes the `provider.request` method, obtained via `getProvider()` which uses the Coinbase Wallet SDK. This method is used to make standard Ethereum JSON-RPC calls like `eth_requestAccounts`, `eth_chainId`, `wallet_switchEthereumChain`, etc. Although the specific browser networking API call (like `fetch`) is abstracted by the SDK and not directly visible in this snippet, `fetch` is the standard modern mechanism used by such libraries for HTTP communication. The target RPC endpoint URL (`h` in the v3 example) is dynamically determined based on the configuration passed during initialization (`r.jsonRpcUrl`) or defaults derived from the chain configuration (`i.rpcUrls.default.http[0]`)."
        }
      ]
    },
    {
      "file": "assets/index-oZefQTvi.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://www.walletlink.org/events"
          ],
          "library": "Internal SDK logic",
          "type": "auxiliary",
          "motivation": "The `sn` class uses `fetch` in `markUnseenEventsAsSeen` and `fetchUnseenEvents` to communicate with the WalletLink backend. The base URL (`this.linkAPIUrl`) is initialized in the `H` class with the hardcoded constant `Ye` which resolves to `https://www.walletlink.org`. URLs are constructed like `${this.linkAPIUrl}/events?unseen=true` and `${this.linkAPIUrl}/events/${n.eventId}/seen`."
        },
        {
          "method": "fetch",
          "urls": [],
          "library": "Internal SDK logic",
          "type": "rpc",
          "motivation": "The `Ce` function uses `fetch` to make JSON-RPC requests. This function is called by:\n*   `Gt.prototype.request` with `this.chain.rpcUrl`. This URL is dynamically obtained from the connected SCW configuration via the relay.\n*   `bt.prototype.request` with `this.jsonRpcUrl`. This URL is dynamically obtained via the WalletLink relay connection (`chainUpdated`, `switchEthereumChain` response).\nSince the specific RPC URL is determined dynamically at runtime based on wallet configuration and is not hardcoded in this script, it's listed as empty here per instructions."
        },
        {
          "method": "fetch",
          "urls": [
            "http://rpc.wallet.coinbase.com"
          ],
          "library": "Internal SDK logic",
          "type": "auxiliary",
          "motivation": "The `Kn.prototype.request` method calls the internal `Ce` function with the hardcoded URL `In` (defined as `http://rpc.wallet.coinbase.com`) specifically for the `wallet_getCallsStatus` method."
        },
        {
          "method": "fetch",
          "urls": [],
          "library": "Internal SDK logic",
          "type": "self",
          "motivation": "The `Rn.prototype.checkCrossOriginOpenerPolicy` function uses `fetch` to request the current page (`${window.location.origin}${window.location.pathname}`) with method 'HEAD' to check the 'Cross-Origin-Opener-Policy' header. The URL is dynamic based on the current page."
        },
        {
          "method": "WebSocket",
          "urls": [
            "wss://www.walletlink.org/rpc"
          ],
          "library": "Internal SDK logic",
          "type": "auxiliary",
          "motivation": "The `rn` class establishes a WebSocket connection in its `connect` method. The URL is constructed as `e.replace(/^http/, 'ws')` where `e` is the `linkAPIUrl` passed from the `on` class, which originates from the `H` class's configuration. In the `bt` class (WalletLink Signer), this `linkAPIUrl` is hardcoded as `Ye` (`https://www.walletlink.org`), resulting in the WebSocket URL `wss://www.walletlink.org/rpc`."
        }
      ]
    },
    {
      "file": "assets/socials-BjeHBYNH.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://secure.web3modal.com"
          ],
          "library": "Web3Modal",
          "type": "auxiliary",
          "motivation": "The code implements a `handleSocialConnection` function that listens for `window.postMessage` events originating from `W.SECURE_SITE_ORIGIN` (which resolves to 'https://secure.web3modal.com'). It receives a `resultUri` from this origin and passes it to `this.authConnector.provider.connectSocial(o)`. This strongly suggests that an internal network request, likely using `fetch`, is made by the `connectSocial` method to an endpoint under `https://secure.web3modal.com` to validate the social login result contained in the URI."
        },
        {
          "method": "fetch",
          "urls": [
            "https://pulse.walletconnect.com"
          ],
          "library": "Web3Modal",
          "type": "auxiliary",
          "motivation": "The code makes multiple calls to `d.sendEvent` (imported from Web3Modal's internal utilities) to track user interactions like 'SOCIAL_LOGIN_REQUEST_USER_DATA', 'SOCIAL_LOGIN_SUCCESS', 'SOCIAL_LOGIN_ERROR', and 'SOCIAL_LOGIN_CANCELED'. Analytics/event tracking in Web3Modal/WalletConnect typically uses `fetch` or `navigator.sendBeacon` to send data to WalletConnect's telemetry service, commonly hosted at `pulse.walletconnect.com` or a similar domain."
        }
      ]
    }
  ],
  "libraryUsage": [
    {
      "file": "assets/ccip-DTSuYPnc.js",
      "occurences": [
        {
          "name": "CCIP Read (EIP-3668) Client Logic",
          "motivation": "```markdown\nThe code implements the client-side handling for Ethereum's EIP-3668 CCIP Read (Offchain Data Retrieval). \n\n1.  It defines custom error classes specific to offchain lookup (`OffchainLookupError`, `OffchainLookupResponseMalformedError`, `OffchainLookupSenderMismatchError`).\n2.  It defines and uses the `OffchainLookup` ABI item (`offchainLookupAbiItem`) and signature (`offchainLookupSignature`).\n3.  The `offchainLookup` function (`A`) decodes the `OffchainLookup` revert data, extracts parameters like `sender`, `urls`, `callData`, `callbackFunction`, and `extraData`.\n4.  The `ccipRequest` function (`T`) implements the core logic for iterating through gateway `urls`, making HTTP requests (GET or POST based on URL content) with `{sender}` and `{data}` replacements, and handling responses or errors, exactly as specified by EIP-3668.\n5.  Imports like `k` (abi decoding), `b` (address comparison), `L` (contract interaction/call), `x` (hex check) from `./index-CDjaS65L.js` support this core functionality. \n```"
        }
      ]
    },
    {
      "file": "assets/email-Dh6p1nuS.js",
      "occurences": [
        {
          "name": "LitElement",
          "motivation": "The code imports `LitElement` (as `w`), the `html` tagged template literal (as `u`), the `css` tagged template literal (as `E`), and decorators like `@customElement` (as `d`), `@property` (as `I`), and `@state` (as `m`). Classes like `g`, `f`, `p`, `y`, `b`, `P`, `L`, `R` extend `w` (`LitElement`) and use these features (`render()` method with `u` template, static `styles` property with `E` template, decorators for properties and state)."
        },
        {
          "name": "Web3Modal UI Components",
          "motivation": "The code defines and utilizes various custom HTML elements prefixed with `wui-` (e.g., `wui-flex`, `wui-text`, `wui-link`, `wui-otp`, `wui-input-numeric`, `wui-icon-box`, `wui-button`, `wui-email-input`) and `w3m-` (e.g., `w3m-email-otp-widget`, `w3m-email-verify-device-view`, `w3m-update-email-wallet-view`, `w3m-email-login-view`). These elements are characteristic of the Web3Modal UI library, providing pre-built components for Web3 interactions."
        },
        {
          "name": "Web3Modal SDK Core Logic",
          "motivation": "The code imports and uses various controllers and state management utilities commonly found in the Web3Modal SDK core. Examples include:\n*   `l` (likely `RouterController`): Used for navigation (`l.push`, `l.replace`, `l.goBack`, `l.reset`, `l.state.data`).\n*   `h` (likely `ConnectionController` or `ConnectorController`): Used to get connectors (`h.getAuthConnector()`, `h.state.connectors`, `h.subscribeKey`).\n*   `c` (likely `EventsController`): Used for sending tracking events (`c.sendEvent`).\n*   `v` (likely `SnackController`/`ModalToast`): Used for showing user feedback (`v.showSuccess`, `v.showError`).\n*   `S` (likely `ChainController`): Used to access chain state (`S.state.activeChain`).\n*   `k` (likely `ConnectionController`): Used for connection logic (`k.connectExternal`).\n*   `j` (likely `OptionsController` or `SIWEController`): Used for configuration/state (`j.state.features`, `j.state.siwx`).\n*   `z` (likely `ModalController`): Used for modal actions (`z.close`).\n*   `_` (time utility): Used for time calculations (`_.getTimeToNextEmailLogin`).\n*   `x` (error parsing utility): Used for parsing errors (`x.parseError`).\n*   Accessing specific constants like `B.AUTH_CONNECTOR_SUPPORTED_CHAINS` and `M.CONNECTOR_TYPE_AUTH`.\nThese indicate reliance on the core state management and operational logic of Web3Modal."
        }
      ]
    },
    {
      "file": "assets/hooks.module-CUJGEegb.js",
      "occurences": [
        {
          "name": "Preact",
          "motivation": "The code includes core Preact functions like `createElement` (aliased as `K` and exported), `Component` (defined as `M`), `render` (defined as `N_` and exported), and reconciliation logic (`__`, `E_`, `q_`). It uses Preact's characteristic internal properties like `__k`, `__c`, `__v`, and `__e`. The module `re` explicitly exports Preact components and functions (`Component`, `Fragment`, `createElement`, `render`, etc.)."
        },
        {
          "name": "Preact Hooks",
          "motivation": "The code defines and uses functions corresponding to Preact hooks: `useState` (`M_`), `useEffect` (`G_`), `useRef` (`J_`), `useCallback` (`Q_`), `useContext` (`X_`), `useMemo` (`t_`), `useLayoutEffect` (`L_`), `useReducer` (`F_`), `useImperativeHandle` (`K_`), `useDebugValue` (`Y_`), `useErrorBoundary` (`Z_`), and `useId` (`_e`). These are managed through the `S` function and stored in the `__H` property of component instances. The module `oe` explicitly exports these hooks."
        },
        {
          "name": "clsx",
          "motivation": "The function `o_` implements logic for conditionally joining string arguments, mimicking the behavior of the `clsx` library. This function is explicitly exported as `clsx` and `default` within the frozen object `ne`."
        }
      ]
    },
    {
      "file": "assets/if-defined-CkZ9j8Lh.js",
      "occurences": [
        {
          "name": "Lit",
          "motivation": "The code uses decorators like `@l()` (likely `@property`) and `@ct()` (likely `@state`), template literals tagged with `P` (likely `css` from `lit`) and `S` (likely `html` from `lit-html`), `customElements.define` calls wrapped in helper functions (`I`, `U`), and directives like `classMap` (`at`) and potentially `until` (`tt`) or `ifDefined` (suggested by the filename `if-defined-CkZ9j8Lh.js`). These are core features of the Lit library (which includes LitElement and lit-html)."
        },
        {
          "name": "Web3Modal UI Components / Custom UI Library",
          "motivation": "The code defines and uses custom elements prefixed with `wui-` (e.g., `wui-icon`, `wui-text`, `wui-flex`). This pattern, combined with the web3 context often associated with such prefixes, suggests the use of a dedicated UI component library, possibly `@web3modal/ui` or a similar internal library built upon Lit. The components handle styling (`var(--wui-color-...)`, `var(--wui-spacing-...)`) and SVG icon loading (`b` object maps names to async imports)."
        }
      ]
    },
    {
      "file": "assets/index-Ay3X6zFx.js",
      "occurences": [
        {
          "name": "LitElement",
          "motivation": "```javascript\nimport{Y as de,P as x,a as he,f as ge,r as me,x as j}from\"./index-CDjaS65L.js\";\nimport{n as z,c as we}from\"./if-defined-CkZ9j8Lh.js\";\n...\nlet v=class extends me{\n  constructor(){super(...arguments), ...}\n  render(){ ... return j`...`}\n}\nv.styles=[ge,He];\nU([z()],v.prototype,\"uri\",void 0);\n...\nv=U([we(\"wui-qr-code\")],v);\n```\n*   The code defines a class `v` that `extends me`. Given the context of web components and the import pattern, `me` is highly likely `LitElement` imported from `./index-CDjaS65L.js`.\n*   The class uses decorators (`z` likely corresponds to `@property` and `we` to `@customElement` based on the import from `./if-defined-CkZ9j8Lh.js` and their usage).\n*   It defines a `render()` method returning a template literal tagged with `j` (likely the `html` tag function from `lit-html`).\n*   It defines `static styles` (`v.styles = [ge, He]`). These are all hallmarks of LitElement components."
        },
        {
          "name": "qrcode",
          "motivation": "```javascript\nvar K={},tt,Tt;\n...\nvar et={},k={},Pt;\nfunction $(){ ... k.getSymbolSize=function(n){...} ... }\n...\nvar Q={},Ft;\nfunction ie(){ ... Q.getBlocksCount=function(t,e){...} ... }\n...\nvar zt;\nfunction Ie(){ ... o.generateECPolynomial=function(n){...} ... }\n...\nvar Zt;\nfunction qe(){ ... et.create=function(N,R){...} ... }\n...\nvar Bt={},Rt={},te;\nfunction ae(){ ... o.qrToImageData=function(n,t,e){...} ... }\nvar ee;\nfunction Ue(){ ... o.render=function(e,s,a){...}; o.renderToDataURL=function(e,s,a){...} ... }\nvar At={},ne;\nfunction Fe(){ ... At.render=function(e,s,a){...} ... }\nvar re;\nfunction ke(){ ... K.create=r.create,K.toCanvas=t.bind(null,i.render),K.toDataURL=t.bind(null,i.renderToDataURL),K.toString=t.bind(null,function(e,s,a){return n.render(e,a)}),K }\nvar ze=ke();\nconst $e=de(ze);\n...\n$e.create(o,{errorCorrectionLevel:r}).modules.data\n```\n*   The code includes a large number of functions related to QR code generation internals: `getSymbolSize`, `getBCHDigit`, `getBlocksCount`, `getTotalCodewordsCount`, encoding modes (`NUMERIC`, `ALPHANUMERIC`, `BYTE`, `KANJI`), masking (`applyMask`, `getBestMask`), polynomial generation (`generateECPolynomial`), version calculation (`getBestVersionForData`), etc.\n*   It exposes an API via the `ke()` function (assigned to `ze`) which returns an object `K` with methods `create`, `toCanvas`, `toDataURL`, and `toString`, mirroring the API of the popular `qrcode` library.\n*   The code uses `$e.create` (where `$e` is derived from `ze`) to generate QR code data."
        }
      ]
    },
    {
      "file": "assets/index-B4hnddQ6.js",
      "occurences": [
        {
          "name": "LitElement",
          "motivation": "The code uses decorators (`@u()`, `@d()`), extends a base class (`extends h`), uses tagged template literals for rendering (`e\\`< ... >\\``), and defines custom elements (`d(\"w3m-router\")`), all of which are characteristic features of the LitElement library (or its underlying lit-html and decorators)."
        },
        {
          "name": "Web3Modal",
          "motivation": "The code defines custom elements with the `w3m-` prefix (e.g., `w3m-router`, `w3m-connect-view`, `w3m-account-view`). It manages different views related to wallet connection and interaction (`Connect`, `Account`, `Networks`, `SwitchNetwork`, etc.). It references a shared state object (`l.state.view`) and subscribes to changes (`l.subscribeKey`), which is consistent with the architecture of Web3Modal's UI components."
        }
      ]
    },
    {
      "file": "assets/index-BDdPQKBI.js",
      "occurences": [
        {
          "name": "LitElement/Web Components",
          "motivation": "```javascript\nimport{a as h,f as g,m as p,r as v,x as f}from\"./index-CDjaS65L.js\";\nimport{n as c,c as x}from\"./if-defined-CkZ9j8Lh.js\";\n// ...\nlet o=class extends v{\n  // ...\n}\n// ...\ni([c()],o.prototype,\"size\",void 0);\n// ...\no=i([x(\"wui-icon-box\")],o);\n```\n\nThe code uses patterns typical of LitElement for creating web components:\n- It imports modules (`h`, `g`, `p`, `v`, `f`, `c`, `x`) from local files, which often contain LitElement's core functionalities like `LitElement` base class (`v`), `html` (`f`), `css` (`h`), `@property` decorator (`c`), and `@customElement` decorator (`x`).\n- A class (`o`) extends a base class (`v`).\n- Decorators (`@c`, `@x`) are used to define properties and register the custom element (`wui-icon-box`).\n- Tagged template literals (`h\\`` for CSS, `f\\`` for HTML) are used for rendering."
        }
      ]
    },
    {
      "file": "assets/index-BLWCd6Nq.js",
      "occurences": [
        {
          "name": "Lit",
          "motivation": "The code uses decorators like `@l()` (`@property`) and `@_()` (`@customElement`), extends a base class `k` (likely `LitElement` imported from `./index-CDjaS65L.js`), and uses tagged template literals with `html` (imported as `a`) and `css` (imported as `N`). These are characteristic features of the Lit library."
        },
        {
          "name": "WalletConnect Web3Modal",
          "motivation": "The code imports and uses state management controllers and utility functions commonly found in WalletConnect Web3Modal internal structure. Examples include:\n*   `A.state.activeCaipAddress`, `A.subscribeKey`: Likely `ApiController` for managing connection state.\n*   `p.state.transactionsByYear`, `p.fetchTransactions`, `p.resetTransactions`, `p.subscribe`: Likely a controller for managing and fetching transaction history (possibly `AccountController` or a dedicated `TransactionsController`).\n*   `Y.push`: Likely `RouterController` for navigation.\n*   `V.state`: Likely `OptionsController` or `ConfigCtrl` holding configuration like `projectId`.\n*   `z.sendEvent`: Likely `EventsController` for analytics tracking.\n*   `E.state.preferredAccountType`, `W.ACCOUNT_TYPES`: Likely `AccountController` and constants related to account types.\n*   References to `caipAddress`, `caipNetworkId`, transaction fetching logic, and WalletConnect-specific event tracking (`LOAD_MORE_TRANSACTIONS` with `projectId`) strongly point to Web3Modal."
        }
      ]
    },
    {
      "file": "assets/index-BXiJ_fQB.js",
      "occurences": [
        {
          "name": "@coinbase/wallet-sdk",
          "motivation": "```javascript\n// Presence of classes like WalletLinkRelay, WalletLinkConnection, WalletLinkHTTP, WalletLinkWebSocket\nlet r = class Ut extends h.RelayAbstract { ... }; // WalletLinkRelay\nconst m = new o.WalletLinkConnection({session: a, linkAPIUrl: l, ...}); // WalletLinkConnection\nthis.http = new i.WalletLinkHTTP(l, a.id, a.key); // WalletLinkHTTP\nconst v = new o.WalletLinkWebSocket(`${l}/rpc`, w); // WalletLinkWebSocket\n\n// Use of specific constants and storage keys\nconst r = wh(); // Imports { LINK_API_URL: \"https://www.walletlink.org\" }\nconst s = \"DefaultChainId\", m = \"DefaultJsonRpcUrl\";\nthis._storage.getItem(o.LOCAL_STORAGE_ADDRESSES_KEY); // Uses 'Addresses' key\nthis._storage.setItem(\"version\", uh.VERSION); // Uses SDK version\n```\n- The code defines and uses classes specific to the Coinbase Wallet SDK (formerly WalletLink), such as `WalletLinkRelay`, `WalletLinkConnection`, `WalletLinkHTTP`, and `WalletLinkWebSocket`.\n- It imports and uses the `LINK_API_URL` constant (`https://www.walletlink.org`).\n- It interacts with local storage using keys characteristic of the SDK (`Addresses`, `DefaultChainId`, `DefaultJsonRpcUrl`).\n- The overall structure for managing sessions (`Session` class), encryption (`Cipher` class), and relaying messages matches the SDK's architecture."
        },
        {
          "name": "Preact",
          "motivation": "```javascript\nimport { p as fh, a as dh, h as ph } from \"./hooks.module-CUJGEegb.js\";\nconst We = Hr(fh); // fh seems to be preact itself\nconst _n = Hr(ph); // ph is likely preact/hooks\n// ...later...\n(0, n.h)(\"div\", { class: (0, r.default)(\"-cbwsdk-connect-dialog-container\", a && \"-cbwsdk-connect-dialog-container-hidden\") }, ...); // Uses the imported 'h' function (aliased) for rendering\n```\n- Imports `h as ph` from a file named `hooks.module-CUJGEegb.js`. `h` is the standard function name for element creation in Preact.\n- The code extensively uses this imported `h` function (often aliased, e.g., as `n` which references `We` which imports `ph`) to create UI elements, which is the core pattern of Preact rendering."
        },
        {
          "name": "Buffer",
          "motivation": "```javascript\n// Function mn() contains the buffer polyfill code\nfunction mn() {\n  // ... standard buffer polyfill setup ...\n  e.Buffer = c;\n  e.SlowBuffer = R;\n  // ... buffer methods like alloc, from, isBuffer, compare, concat, etc. ...\n}\nconst Buffer = $s.Buffer; // $s is likely the imported 'Bn' module from mn()\nBuffer.isBuffer(C); // Usage\nBuffer.from(M, \"hex\"); // Usage\n```\n- The code includes a complete polyfill for the Node.js `Buffer` module, visible within the `mn()` function which defines `Buffer`, `SlowBuffer`, and associated methods.\n- It references internal dependencies like `gh()` (base64-js) and `mh()` (ieee754)."
        },
        {
          "name": "bn.js",
          "motivation": "```javascript\n// Function yn() contains the bn.js code\nfunction yn() {\n  // ... standard bn.js setup ...\n  function i(F, f, E) { /* BN constructor */ }\n  i.BN = i;\n  i.prototype._init = function (f, E, C) { ... };\n  i.prototype.add = function (f) { ... };\n  // ... other BN methods ...\n}\nconst r = e(yn()); // yn returns the bn.js module\nnew r.default(C).toString(16); // Usage\nr.default.isBN(C); // Usage\n```\n- The code contains a bundled version of `bn.js` within the `yn()` function.\n- It defines the `BN` class and its associated methods for arbitrary-precision integer arithmetic (e.g., `add`, `sub`, `mul`, `divmod`, `toString`, `toNumber`).\n- Instances are created using `new r.default(...)` where `r` is the imported module."
        },
        {
          "name": "@metamask/json-rpc-errors",
          "motivation": "```javascript\n// Function vn() imports error-related modules\nconst r = wn(); // Imports error codes (Et)\nconst n = bh(); // Imports standard error factories (lr)\nconst t = _h(); // Imports serializeError (hr)\nconst h = Us(); // Imports error utilities (On)\n// ... exports these functions ...\n// Usage within the codebase:\nconst t = vn();\nthrow t.standardErrors.provider.unauthorized({});\nt.serializeError(S, u);\n```\n- The code imports and utilizes standard error codes (`standardErrorCodes`), error factories (`standardErrors`), and serialization functions (`serializeError`) from modules (`wn`, `bh`, `_h`, `Us`) whose structure matches the `@metamask/json-rpc-errors` package."
        },
        {
          "name": "@metamask/safe-event-emitter",
          "motivation": "```javascript\n// Function Qd() returns 'un' which wraps the event emitter\nconst e = gn(); // gn() likely returns the raw EventEmitter\nclass t extends e.EventEmitter { /* Implementation */ }\n// ...\n// Provider class extends EventEmitter\nlet w = class extends n.EventEmitter { ... } // n is aliased EventEmitter\n```\n- The code defines a class (`t` in `Qd`) that extends a base `EventEmitter` (imported via `gn()`).\n- The main provider class (`w` in `js()`) also extends this `EventEmitter`.\n- This pattern, especially within a MetaMask-related ecosystem context (given other metamask libraries), often corresponds to `@metamask/safe-event-emitter`."
        },
        {
          "name": "@metamask/json-rpc-engine",
          "motivation": "```javascript\n// Function Bl() defines the engine\nlet t = class it extends r.default { // r.default is the SafeEventEmitter\n  constructor() { super(), this._middleware = []; }\n  push(o) { this._middleware.push(o); }\n  handle(o, c) { /* ... */ }\n  asMiddleware() { /* ... */ }\n  static async _runAllMiddleware(o, c, p) { /* ... */ }\n  static _runMiddleware(o, c, p, d) { /* ... */ }\n}\nqt.JsonRpcEngine = t;\n```\n- The code defines a `JsonRpcEngine` class (`it` in `Bl()`) that extends `SafeEventEmitter`.\n- It implements the core engine logic with methods like `push` (for adding middleware), `handle` (for processing requests), `asMiddleware`, and internal static methods (`_runAllMiddleware`, `_runMiddleware`) for executing the middleware stack. This matches the `@metamask/json-rpc-engine` API and structure."
        },
        {
          "name": "eth-block-tracker",
          "motivation": "```javascript\n// Function Vd() defines PollingBlockTracker\nlet p = class extends t.BaseBlockTracker { /* ... polling logic ... */ }\nNt.PollingBlockTracker = p;\n// Function zd() defines SubscribeBlockTracker\nlet h = class extends n.BaseBlockTracker { /* ... subscription logic ... */ }\nFt.SubscribeBlockTracker = h;\n// Usage in m0()\nfunction p({ blockTracker: s, provider: m }) {\n  // ... uses blockTracker.on('sync', ...) ...\n}\n```\n- The code defines `PollingBlockTracker` and `SubscribeBlockTracker` classes extending a `BaseBlockTracker`.\n- These classes implement logic for fetching or subscribing to new blocks, matching the functionality of `eth-block-tracker`."
        },
        {
          "name": "qrcode-svg",
          "motivation": "```javascript\n// Function Oh() contains the qrcode-svg code\nfunction l(s) { /* constructor */ }\nl.prototype.svg = function(s) { /* SVG generation logic */ };\nVn = l;\n// Usage in Fh()\nconst g = new t.default({ /* options */ }); // t.default is the QRCode class\nconst a = Buffer.from(g.svg(), \"utf8\").toString(\"base64\");\nc(`data:image/svg+xml;base64,${a}`);\n```\n- The code includes a QR code generation library within the `Oh()` function.\n- The structure with a constructor taking options (`content`, `padding`, `width`, `color`, `background`, `ecl`) and a `svg()` method matches the `qrcode-svg` library."
        },
        {
          "name": "semver",
          "motivation": "```javascript\n// Function $d() aggregates semver functions\nconst n = Ue(); // SemVer class\nconst h = sr(); // parse function\nconst i = yd(); // valid function\n// ... imports for inc, diff, compare, satisfies, gt, lt, etc. ...\nbs = { parse: h, valid: i, inc: c, diff: p, major: d, /* ... */ };\n// Usage, e.g. in Ud()\nconst r = $d();\n(0, r.valid)(a) === null; // Checks validity\n(0, r.gt)(a, l); // Compares versions\n(0, r.satisfies)(a, l, { includePrerelease: !0 }); // Checks range satisfaction\n```\n- The code bundles the `semver` library, evident from the presence of the `SemVer` class and functions like `parse`, `valid`, `inc`, `compare`, `satisfies`, `gt`, `lt`, `major`, `minor`, `patch`, etc., aggregated in the `$d()` function."
        },
        {
          "name": "hash.js / crypto libraries",
          "motivation": "```javascript\n// Function kh() acts as a factory for hash algorithms\ne.sha = Rh(); // SHA1\ne.sha1 = Sh(); // SHA1 variant?\ne.sha224 = Ch(); // SHA224\ne.sha256 = Qu(); // SHA256\ne.sha384 = Mh(); // SHA384\ne.sha512 = Yu(); // SHA512\n// Individual hash implementations (e.g., Qu() for SHA256)\nfunction i() { // SHA256 constructor\n  this.init(), this._w = h, r.call(this, 64, 56);\n}\ni.prototype._update = function(l) { /* SHA256 update logic */ };\ni.prototype._hash = function() { /* SHA256 finalization logic */ };\n```\n- The code includes implementations for various SHA hashing algorithms (SHA1, SHA224, SHA256, SHA384, SHA512) within functions like `Rh`, `Sh`, `Ch`, `Qu`, `Yu`, `Mh`.\n- The `kh()` function acts as a factory, returning instances of these hashers based on the algorithm name.\n- This pattern is common in libraries like `hash.js` or when bundling standard crypto primitives."
        },
        {
          "name": "keccak / @noble/hashes",
          "motivation": "```javascript\n// Function ff() returns a Keccak factory\ndi = uf()(hf()); // uf wraps hf (Keccak state)\n// Function hf() defines the Keccak state machine\nfunction r() { /* Keccak state constructor */ }\nr.prototype.initialize = function(n, t) { /* ... */ };\nr.prototype.absorb = function(n) { /* ... */ };\nr.prototype.squeeze = function(n) { /* ... */ };\n// Function lf() defines the p1600 permutation\nhi.p1600 = function(r) { /* Keccak permutation logic */ };\n// Usage in gl()\ne(\"keccak\" + l).update(a).digest();\n```\n- The code contains a full implementation of the Keccak algorithm, including the state management (`hf()`) and the `p1600` permutation (`lf()`).\n- The `ff()` function provides a factory (`create`) to get Keccak hash instances (e.g., `keccak256`).\n- This is characteristic of libraries specifically providing Keccak/SHA3 hashing, such as the `keccak` package or `@noble/hashes/sha3`."
        },
        {
          "name": "superstruct",
          "motivation": "```javascript\n// Module 'td' contains superstruct definitions\nconst Wt = Hr(td);\n// 'td' defines Struct, StructError, and validation functions\nclass De { /* Struct class definition */ }\nfunction wl(e, r, n) { /* assert function */ }\nfunction zr(e) { /* type function (for objects) */ }\nfunction El() { /* string function */ }\n// Usage example from ot()\n(0, e.assert)(d, \"Assertion failed.\");\n(0, e.assertStruct)(T, e.JsonRpcSuccessStruct, \"Invalid JSON-RPC success response\", q);\n```\n- The code imports a module (`td` aliased via `Wt`) that defines a `Struct` class (`De`), a `StructError` class (`yl`), and numerous utility functions (`assert`, `create`, `is`, `validate`, `object`, `string`, `number`, `refine`, etc.) for data validation.\n- This API directly matches the `superstruct` library."
        },
        {
          "name": "tslib",
          "motivation": "```javascript\n// Module 'lo' imports from 's0'\nconst lo = Hr(s0);\n// 's0' contains tslib helpers\nconst i0 = {\n  __extends: Pl,\n  __assign: dn,\n  __awaiter: Wl,\n  __generator: Vl,\n  // ... other helpers ...\n};\n```\n- The code imports and uses helper functions like `__extends`, `__assign`, `__awaiter`, `__generator`, etc., which are standard utilities provided by `tslib` to support TypeScript features in compiled JavaScript."
        }
      ]
    },
    {
      "file": "assets/index-Bu7zPpHj.js",
      "occurences": [
        {
          "name": "Lit",
          "motivation": "The code uses `LitElement` (imported as `f`), the `html` tag function (imported as `u`), the `css` tag function (imported as `b`), decorators like `@i()` (imported as `property`) and `@m()` (imported as `customElement`), and the `ref` directive (imported as `B`). These are all core features of the Lit library for building web components."
        },
        {
          "name": "Web3Modal UI Toolkit (WUI)",
          "motivation": "The code defines a custom element named `wui-button` and uses various CSS custom properties prefixed with `--wui-` (e.g., `--wui-spacing-l`, `--wui-color-accent-100`, `--wui-border-radius-m`). It also references other WUI components like `<wui-text>` and `<wui-loading-spinner>`. This indicates the use of the Web3Modal UI toolkit."
        }
      ]
    },
    {
      "file": "assets/index-CDjaS65L.js",
      "occurences": [
        {
          "name": "lit-element / lit",
          "motivation": "The code uses constructs like `class extends HTMLElement`, `static finalizeStyles`, `createRenderRoot`, `adoptedStyleSheets`, `requestUpdate`, `performUpdate`, `render`, `html`, and `css` tagged template literals, which are characteristic of the Lit library for building web components.\n```javascript\nlet Fo=class extends HTMLElement{\n  // ...\n  createRenderRoot(){\n    const e=this.shadowRoot??this.attachShadow(this.constructor.shadowRootOptions);\n    return WH(e,this.constructor.elementStyles),e\n  }\n  // ...\n}\nclass Md extends Fo{\n  // ...\n  update(e){\n    const r=this.render();\n    // ...\n    super.update(e),\n    this._$Do=aW(r,this.renderRoot,this.renderOptions)\n  }\n  // ...\n  render(){return ba}\n}\nconst cn=t=>new $C(typeof t==\"string\"?t:t+\"\",void 0,Im),ea=(t,...e)=>{ ... };\n```"
        },
        {
          "name": "@walletconnect/universal-provider",
          "motivation": "The code includes classes and constants typical of the WalletConnect v2 Universal Provider setup (`pA=\"wc\"`, `gA=2`, `mA=\"client\"`, references to `relayer`, `pairing`, `session`, `proposal`, etc.). It also uses WalletConnect-specific URLs like `rpc.walletconnect.org` and `relay.walletconnect.org`.\n```javascript\nconst pA=\"wc\",gA=2,mA=\"client\";\n// ...\nlet rM=class bA extends q5{\n  constructor(e){\n    super(e)\n    // ...\n    this.core=(e==null?void 0:e.core)||new ND(e)\n    // ...\n    this.engine=new HD(this)\n    // ...\n  }\n  // ...\n}\n// ...\nconst tA=\"wss://relay.walletconnect.org\"\n```"
        },
        {
          "name": "pino (or pino-browser)",
          "motivation": "The code imports and uses a logging library that resembles Pino's API and structure (`Bo=d5()`, `bu=wl(Bo)`). It defines log levels (`Bo.levels`) and uses a browser-specific configuration (`x.browser`).\n```javascript\nvar Bo=d5();\nconst bu=wl(Bo),l5={level:\"info\"}\n// ...\nreturn{\n  logger:bu(jd(Fd({},t.opts),{level:\"trace\",browser:jd(Fd({},(r=t.opts)==null?void 0:r.browser),{write:s=>n.write(s)})})),\n  chunkLoggerController:n\n}\n```"
        },
        {
          "name": "@noble/hashes / @noble/curves / @noble/secp256k1",
          "motivation": "The code includes implementations and constants directly related to SHA256 (`Rx extends Tx`), SHA512 (`v extends g`), SHA3/Keccak (`Ag extends Eg`), Ed25519 (`u2=GI(t8)`), secp256k1 (`dU`), and HMAC, matching the patterns and algorithms provided by the Noble crypto libraries.\n```javascript\nconst AI=Y5(()=>new EI); // sha512\nclass Rx extends Tx{ ... } // sha256\nconst X2=K2(()=>new Rx); // sha256\nconst Cg=yx(1,136,256/8); // keccak256\nconst t8={...,hash:AI,...},u2=GI(t8); // ed25519\nasync function dU({hash:t,signature:e}){ ... const{secp256k1:n}=await jr(...) ... } // secp256k1\n```"
        },
        {
          "name": "zod",
          "motivation": "The code defines and uses schema validation objects with a structure (`B.object`, `B.string`, `.optional()`, `.parse()`) that is characteristic of the Zod library.\n```javascript\nconst yt=B.object({message:B.string()});\nfunction te(t){return B.literal(ae[t])}\n// ...\nconst nc={appEvent:re.extend({type:te(\"APP_SWITCH_NETWORK\"),payload:Aq})... };\n// ...\nnc.frameEvent.parse(i)\n```"
        },
        {
          "name": "big.js",
          "motivation": "The code explicitly imports and uses `big.js` for handling large numbers, particularly evident in the `qe.bigNumber` and related math operations.\n```javascript\nvar Ua=qv(); // big.js setup\nconst qe={bigNumber(t){return t?new Ua(t):new Ua(0)},multiply(t,e){if(t===void 0||e===void 0)return new Ua(0);const r=new Ua(t),n=new Ua(e);return r.times(n)},...};\n```"
        },
        {
          "name": "viem / abitype",
          "motivation": "The code includes numerous functions and error classes related to ABI encoding/decoding, contract interaction, and Ethereum utilities (`kn`, `ho`, `Oa`, `ql`, `ai`, `As`, `mr`, `Fl`, `dr`, `Pu`, `Qd`, `JA`, `E0`, etc.) that strongly resemble the APIs and patterns found in the `viem` and `abitype` libraries.\n```javascript\nfunction kn(t){ ... }\nfunction ho(t){ ... }\nfunction Oa(t,e){ ... }\nfunction ql(t,e){ ... }\nasync function es(t,e){ ... }\nasync function tf(t,e){ ... }\nclass Qd extends H{ ... } // AbiFunctionNotFoundError\nclass JA extends H{ ... } // ContractFunctionExecutionError\nclass E0 extends H{ ... } // ContractFunctionRevertedError\n```"
        },
        {
          "name": "wagmi",
          "motivation": "The code contains classes and functions (`rG extends HC`, `pV`) that interact with connectors, manage wallet connections, and handle chain state in a way typical of the Wagmi library, often used alongside Viem.\n```javascript\nclass rG extends HC{ // HC likely refers to a Wagmi internal or related class\n  constructor(e){\n    // ...\n    this.adapterType=\"wagmi\"\n    // ...\n    this.createConfig({...e,networks:r})\n    // ...\n  }\n  // ...\n  createConfig(e){\n    // ...\n    this.wagmiConfig=pV({...e,chains:this.wagmiChains,connectors:n,transports:r})\n  }\n  // ...\n}\n```"
        },
        {
          "name": "@walletconnect/keyvaluestorage / idb-keyval / unstorage",
          "motivation": "The code uses a storage abstraction layer (`c5`, `r5`, `s5`) that explicitly mentions IndexedDB (`e5=\"WALLET_CONNECT_V2_INDEXED_DB\"`) and uses `idb-keyval` (`X6`) functions (`ab`, `W6`, `V6`, `G6`, `Y6`) likely via `@walletconnect/keyvaluestorage` or `unstorage`.\n```javascript\nconst e5=\"WALLET_CONNECT_V2_INDEXED_DB\",t5=\"keyvaluestorage\";\nlet r5=class{ ... this.indexedDb=H6({driver:X6({dbName:e5,storeName:t5})}) ... };\n// ...\nfunction Yv(t,e){const r=indexedDB.open(t); ... }\nfunction ab(t,e=mu()){return e(\"readonly\",r=>ao(r.get(t)))}\n```"
        },
        {
          "name": "events",
          "motivation": "The code imports and uses the Node.js `EventEmitter` class or a polyfill for it.\n```javascript\nvar Vu={exports:{}},Gm;\nfunction Y_(){ ... Vu.exports=i,Vu.exports.once=C,i.EventEmitter=i, ... }\nvar pn=Y_();\nconst dg=wl(pn);\n// ...\nthis.events=new pn.EventEmitter\n```"
        },
        {
          "name": "destr",
          "motivation": "The code includes the `destr` function for safely parsing JSON strings, guarding against prototype pollution.\n```javascript\nfunction Gu(t,e={}){ ... try{ ... return JSON.parse(t,P6) ... }catch(n){ ... } ... }\n```"
        },
        {
          "name": "cross-fetch",
          "motivation": "The code imports a `fetch` implementation/polyfill, likely `cross-fetch` or `node-fetch` for universal environments.\n```javascript\nvar od={exports:{}},Zw;\nfunction nM(){ ... function A(w,E){return new Promise( ... var S=new k(w,E); ... var b=new XMLHttpRequest; ... b.send(typeof S._bodyInit>\"u\"?null:S._bodyInit)})} ... }\nvar sM=nM();\nconst Jw=wl(sM);\n// ...\nconst e=await Jw(...t);\n```"
        },
        {
          "name": "tslib",
          "motivation": "The code imports helper functions (`__awaiter`, `__generator`, `__rest`, etc.) commonly generated by the TypeScript compiler and included via the `tslib` library.\n```javascript\nconst g6=Object.freeze(Object.defineProperty({__proto__:null,get __assign(){return Tp},__awaiter:t6,__generator:r6,...},Symbol.toStringTag,{value:\"Module\"})),Al=ug(g6);\n```"
        },
        {
          "name": "@web3modal/email-provider / AuthProvider",
          "motivation": "The code includes a class (`qH`/`Xo`) specifically designed to interact with an iframe (`jH`) handling email and social logins, managing session tokens, and communicating via `postMessage`. This pattern is characteristic of Web3Modal's email/auth provider.\n```javascript\nclass jH{ ... constructor({projectId:e,isAppClient:r=!1,chainId:n=\"eip155:1\",enableLogger:s=!0}){ ... this.iframe=i ... } ... }\nclass qH{ ... constructor({projectId:e,chainId:r,enableLogger:n=!0,onTimeout:s}){ ... this.w3mFrame=new jH({projectId:e,isAppClient:!0,chainId:r,enableLogger:n}) ... } ... }\nclass Xo{ ... static getInstance({projectId:e,chainId:r,enableLogger:n,onTimeout:s}){return Xo.instance||(Xo.instance=new qH({projectId:e,chainId:r,enableLogger:n,onTimeout:s})),Xo.instance} ... }\n```"
        }
      ]
    },
    {
      "file": "assets/index-CJOO1DHD.js",
      "occurences": [
        {
          "name": "Lit",
          "motivation": "The code uses imports like `import { a as v, f as b, m as f, L as m, r as g, x as h } from \"./index-CDjaS65L.js\";` and `import { n as l, c as w } from \"./if-defined-CkZ9j8Lh.js\";`. The usage of decorators (`@l()`, `@w()`), template literals tagged with `h` (likely `html`) and `v` (likely `css`), and class extension (`class extends g`, where `g` is likely `LitElement`) are characteristic patterns of the Lit library for building web components."
        },
        {
          "name": "Web3Modal UI (wui)",
          "motivation": "The code defines custom elements prefixed with `wui-` (e.g., `wui-icon-link`, `wui-tag`, and references `wui-icon`, `wui-text`). It also uses CSS variables prefixed with `--wui-` (e.g., `--wui-color-fg-100`, `--wui-spacing-s`, `--wui-border-radius-xs`). This indicates the use of a specific UI component library, likely associated with Web3Modal, built on top of Lit."
        }
      ]
    },
    {
      "file": "assets/index-Cvn1YXm2.js",
      "occurences": [
        {
          "name": "Lit",
          "motivation": "The code imports several functions (`le` likely `css`, `he` likely `resetStyles`, `fe` likely `LitElement`, `me` likely `html`) from a bundled file (`./index-CDjaS65L.js`). A class `te` extends `fe` (`class extends fe`), which is the standard way to create Lit components. The `@customElement` decorator pattern is also suggested by the call `Ue([de(\"wui-transaction-list-item-loader\")], te);` where `de` is likely the decorator function and `wui-transaction-list-item-loader` is the custom element tag name."
        },
        {
          "name": "Day.js",
          "motivation": "The code includes a large block that defines date/time constants, parsing logic, formatting rules (`W=/.../g`), locale handling (`B={name:\"en\", ...}`), and the core Day.js object structure (`z=function(){function u(t){...}}`). This code is assigned to `ye` via `ge()` and then processed and assigned to `H` (`const H = ee(ye);`). Later, plugins are explicitly added using `H.extend(_e); H.extend(Le);` where `_e` and `Le` correspond to the relativeTime and updateLocale plugins, respectively, which were also included via similar wrapped structures. The code also defines and uses a custom locale (`H.locale(\"en-web3-modal\", Fe);`). Day.js functions like `H(e).locale(...).fromNow()` and `H(e).format()` are used in the `ae` object."
        }
      ]
    },
    {
      "file": "assets/index-DJzGXEZ6.js",
      "occurences": [
        {
          "name": "lit",
          "motivation": "The code extends `LitElement` (imported as `p`), uses `html` template literals (imported as `u`), `css` template literals (imported as `v`), and decorators (`@t`, `@w`) for defining custom elements and their properties. These are characteristic features of the Lit library."
        },
        {
          "name": "WalletConnect Web3Modal UI",
          "motivation": "The code defines a custom element named `wui-chip` (`@w(\"wui-chip\")`). The `wui-` prefix is commonly used by WalletConnect's Web3Modal UI library components. It also imports styles and utilities from relative paths (`./index-CDjaS65L.js`, `./if-defined-CkZ9j8Lh.js`) which are likely part of the larger Web3Modal library structure. A constant `S = {URLS: {FAQ: \"https://walletconnect.com/faq\"}}` is defined, referencing a WalletConnect URL."
        }
      ]
    },
    {
      "file": "assets/index-FXfGfrzZ.js",
      "occurences": [
        {
          "name": "Coinbase Wallet SDK",
          "motivation": "```javascript\nconst { createCoinbaseWalletSDK } = await k(async () => {\n  const { createCoinbaseWalletSDK: e } = await import(\"./index-oZefQTvi.js\");\n  return { createCoinbaseWalletSDK: e };\n}, __vite__mapDeps([0, 1, 2, 3]));\nb = c({ ...r, appChainIds: d.chains.map(e => e.id), preference: t }).getProvider();\n```\nand\n```javascript\nconst { default: u } = await k(async () => {\n  const { default: a } = await import(\"./index-BXiJ_fQB.js\").then(p => p.i);\n  return { default: a };\n}, __vite__mapDeps([4, 1, 2, 3]));\nf = new e({ ...r, reloadOnDisconnect: !1 });\nw = f.makeWeb3Provider(h, l);\n```\nThese sections explicitly import and instantiate components related to the Coinbase Wallet SDK (`createCoinbaseWalletSDK`, `makeWeb3Provider`) to establish a connection and interact with the Coinbase Wallet."
        },
        {
          "name": "Wallet Connector Core/Utils",
          "motivation": "```javascript\nimport { c as x, g as v, S as _, C as A, n as U, U as y, _ as k } from \"./index-CDjaS65L.js\";\nimport { i as K } from \"./index-CDjaS65L.js\";\n```\nThe code imports numerous functions (`x`, `v`, `_`, `A`, `U`, `y`, `k`, `K`) from a shared module (`./index-CDjaS65L.js`). These functions handle tasks common in dApp development like configuration (`x`), address formatting (`v`), error handling (`_`, `A`, `y`), chain ID formatting (`U`), dynamic imports (`k`), and exporting connector types (`K` aliased as `injected`). This indicates a core utility library or framework (potentially related to Wagmi or Viem) providing foundational elements for wallet interactions."
        }
      ]
    },
    {
      "file": "assets/index-oZefQTvi.js",
      "occurences": [
        {
          "name": "noble-hashes",
          "motivation": "The code imports hashing functions like `keccak_256` directly from `./index-CDjaS65L.js`, which itself seems to bundle or re-export parts of noble-hashes (specifically, the `sha3` module is referenced by internal variable names like `Jt` which calls functions from `O` which imports from `Vt` and `Yt`, matching noble-hashes structure). The internal logic uses `keccak_256` extensively, for example in `ft()` which wraps `@ethereumjs/util`'s keccak."
        },
        {
          "name": "@ethereumjs/util",
          "motivation": "The code imports utility functions commonly found in this library, aliased as `ft`. Functions like `keccak`, `toBuffer`, `bufferToHex`, `setLengthRight`, `zeros` are used throughout the codebase, particularly within the EIP-712 logic (`Zt`) and general Ethereum data handling."
        },
        {
          "name": "eth-sig-util",
          "motivation": "The code imports EIP-712 signing utilities, aliased as `Qt` and used within the `Zt` module (`TypedDataUtils`). Functions like `hashStruct`, `hashType`, and legacy/v3/v4 hashing logic (`hashForSignTypedDataLegacy`, etc.) are present, characteristic of `eth-sig-util`."
        },
        {
          "name": "Rendering Framework (Preact/React-like)",
          "motivation": "The code uses JSX-like syntax via a function `R` (likely `createElement` or `h`) and utility functions `we` (likely `render`) and `ee` (for class names) imported from `./hooks.module-CUJGEegb.js`. This pattern is used to define and render UI components like `wt`, `bn`, `vn` for displaying popups and snackbars (`mn`, `kn`)."
        }
      ]
    },
    {
      "file": "assets/socials-BjeHBYNH.js",
      "occurences": [
        {
          "name": "Lit",
          "motivation": "The code uses `P` (likely LitElement based on `extends P`), template literals tagged with `E` and `c` (`E\\`...\\``, `c\\`...\\``), decorator syntax (`@D()`, `@l()`, `@_()`), and defines custom elements like `<wui-flex>`, `<w3m-social-login-list>`, etc., which are characteristic patterns of the Lit library for building web components."
        },
        {
          "name": "Web3Modal",
          "motivation": "The code imports and uses state management (`S.state`, `x.state`, `g.state`, `u.state`, `O.state`, `y.state`, `k.state`), actions (`S.subscribeKey`, `x.subscribeKey`, `u.subscribe`, `g.goBack`, `C.showError`, `C.showSuccess`, `j`, `T.connectExternal`, `L.setConnectedSocialProvider`, `d.sendEvent`, `k.close`), and components (`w3m-social-login-list`, `w3m-connect-socials-view`, `w3m-connecting-social-view`, `w3m-connecting-farcaster-view`, `wui-list-social`, `wui-logo`, etc.) that are specific to the Web3Modal SDK ecosystem. It references concepts like connectors (`S.state.connectors`, `authConnector`), social providers (`u.state.socialProvider`), and WalletConnect URIs (`u.state.farcasterUrl`). The constant `W.SECURE_SITE_ORIGIN` ('https://secure.web3modal.com') is also used."
        }
      ]
    }
  ],
  "urls": [],
  "ethereum": [
    {
      "file": "assets/index-BXiJ_fQB.js",
      "occurences": [
        {
          "count": 1
        }
      ]
    },
    {
      "file": "assets/index-CDjaS65L.js",
      "occurences": [
        {
          "count": 15
        }
      ]
    }
  ],
  "fallbacks": []
}