{
  "version": 2,
  "contentHash": "bafybeiayccyc3lqb2nqhwo2mr6mqkoesjn2gl2wmvcyw5gv6r6ztrnpfz4",
  "timestamp": 1749566355,
  "blockNumber": 22674768,
  "rootMimeType": "inode/directory",
  "totalSize": 15580170,
  "favicon": "favicon.ico",
  "title": "seedit",
  "distributionPurity": {
    "externalScripts": [],
    "externalMedia": []
  },
  "networkingPurity": [
    {
      "file": "assets/index-DMA1ihMt.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://ipfsgateway.xyz",
            "https://gateway.plebpubsub.xyz",
            "https://gateway.forumindex.com"
          ],
          "library": "Plebbit-JS",
          "type": "auxiliary",
          "motivation": "These URLs are from `defaultIpfsGatewayUrls` and are used as base URLs for fetching IPFS content via `_fetchWithLimit` which wraps `nativeFunctions.fetch`. Paths like `/ipfs/CID` or `/ipns/IPNS_NAME` are appended to these base URLs."
        },
        {
          "method": "fetch",
          "urls": [
            "https://pubsubprovider.xyz/api/v0",
            "https://plebpubsub.xyz/api/v0"
          ],
          "library": "kubo-rpc-client",
          "type": "auxiliary",
          "motivation": "These URLs are from `defaultPubsubKuboRpcClientsOptions` and are used with `createKuboRpcClient` (which implies HTTP communication, likely via fetch) for IPFS pubsub functionality."
        },
        {
          "method": "fetch",
          "urls": [
            "https://peers.pleb.bot",
            "https://routing.lol",
            "https://peers.forumindex.com",
            "https://peers.plebpubsub.xyz"
          ],
          "library": "Plebbit-JS",
          "type": "auxiliary",
          "motivation": "These URLs are from `defaultHttpRoutersOptions` and are likely used for IPFS peer routing or DHT interaction via `_fetchWithLimit` (wrapping `nativeFunctions.fetch`)."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.avax.network/ext/bc/C/rpc",
            "https://polygon-rpc.com",
            "https://solana.api.onfinality.io/public",
            "https://solrpc.xyz"
          ],
          "library": "Plebbit-JS (or web3.js for Solana URLs)",
          "type": "rpc",
          "motivation": "These URLs are explicitly defined in `defaultChainProviders` for Avalanche, Polygon, and Solana respectively. They are Ethereum RPC endpoints or similar. For Solana, if 'web3.js' is chosen from the `urls` array in `ChainProviderSchema`, then web3.js makes the call; otherwise, a direct HTTP call is made by Plebbit-JS."
        },
        {
          "method": "WebSocket",
          "urls": [
            "ws(s)://<user-configured-plebbit-rpc>"
          ],
          "library": "Plebbit-JS",
          "type": "auxiliary",
          "motivation": "The code uses `this._websocketServerUrl` in `PlebbitRpcClient`, which is populated from `plebbitRpcClientsOptions` defined by `PlebbitUserOptionsSchema`. The schema for these URLs (`RpcUrlSchema`) specifies a string starting with `ws://` or `wss://`. Since no specific default URL is hardcoded, a placeholder indicating a user-configured WebSocket URL for Plebbit RPC communication is the best guess."
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.abeychain.com",
            "https://api.mainnet.abs.xyz",
            "https://rpc.ankr.com/eth",
            "https://mainnet.base.org",
            "https://rpc.merlinchain.io",
            "https://rpc.scroll.io",
            "https://mainnet.optimism.io",
            "https://rpc.zora.energy",
            "https://mainnet.era.zksync.io",
            "https://eth.merkle.io"
          ],
          "library": "viem",
          "type": "rpc",
          "motivation": "The code defines numerous chains using `defineChain`, each specifying `rpcUrls` with `http` endpoints. `viem`, which is identified as a core library, uses `fetch` for its HTTP transport to interact with these RPC URLs. The `FetchRequest` class and the `fetch(re.url, ce)` call within `createGetUrl` (used by `viem`'s HTTP transport) confirm this. The listed URLs are examples from the extensive chain definitions within the codebase."
        },
        {
          "method": "WebSocket",
          "urls": [
            "wss://api.mainnet.abs.xyz/ws",
            "wss://rpc.linea.build",
            "wss://mainnet.era.zksync.io/ws",
            "wss://rpc.zora.energy",
            "wss://ws.mainnet.fluence.dev"
          ],
          "library": "viem",
          "type": "rpc",
          "motivation": "The code includes a `webSocket(te, ee={})` function, part of `viem`'s transport layer, which establishes WebSocket connections. This function takes a URL (`te`) or derives it from `chain.rpcUrls.default.webSocket[0]`. Additionally, methods like `te.transport.subscribe({params:[\"newHeads\", ...]})` and `te.transport.subscribe({params:[\"logs\", ...]})` utilize WebSocket subscriptions for real-time updates. The listed URLs are examples from WebSocket endpoints defined in chain configurations within the code."
        }
      ]
    },
    {
      "file": "assets/native-B8WyFf_Z.js",
      "occurences": [
        {
          "method": "WebSocket",
          "urls": [],
          "library": "native",
          "type": "auxiliary",
          "motivation": "The code defines a utility function `e` that searches for and returns the `WebSocket` constructor from standard JavaScript environments (`WebSocket`, `globalThis.WebSocket`, `window.WebSocket`, `self.WebSocket`). The result of this function call is stored in `t` and then exported as `WebSocket`. This action makes the `WebSocket` API available for use by other parts of the application. No WebSocket connection is initiated (and thus no specific URL is used) within this particular code snippet, hence the `urls` array is empty."
        }
      ]
    }
  ],
  "libraryUsage": [
    {
      "file": "assets/index-DMA1ihMt.js",
      "occurences": [
        {
          "name": "Zod",
          "motivation": "The code extensively uses Zod schemas and functions for data validation, such as `ZodString`, `ZodNumber`, `ZodObject`, `ZodArray`, `ZodEnum`, `ZodType`, `ZodError`, `ZodIssueCode`, and `ZodFirstPartyTypeKind`."
        },
        {
          "name": "eventemitter3",
          "motivation": "The code defines `PlebbitTypedEmitter` which extends `libExports$2.TypedEmitter`. `libExports$2` is derived from `requireLib$3()`, which references `requireEvents().EventEmitter`. The structure and methods like `on`, `emit`, `off` are characteristic of eventemitter3, and the code snippet appears to include or closely mimic its source."
        },
        {
          "name": "p-limit",
          "motivation": "The code includes a `Queue` class and a `pLimit` function definition that is characteristic of the `p-limit` library, used for limiting concurrent promises."
        },
        {
          "name": "multiformats/cid",
          "motivation": "The code defines and uses a `CID$N` class (e.g., `CID$2`, `CID$4`) with methods like `parse`, `createV0`, `createV1`, `toV0`, `toV1`, and `isCID`, which are typical of the `multiformats/cid` library."
        },
        {
          "name": "multiformats/bases/base58",
          "motivation": "The code includes definitions like `base58btc$N = baseX$N({name:\"base58btc\", prefix:\"z\", alphabet:\"...\"})` and usage of base58 encoding/decoding, characteristic of `multiformats/bases/base58`."
        },
        {
          "name": "multiformats/hashes/sha2",
          "motivation": "The code utilizes SHA256 hashing, for example, through a `sha256$b` or `sha256$4` object with a `digest` method, which aligns with `multiformats/hashes/sha2`."
        },
        {
          "name": "kubo-rpc-client (or generic IPFS HTTP client)",
          "motivation": "The code includes `KuboRpcCreateClientOptionSchema`, `TransformKuboRpcClientOptionsSchema`, `ParsedKuboRpcClientOptionsSchema` and a `createKuboRpcClient` function, along with default options like `defaultPubsubKuboRpcClientsOptions` pointing to Kubo RPC API endpoints. This indicates interaction with an IPFS Kubo node via its HTTP RPC API."
        },
        {
          "name": "IPLD DAG-PB",
          "motivation": "The code defines `DAG_PB_CODE$N` (e.g., `DAG_PB_CODE$2 = 112`), uses `dag-pb` as a codec string (e.g., `this.codec=\"dag-pb\"`), and includes protobuf-like schema definitions for `PBNode` and `PBLink` which are core to IPLD's DAG-PB format."
        },
        {
          "name": "localforage",
          "motivation": "The code explicitly calls `localForage.createInstance` in the `Storage` class's `init` method, indicating its use for client-side storage."
        },
        {
          "name": "uuid",
          "motivation": "The code contains a `v4$1` function and references `randomUUID`, which are characteristic of the UUID generation library or a similar embedded implementation."
        },
        {
          "name": "retry",
          "motivation": "The code includes `retry.operation` and associated retry logic (e.g., `_ipnsLoadingOperation = retry.operation(...)`), indicating the use of a retry library or pattern."
        },
        {
          "name": "cborg",
          "motivation": "The code uses a function `encode$G(ie, cborgEncodeOptions)` for encoding JavaScript objects, with `cborgEncodeOptions` suggesting CBOR encoding, likely via the `cborg` library."
        },
        {
          "name": "mime-db",
          "motivation": "The code contains a large JSON object assigned to `require$$0$6` which is the database of MIME types from the `mime-db` library."
        },
        {
          "name": "Plebbit-JS",
          "motivation": "The analyzed code constitutes the Plebbit-JS library/application itself, as evidenced by self-referential names (e.g., `plebbitJsVersion`, `Logger$4(\"plebbit-js:...\")`), extensive internal logic, and definitions related to 'plebbit' and 'subplebbit' concepts."
        },
        {
          "name": "viem",
          "motivation": "The code extensively uses functions and patterns characteristic of `viem`, such as `defineChain` for various blockchain networks (e.g., `mainnet`, `polygon`, `arbitrum`, `optimism`, `bsc`, `celo`, `zksync`, `linea`, `base`, `scroll`, `zora`, `mantle`, `mode`, `blast`, `fraxtal`, `pgn`, `lisk`, `metalL2`, `redstone`, `bob`, `ancient8`, `opBNB`, `manta`, `worldchain`, `unichain`, `rss3`, `soneium`, `superseed`, `shape`, `ink`, `plume`, `garnet`, `pyrope`, `zircuit`, `abstract`, `playfiAlbireo`, `treasure`, `sophon`, `form`, `funki`, `huddle01`, `snax`), `createPublicClient`, `getAction` (a utility for calling actions like `getBlockNumber`, `call`, `sendRawTransaction`), `serializeTransaction`, `formatTransactionRequest`, `decodeFunctionResult`, `encodeFunctionData`, `hashMessage`, `verifyMessage`, `hashTypedData`, `verifyTypedData`, `waitForTransactionReceipt`, `watchBlockNumber`, `watchEvent`, `call$1` (likely a minified `call`), `simulateBlocks`, `simulateCalls`. It also includes structures for handling RPC requests, responses, and errors, consistent with `viem`'s architecture. The definition of custom chain formatters and serializers (e.g., for ZKsync, Optimism-like chains, Celo) also points to `viem`'s extensibility."
        },
        {
          "name": "noble-hashes",
          "motivation": "The code contains implementations or direct usage of cryptographic hash functions like SHA256 (`sha256$2`, `sha256$3`, `sha256$4`), Keccak256 (`keccak256$3`, `keccak_256$1`), and HMAC (`HMAC$1`, `hmac$1`). These are characteristic of the `noble-hashes` library, which `viem` uses for its hashing needs."
        },
        {
          "name": "noble-curves",
          "motivation": "The code includes detailed implementations for elliptic curve cryptography, specifically secp256k1 (`secp256k1$1`, `secp256k1$2`), including point arithmetic, signature generation (`sign`), and verification (`verify`). This is characteristic of the `noble-curves` library, which `viem` uses for cryptographic operations like signing and public key recovery."
        },
        {
          "name": "ethers.js (v5, utils)",
          "motivation": "The presence of utility functions like `AbiCoder$1`, `Interface$1`, `HDNode`, `SigningKey$2`, `randomBytes`, `keccak256$2`, `sha256$1`, `computeAddress$1`, `recoverAddress`, `hashMessage`, `TypedDataEncoder$1`, RLP encoding/decoding (`encodeRlp`, `decodeRlp`), and transaction serialization/parsing logic (`Transaction$1`) are highly indicative of ethers.js v5 utility packages or code derived from them. The structure of `AbstractProvider` and `JsonRpcProvider$1` also aligns with ethers.js v5. The specific version string `version$A=\"6.14.0\"` appears in a section of code that seems to be from `@ethersproject/abi` or related packages which were later forked/vendored in viem or other libraries, but the primary patterns point to viem using these concepts."
        },
        {
          "name": "bn.js",
          "motivation": "The code imports `_BN` from `requireBn$4()` and uses it for big number arithmetic (`new _BN(ee,16)`). This is the `bn.js` library, commonly used in older Ethereum JavaScript libraries."
        },
        {
          "name": "@noble/hashes (formerly scure-base)",
          "motivation": "The code includes functions for base58 encoding/decoding (`baseEncode`, `baseDecode`) and bech32, which were part of `scure-base` and now reside in `@noble/hashes` or related noble packages."
        },
        {
          "name": "uuid",
          "motivation": "The code includes functions like `v1`, `v4`, `validate`, `stringify` related to UUID generation and validation, which are characteristic of the `uuid` library."
        }
      ]
    },
    {
      "file": "assets/theme-github-C4W7_neC.js",
      "occurences": [
        {
          "name": "ACE Editor",
          "motivation": "The code uses `ace.define` and `ace.require` calls, which are standard methods for defining modules and themes within the ACE (Ajax.org Cloud9 Editor) library. Specifically, it defines a theme named \"github\" (`ace.define(\"ace/theme/github-css\", ...)` and `ace.define(\"ace/theme/github\", ...)`)."
        }
      ]
    },
    {
      "file": "assets/web-B6-kClih.js",
      "occurences": [
        {
          "name": "Web Plugin Base Class (e.g., from Capacitor Core)",
          "motivation": "The code imports `W` (aliased as `s`) from `./index-DMA1ihMt.js`, and the primary class `LocalNotificationsWeb` `extends s`. This inheritance pattern signifies that `s` serves as a base class. The `LocalNotificationsWeb` class implements methods for handling local notifications (e.g., `schedule`, `requestPermissions`, `checkPermissions`). Furthermore, it utilizes methods like `this.unimplemented(...)` and `this.notifyListeners(...)` (assumed to be inherited from `s`), which are characteristic of a base plugin class provided by mobile-to-web frameworks like Capacitor (where `WebPlugin` from `@capacitor/core` offers such functionality). The name `LocalNotificationsWeb` itself suggests it's the web-specific implementation for a Local Notifications plugin within such a framework."
        }
      ]
    },
    {
      "file": "assets/web-DiDYL4OZ.js",
      "occurences": [
        {
          "name": "Capacitor",
          "motivation": "The code defines a class `AppWeb` (exported from class `o`) that extends `t` (which is an import `W` from `'./index-DMA1ihMt.js'`). This class exhibits strong characteristics of a Capacitor Web Plugin:\n1.  It implements methods typical of the Capacitor `App` plugin interface, such as `exitApp()`, `getInfo()`, `getLaunchUrl()`, `getState()`, and `minimizeApp()`.\n2.  It uses `this.notifyListeners(...)` to emit events like `appStateChange`, `pause`, and `resume`. `notifyListeners` is a method provided by Capacitor's `WebPlugin` base class.\n3.  It handles app lifecycle by listening to `document.visibilitychange` and emits `pause`/`resume` events, a common pattern for web implementations of native app state plugins.\n4.  Some methods throw `this.unimplemented(...)`, which is a utility from `WebPlugin` for platform-specific methods not available on the web.\nThese patterns strongly suggest that `W` is the `WebPlugin` class from `@capacitor/core` and `AppWeb` is its web-specific implementation."
        }
      ]
    },
    {
      "file": "electron/preload.cjs",
      "occurences": [
        {
          "name": "electron",
          "motivation": "The code uses `require(\"electron\")` to import core Electron modules. Specifically, it utilizes `electron.contextBridge` to expose APIs and data to the renderer process in a secure way (e.g., `isElectron`, `defaultPlebbitOptions`, `electronApi`) and `electron.ipcRenderer` for asynchronous and synchronous inter-process communication between the renderer process and the main process (e.g., `ipcRenderer.on`, `ipcRenderer.send`, `ipcRenderer.invoke`)."
        }
      ]
    }
  ],
  "urls": [],
  "ethereum": [],
  "fallbacks": []
}