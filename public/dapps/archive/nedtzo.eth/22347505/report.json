{
  "version": 2,
  "contentHash": "bafybeifyauigle3eicgpguktys72z7ayuovexdlyxqkh3ban4obngwmcoe",
  "timestamp": 1745608917,
  "blockNumber": 22347505,
  "rootMimeType": "inode/directory",
  "totalSize": 295788246,
  "favicon": "c941d3c8b8040ac5999d93e0edb92ad0.jpg",
  "title": "Nedtzo Art",
  "distributionPurity": {
    "externalScripts": [],
    "externalMedia": []
  },
  "networkingPurity": [
    {
      "file": "assets/blocks/cryptopay/ccip-842878cc.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [],
          "library": "otherwise",
          "type": "auxiliary",
          "motivation": "The code defines an async function `C` (aliased as `ccipRequest`) which contains a `fetch` call: `fetch(r.replace(\"{sender}\",e).replace(\"{data}\",a),{body:JSON.stringify(d),method:i})`. \n*   The URL `r` is dynamically taken from an array of `urls` passed into the function. These URLs originate from the decoded data of an `OffchainLookup` error revert (EIP-3668/CCIP-Read), specifically from the `urls` parameter within the error data.\n*   The URL string dynamically replaces `{sender}` and `{data}` placeholders if present.\n*   The HTTP method (`i`) is determined dynamically ('GET' or 'POST') based on whether the URL contains '{data}'.\n*   Data (`d`) is sent in the body for 'POST' requests, containing the `sender` and `data` properties.\n*   Since the specific base URLs (`r`) are not defined within the code but are provided externally via contract error data at runtime, no specific URLs can be listed. \n*   The call is classified as `auxiliary` because it fetches off-chain data based on contract instructions (CCIP-Read), not a standard RPC or Bundler endpoint.\n*   The `fetch` call is within custom logic, not directly from a high-level library function, hence `library` is 'otherwise'."
        }
      ]
    },
    {
      "file": "assets/blocks/cryptopay/index-236adf03.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.com/v1"
          ],
          "library": "WalletConnect Web3Modal",
          "type": "auxiliary",
          "motivation": "The code contains a function `eh` that makes a `fetch` call. The URL is constructed dynamically using a variable `o` or a default `Z0`, which is defined as `\"https://rpc.walletconnect.com/v1\"`. The request includes `chainId` and `projectId` as query parameters and sends a JSON-RPC `eth_call` request. The data (`0x1626ba7e...`) indicates an EIP-1271 signature verification call, likely part of the SIWE (Sign-In With Ethereum) flow managed by Web3Modal via WalletConnect's infrastructure."
        }
      ]
    },
    {
      "file": "assets/blocks/cryptopay/index-2a4539af.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://www.walletlink.org/events/.../seen"
          ],
          "library": "@coinbase/wallet-sdk",
          "type": "auxiliary",
          "motivation": "The `WalletLinkHTTP.markUnseenEventsAsSeen` method makes a `fetch` call to `${this.linkAPIUrl}/events/${t.eventId}/seen`. `linkAPIUrl` defaults to `WALLETLINK_URL` which is `https://www.walletlink.org`. This call marks specific WalletLink events as seen on the backend."
        },
        {
          "method": "fetch",
          "urls": [
            "https://www.walletlink.org/events?unseen=true"
          ],
          "library": "@coinbase/wallet-sdk",
          "type": "auxiliary",
          "motivation": "The `WalletLinkHTTP.fetchUnseenEvents` method makes a `fetch` call to `${this.linkAPIUrl}/events?unseen=true`. `linkAPIUrl` defaults to `WALLETLINK_URL` which is `https://www.walletlink.org`. This retrieves unseen WalletLink events from the backend."
        },
        {
          "method": "fetch",
          "urls": [],
          "library": "@coinbase/wallet-sdk",
          "type": "rpc",
          "motivation": "The `fetchRPCRequest` function makes a `fetch` call to a dynamic `e.rpcUrl`. This URL corresponds to the RPC endpoint of the currently selected blockchain network. The function sends a JSON-RPC 2.0 payload. The specific URL is determined at runtime based on the provider's configuration or user selection and cannot be statically listed, but it serves an RPC purpose."
        },
        {
          "method": "WebSocket",
          "urls": [
            "wss://www.walletlink.org/rpc"
          ],
          "library": "@coinbase/wallet-sdk",
          "type": "auxiliary",
          "motivation": "The `WalletLinkWebSocket` class establishes a WebSocket connection using `new this.WebSocketClass(this.url)`. The URL is constructed by replacing `http` with `ws` in the `${linkAPIUrl}/rpc` string, where `linkAPIUrl` defaults to `https://www.walletlink.org`. This WebSocket is used for real-time communication with the WalletLink backend."
        }
      ]
    },
    {
      "file": "assets/blocks/cryptopay/index-6fce87de.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://explorer-api.walletconnect.com/v3/wallets"
          ],
          "library": "Web3Modal",
          "type": "auxiliary",
          "motivation": "The code calls `L.getWallets(...)` (where `L` is identified as `ExplorerCtrl` from Web3Modal). This controller uses an internal API client (`w3mApi`) which makes `fetch` requests to the WalletConnect Explorer API (`https://explorer-api.walletconnect.com/v3/wallets`) to retrieve wallet listings. Query parameters like `page`, `entries`, `search`, `version`, `chains`, and `projectId` are appended to the URL during the actual call."
        }
      ]
    },
    {
      "file": "assets/blocks/cryptopay/index-c3d9f118.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://explorer-api.walletconnect.com/w3m/v1/getDesktopListings",
            "https://explorer-api.walletconnect.com/w3m/v1/getMobileListings",
            "https://explorer-api.walletconnect.com/w3m/v1/getInjectedListings",
            "https://explorer-api.walletconnect.com/w3m/v1/getAllListings",
            "https://explorer-api.walletconnect.com/w3m/v1/getWalletImage/*",
            "https://explorer-api.walletconnect.com/w3m/v1/getAssetImage/*"
          ],
          "library": "WalletConnect Web3Modal",
          "type": "auxiliary",
          "motivation": "The code defines a function `W(e, t)` which constructs a `URL` object based on the `E` constant (`https://explorer-api.walletconnect.com`) and a path `e`. It appends `projectId` and other parameters from `t` (including `sdkType` and `sdkVersion`) as query parameters. This function then calls `fetch(o)` with the constructed URL. The `m` object calls `W` with various paths (like `/w3m/v1/getDesktopListings`, `/w3m/v1/getWalletImage/...`) to retrieve data from the WalletConnect Explorer API. These are auxiliary service calls supporting the modal's functionality."
        }
      ]
    },
    {
      "file": "assets/blocks/cryptopay/index-f5ba1ec2.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://pulse.walletconnect.org/e"
          ],
          "library": "Web3Modal",
          "type": "auxiliary",
          "motivation": "The code uses a fetch wrapper (`Ep`) called via `Xn.post` to send analytics data. The base URL `https://pulse.walletconnect.org` is derived from `Be.getAnalyticsUrl()` and the path `/e` is specified in the call within the `Ve._sendAnalyticsEvent` function. This sends event data to the WalletConnect analytics service."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.web3modal.org/getAnalyticsConfig"
          ],
          "library": "Web3Modal",
          "type": "auxiliary",
          "motivation": "The code uses a fetch wrapper (`Ep`) called via `Xn.get` within the `ft.fetchAnalyticsConfig` function. The base URL `https://api.web3modal.org` is derived from `Be.getApiUrl()` and the path `/getAnalyticsConfig` is specified in the call. This fetches analytics configuration from the Web3Modal API."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.web3modal.org/getWallets"
          ],
          "library": "Web3Modal",
          "type": "auxiliary",
          "motivation": "The code uses a fetch wrapper (`Ep`) called via `Xn.get` within functions like `ft.fetchFeaturedWallets`, `ft.fetchRecommendedWallets`, `ft.fetchWallets`, and `ft.searchWallet`. The base URL `https://api.web3modal.org` is derived from `Be.getApiUrl()` and the path `/getWallets` is specified. This fetches wallet listings from the Web3Modal API."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.web3modal.org/getWalletImage/"
          ],
          "library": "Web3Modal",
          "type": "auxiliary",
          "motivation": "The code uses a fetch wrapper (`Ep`) called via `Xn.getBlob` within the `ft._fetchWalletImage` function. The base URL `https://api.web3modal.org` is derived from `Be.getApiUrl()` and the path `/getWalletImage/` is specified, with a dynamic ID appended. This fetches wallet images from the Web3Modal API."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.web3modal.org/public/getAssetImage/"
          ],
          "library": "Web3Modal",
          "type": "auxiliary",
          "motivation": "The code uses a fetch wrapper (`Ep`) called via `Xn.getBlob` within functions like `ft._fetchNetworkImage` and `ft._fetchConnectorImage`. The base URL `https://api.web3modal.org` is derived from `Be.getApiUrl()` and the path `/public/getAssetImage/` is specified, with a dynamic ID appended. This fetches asset images (like network or connector logos) from the Web3Modal API."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.web3modal.org/public/getCurrencyImage/"
          ],
          "library": "Web3Modal",
          "type": "auxiliary",
          "motivation": "The code uses a fetch wrapper (`Ep`) called via `Xn.getBlob` within the `ft._fetchCurrencyImage` function. The base URL `https://api.web3modal.org` is derived from `Be.getApiUrl()` and the path `/public/getCurrencyImage/` is specified, with a dynamic ID appended. This fetches currency images from the Web3Modal API."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.web3modal.org/public/getTokenImage/"
          ],
          "library": "Web3Modal",
          "type": "auxiliary",
          "motivation": "The code uses a fetch wrapper (`Ep`) called via `Xn.getBlob` within the `ft._fetchTokenImage` function. The base URL `https://api.web3modal.org` is derived from `Be.getApiUrl()` and the path `/public/getTokenImage/` is specified, with a dynamic ID appended. This fetches token images from the Web3Modal API."
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/identity/"
          ],
          "library": "Web3Modal",
          "type": "auxiliary",
          "motivation": "The code uses a fetch wrapper (`Ep`) via `hn.api.get` in the `Gr.fetchIdentity` function. The base URL `https://rpc.walletconnect.org` is derived from `Be.getBlockchainApiUrl()` and the path `/v1/identity/` is used, appended with a dynamic address. This likely fetches identity information (like ENS names/avatars) from the WalletConnect Blockchain API."
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/account/"
          ],
          "library": "Web3Modal",
          "type": "auxiliary",
          "motivation": "The code uses a fetch wrapper (`Ep`) via `hn.api.get` in the `Gr.fetchTransactions` and `Gr.getBalance` functions. The base URL `https://rpc.walletconnect.org` is derived from `Be.getBlockchainApiUrl()` and the path `/v1/account/` is used, followed by a dynamic address and sub-paths (`/history` or `/balance`). This fetches account transaction history or balance from the WalletConnect Blockchain API."
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/convert/quotes"
          ],
          "library": "Web3Modal",
          "type": "auxiliary",
          "motivation": "The code uses a fetch wrapper (`Ep`) via `hn.api.get` in the `Gr.fetchSwapQuote` function. The base URL `https://rpc.walletconnect.org` is derived from `Be.getBlockchainApiUrl()`. This fetches swap quotes from the WalletConnect Blockchain API."
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/convert/tokens"
          ],
          "library": "Web3Modal",
          "type": "auxiliary",
          "motivation": "The code uses a fetch wrapper (`Ep`) via `hn.api.get` in the `Gr.fetchSwapTokens` function. The base URL `https://rpc.walletconnect.org` is derived from `Be.getBlockchainApiUrl()`. This fetches available swap tokens from the WalletConnect Blockchain API."
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/fungible/price"
          ],
          "library": "Web3Modal",
          "type": "auxiliary",
          "motivation": "The code uses a fetch wrapper (`Ep`) via `hn.api.post` in the `Gr.fetchTokenPrice` function. The base URL `https://rpc.walletconnect.org` is derived from `Be.getBlockchainApiUrl()`. This fetches token prices from the WalletConnect Blockchain API."
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/convert/allowance"
          ],
          "library": "Web3Modal",
          "type": "auxiliary",
          "motivation": "The code uses a fetch wrapper (`Ep`) via `hn.api.get` in the `Gr.fetchSwapAllowance` function. The base URL `https://rpc.walletconnect.org` is derived from `Be.getBlockchainApiUrl()`. This fetches token allowances for swaps from the WalletConnect Blockchain API."
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/convert/gas-price"
          ],
          "library": "Web3Modal",
          "type": "auxiliary",
          "motivation": "The code uses a fetch wrapper (`Ep`) via `hn.api.get` in the `Gr.fetchGasPrice` function. The base URL `https://rpc.walletconnect.org` is derived from `Be.getBlockchainApiUrl()`. This fetches gas prices for swaps from the WalletConnect Blockchain API."
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/convert/build-transaction"
          ],
          "library": "Web3Modal",
          "type": "auxiliary",
          "motivation": "The code uses a fetch wrapper (`Ep`) via `hn.api.post` in the `Gr.generateSwapCalldata` function. The base URL `https://rpc.walletconnect.org` is derived from `Be.getBlockchainApiUrl()`. This generates swap transaction data via the WalletConnect Blockchain API."
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/convert/build-approve"
          ],
          "library": "Web3Modal",
          "type": "auxiliary",
          "motivation": "The code uses a fetch wrapper (`Ep`) via `hn.api.get` in the `Gr.generateApproveCalldata` function. The base URL `https://rpc.walletconnect.org` is derived from `Be.getBlockchainApiUrl()`. This generates approval transaction data for swaps via the WalletConnect Blockchain API."
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/profile/"
          ],
          "library": "Web3Modal",
          "type": "auxiliary",
          "motivation": "The code uses a fetch wrapper (`Ep`) via `hn.api.get` or `hn.api.post` in functions like `Gr.lookupEnsName`, `Gr.reverseLookupEnsName`, `Gr.getEnsNameSuggestions`, `Gr.registerEnsName`. The base URL `https://rpc.walletconnect.org` is derived from `Be.getBlockchainApiUrl()` and paths starting with `/v1/profile/` are used. This interacts with the ENS profile features of the WalletConnect Blockchain API."
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/generators/onrampurl"
          ],
          "library": "Web3Modal",
          "type": "auxiliary",
          "motivation": "The code uses a fetch wrapper (`Ep`) via `hn.api.post` in the `Gr.generateOnRampURL` function. The base URL `https://rpc.walletconnect.org` is derived from `Be.getBlockchainApiUrl()`. This generates onramp URLs via the WalletConnect Blockchain API."
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/onramp/options"
          ],
          "library": "Web3Modal",
          "type": "auxiliary",
          "motivation": "The code uses a fetch wrapper (`Ep`) via `hn.api.get` in the `Gr.getOnrampOptions` function. The base URL `https://rpc.walletconnect.org` is derived from `Be.getBlockchainApiUrl()`. This fetches onramp options from the WalletConnect Blockchain API."
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/onramp/quote"
          ],
          "library": "Web3Modal",
          "type": "auxiliary",
          "motivation": "The code uses a fetch wrapper (`Ep`) via `hn.api.post` in the `Gr.getOnrampQuote` function. The base URL `https://rpc.walletconnect.org` is derived from `Be.getBlockchainApiUrl()`. This fetches onramp quotes from the WalletConnect Blockchain API."
        },
        {
          "method": "fetch",
          "urls": [],
          "library": "viem/Wagmi",
          "type": "rpc",
          "motivation": "The code utilizes functions like `t.request` (wrapped by `XQ`) within the `viem` and `wagmi` libraries to make JSON-RPC calls (e.g., `eth_chainId`, `eth_call`, `eth_estimateGas`, `eth_sendTransaction`). The actual URLs are configured within the Wagmi/viem client instance and are not hardcoded in this snippet. The `rZ` function shows an underlying `fetch` call used for these requests."
        },
        {
          "method": "fetch",
          "urls": [],
          "library": "Web3Modal",
          "type": "auxiliary",
          "motivation": "The code uses `fetch` within functions `RQ` and `IQ` to resolve ENS avatar URIs. These URIs are dynamic and can point to various HTTP or IPFS gateways."
        },
        {
          "method": "fetch",
          "urls": [],
          "library": "none",
          "type": "self",
          "motivation": "The self-executing function at the top of the file uses `fetch(o.href, i)` to preload module dependencies (`<link rel=\"modulepreload\">`). The `o.href` is relative to the current document's origin."
        }
      ]
    },
    {
      "file": "assets/blocks/cryptopay/index.es-fe3b6058.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.com/v1/"
          ],
          "library": "@walletconnect/universal-provider",
          "type": "rpc",
          "motivation": "The `tE` function calls `fetch` with a dynamically constructed URL `${a||Y_}/?chainId=${n}&projectId=${o}`, where `Y_` defaults to `\"https://rpc.walletconnect.com/v1\"`. It sends an `eth_call` JSON-RPC request to validate EIP-1271 signatures."
        },
        {
          "method": "fetch",
          "urls": [
            "https://verify.walletconnect.com/attestation/",
            "https://verify.walletconnect.org/attestation/"
          ],
          "library": "@walletconnect/universal-provider",
          "type": "auxiliary",
          "motivation": "The `fetchAttestation` function calls `fetch` with `${o}/attestation/${n}`, where `o` is the `verifyUrl`, defaulting to `Us=\"https://verify.walletconnect.com\"` or `Cu=\"https://verify.walletconnect.org\"`. This is used for WalletConnect's Verify API to check domain attestation."
        },
        {
          "method": "fetch",
          "urls": [
            "https://echo.walletconnect.com/"
          ],
          "library": "@walletconnect/universal-provider",
          "type": "auxiliary",
          "motivation": "The `registerDeviceToken` function calls `fetch` with `${NI}/${this.projectId}/clients`, where `NI` is `\"https://echo.walletconnect.com\"`. This is used to register push notification tokens with WalletConnect's Echo service."
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.com/v1/"
          ],
          "library": "@walletconnect/universal-provider",
          "type": "rpc",
          "motivation": "The `qn` class, used as the HTTP provider for various chains (EIP155, Solana, etc.) within the Universal Provider, makes POST requests using `fetch` (via `ed`). The default URL is constructed by the `Bn` function, which defaults to `T4=\"https://rpc.walletconnect.com/v1/\"` combined with chainId and projectId query parameters. These are standard JSON-RPC requests."
        },
        {
          "method": "WebSocket",
          "urls": [
            "wss://relay.walletconnect.com",
            "wss://relay.walletconnect.org"
          ],
          "library": "@walletconnect/universal-provider",
          "type": "auxiliary",
          "motivation": "The `GI` class (Relayer) uses the `H6` WebSocket connection class. The URL is constructed dynamically using the `v3` function, passing parameters like `relayUrl`, `projectId`, `auth`. The `relayUrl` defaults to `wg=\"wss://relay.walletconnect.com\"` and can failover to `Ip=\"wss://relay.walletconnect.org\"`. This WebSocket connection is used for the WalletConnect relay network to transport messages between dapps and wallets."
        }
      ]
    },
    {
      "file": "assets/blocks/efp/efp.js",
      "occurences": [
        {
          "method": "XMLHttpRequest",
          "urls": [
            "https://api.ethfollow.xyz/api/v1/users/<ensName>/followers?include=ens&limit=10",
            "https://api.ethfollow.xyz/api/v1/users/<ensName>/following?include=ens&limit=10"
          ],
          "library": "jQuery",
          "type": "auxiliary",
          "motivation": "The code utilizes `$.ajax` (which internally uses `XMLHttpRequest`) to send GET requests. The base URLs `https://api.ethfollow.xyz/api/v1/users/${ensName}/followers?include=ens&limit=10` and `https://api.ethfollow.xyz/api/v1/users/${ensName}/following?include=ens&limit=10` are constructed, where `${ensName}` is dynamically obtained. A dynamic `offset` parameter is appended within the `fetchFollowers` and `fetchFollowing` functions before the request is sent. These URLs fetch social graph data from the external ethfollow.xyz API, classifying them as auxiliary."
        }
      ]
    },
    {
      "file": "assets/js/custom.js",
      "occurences": [
        {
          "method": "XMLHttpRequest",
          "urls": [
            "/link-ajax",
            "/biolink-block-ajax"
          ],
          "library": "jQuery",
          "type": "self",
          "motivation": "The code uses `$.ajax` (which is a jQuery wrapper for `XMLHttpRequest`) within the `ajax_call_helper` function. The URL is dynamically constructed using a global `url` variable and a `controller` parameter passed to the function (`${url}${controller}`). The identified controllers are 'link-ajax' and 'biolink-block-ajax', indicating relative paths on the same domain."
        }
      ]
    },
    {
      "file": "assets/js/libraries/cookieconsent.js",
      "occurences": [
        {
          "method": "XMLHttpRequest",
          "urls": [
            "[CONFIG.theme_css]"
          ],
          "library": "CookieConsent",
          "type": "self",
          "motivation": "The `hb` function uses `XMLHttpRequest` to fetch a resource. This function is called within the `m.run` method with `a.theme_css` as the URL (`hb(a.theme_css, ...)`), where `a` is the configuration object passed to the main `run` function. This is used to dynamically load the CSS theme for the cookie consent banner, likely hosted on the same domain."
        }
      ]
    },
    {
      "file": "assets/js/libraries/jquery.min.js",
      "occurences": [
        {
          "method": "XMLHttpRequest",
          "urls": [],
          "library": "jQuery",
          "type": "auxiliary",
          "motivation": "jQuery's AJAX functionality (`$.ajax`, `$.get`, `$.post`, etc.) uses `XMLHttpRequest` internally. The code includes logic to create an `XMLHttpRequest` object: `S.ajaxSettings.xhr=function(){try{return new C.XMLHttpRequest}catch(e){}}`. However, the specific URLs for these requests are determined by the user of the jQuery library when calling functions like `$.ajax(options)`, `$.get(url)`, etc., and are not hardcoded within the library itself. Therefore, no specific URLs from the codebase can be listed."
        }
      ]
    },
    {
      "file": "assets/js/nft-card.min.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://api.opensea.io/wyvern/v1/orders/post/",
            "https://api.opensea.io/api/v1/asset/",
            "https://api.opensea.io/api/v1/assets/",
            "https://api.opensea.io/api/v1/tokens/",
            "https://api.opensea.io/api/v1/bundle/",
            "https://api.opensea.io/api/v1/bundles/",
            "https://api.opensea.io/wyvern/v1/orders/",
            "https://rinkeby-api.opensea.io/wyvern/v1/orders/post/",
            "https://rinkeby-api.opensea.io/api/v1/asset/",
            "https://rinkeby-api.opensea.io/api/v1/assets/",
            "https://rinkeby-api.opensea.io/api/v1/tokens/",
            "https://rinkeby-api.opensea.io/api/v1/bundle/",
            "https://rinkeby-api.opensea.io/api/v1/bundles/",
            "https://rinkeby-api.opensea.io/wyvern/v1/orders/"
          ],
          "library": "OpenSeaAPI (axios wrapper)",
          "type": "auxiliary",
          "motivation": "The `OpenSeaAPI` class uses a `fetch` method (`_fetch`) internally (potentially wrapping `axios`) to make calls to its `apiBaseUrl`. This base URL defaults to `https://api.opensea.io` (mainnet) or `https://rinkeby-api.opensea.io` (Rinkeby). Specific API paths like `/wyvern/v1/orders/post/`, `/api/v1/asset/...`, `/api/v1/assets/`, etc., are appended to this base URL for various API operations (posting orders, getting assets, bundles, etc.)."
        },
        {
          "method": "XMLHttpRequest",
          "urls": [
            "https://api.opensea.io/jsonrpc/v1/",
            "https://rinkeby-api.opensea.io/jsonrpc/v1/",
            "https://mainnet.infura.io"
          ],
          "library": "Web3.js",
          "type": "rpc",
          "motivation": "The code initializes `Web3.js` with `HttpProvider`. The provider URLs are set based on the network: `https://api.opensea.io/jsonrpc/v1/` for mainnet and `https://rinkeby-api.opensea.io/jsonrpc/v1/` for Rinkeby. A fallback to `https://mainnet.infura.io` is also present as a default in the constructor. Web3.js's `HttpProvider` typically uses `XMLHttpRequest` (or potentially `fetch` in newer versions, but the analysis indicates XMLHttpRequest usage might be present or polyfilled) to interact with Ethereum JSON-RPC endpoints."
        }
      ]
    }
  ],
  "libraryUsage": [
    {
      "file": "assets/blocks/cryptopay/ccip-842878cc.js",
      "occurences": [
        {
          "name": "viem",
          "motivation": "The code imports multiple minified functions (`bs`, `bt`, `bu`, `bv`, `bw`, `bx`, `by`, `bz`, `bA`, `bB`, `bC`) from a bundled file (`./index-f5ba1ec2.js`). The usage patterns of these functions strongly suggest they correspond to common `viem` utilities and actions:\n*   `h` is used like `isAddress` for validating Ethereum addresses.\n*   `b` is used for throwing address-related errors.\n*   `p` is used as a base class for custom errors (`OffchainLookupError`, `OffchainLookupResponseMalformedError`, `OffchainLookupSenderMismatchError`), similar to `viem`'s `BaseError`.\n*   `O` is used with an ABI definition (`v`) to decode error data (`O({data: n, abi: [v]})`), matching `decodeErrorResult`.\n*   `L` is used to make a contract call (`await L(a, { ... })`), resembling `call`.\n*   `E` and `x` are used for ABI encoding (`E([...])`, `x([...],[...])`), similar to `encodeFunctionData` and `encodeAbiParameters`.\n*   `m` is used for throwing HTTP request errors (`new m({...})`), like `HttpRequestError`.\n*   `M` is used for hex validation (`!M(o)`), like `isHex`.\n*   `y` and `w` appear to be formatting utilities used in error messages."
        }
      ]
    },
    {
      "file": "assets/blocks/cryptopay/hooks.module-52e4f50c.js",
      "occurences": [
        {
          "name": "preact",
          "motivation": "* The code imports and uses `Component`, `Fragment`, `createElement` (`_r`), `render` (`$n`), `createContext`, `h` (`_r`), etc., which are characteristic exports of the Preact library.\n* It defines components extending `Me` (identified as `Component`).\n* It uses a virtual DOM diffing and rendering mechanism (`gr`, `Ln`, `In`).\n* The variable `Qa` is assigned an object containing these exports."
        },
        {
          "name": "preact/hooks",
          "motivation": "* The code imports and uses functions like `useState` (`Un`), `useEffect` (`Pa`), `useLayoutEffect` (`jn`), `useRef` (`Ia`), `useCallback` (`Fa`), `useMemo` (`wr`), `useContext` (`Ha`), `useReducer` (`qn`), `useId` (`ja`), `useErrorBoundary` (`qa`), `useDebugValue` (`Ua`), `useImperativeHandle` (`$a`).\n* These functions are standard React Hooks, and their presence alongside Preact indicates the use of `preact/hooks`.\n* The variable `Za` is assigned an object containing these hook exports."
        },
        {
          "name": "js-sha3",
          "motivation": "* The code includes implementations for various Keccak and SHA3 hashing algorithms (`keccak224`, `keccak256`, `keccak384`, `keccak512`, `sha3-224`, `sha3-256`, `sha3-384`, `sha3-512`, `shake128`, `shake256`).\n* It utilizes the Keccak-p permutation function (`p1600` in `vn`).\n* It defines stream-based hashers (`pn` extending `Ti`, `bn` extending `ki`) using Node.js stream concepts (`Transform` from `dn`), which is a pattern seen in the `js-sha3` library.\n* The variable `Ya` is assigned the result of `Di(Ni)`, which is the factory function creating these hash instances."
        },
        {
          "name": "clsx",
          "motivation": "* The code imports a function `jr` (renamed from `clsx`) which combines class names conditionally, a common pattern for the `clsx` library.\n* The `jr` function iterates through arguments, handling strings, numbers, arrays, and objects to build a class string.\n* The variable `Ja` is assigned an object containing the `clsx` export."
        },
        {
          "name": "Node.js Standard Library Polyfills (events, stream, buffer, util, process)",
          "motivation": "* Imports `EventEmitter` from `tn` (`node-stdlib-browser/events`).\n* Imports and extensively uses `Buffer` from `Ve` (`node-stdlib-browser/buffer`).\n* Imports and uses `inspect` from `rn` (`node-stdlib-browser/util`).\n* Imports `process` as `Se` (`node-stdlib-browser/process`) and uses `process.nextTick`.\n* Contains detailed implementations of `Readable`, `Writable`, `Duplex`, `Transform`, `pipeline`, and `finished` from the Node.js `stream` module (imported via `ar.exports` assigned to `dn`). This suggests a polyfill or bundled version of the Node.js stream library is used."
        }
      ]
    },
    {
      "file": "assets/blocks/cryptopay/index-236adf03.js",
      "occurences": [
        {
          "name": "ethers.js",
          "motivation": "The code includes versioned module identifiers like `\"logger/5.7.0\"`, `\"bytes/5.7.0\"`, `\"bignumber/5.7.0\"`, `\"strings/5.7.0\"`, `\"address/5.7.0\"`, and `\"signing-key/5.7.0\"`. It uses classes and functions characteristic of ethers.js, such as `Logger`, `BigNumber` (wrapping BN.js), address manipulation (`getAddress`, `isAddress`), byte array conversion (`arrayify`, `hexlify`), hashing utilities (`keccak256`), and cryptographic operations (`SigningKey`, `recoverPublicKey`). It also seems to implicitly use ethers' dependencies like BN.js, hash.js, and elliptic."
        },
        {
          "name": "js-sha3",
          "motivation": "The code contains a minified version of the js-sha3 library, explicitly mentioned in the comments (`/** * [js-sha3]{@link https://github.com/emn178/js-sha3} ... */`). It's used for Keccak hashing, likely as a dependency pulled in by ethers.js or another library."
        },
        {
          "name": "BN.js",
          "motivation": "The code includes a minified version of the BN.js library. It is referenced (`var zr=D.BN;`) and used for arbitrary-precision arithmetic, likely as the underlying implementation for ethers.js' BigNumber class (`\"bignumber/5.7.0\"`)."
        },
        {
          "name": "hash.js",
          "motivation": "The code includes minified hashing functions (SHA1, SHA256, SHA224, SHA384, SHA512, RIPEMD160) consistent with the hash.js library structure (`sha.js`, `ripemd.js`). This is commonly used by cryptographic libraries like ethers.js."
        },
        {
          "name": "elliptic",
          "motivation": "The code includes minified elliptic curve cryptography functions, specifically mentioning EC operations and presets like `secp256k1`, `p192`, `p224`, `p256`, etc. (`var J0=Y0.ec;`). This points to the use of the elliptic library, a common dependency for Ethereum key management in libraries like ethers.js."
        },
        {
          "name": "Lit",
          "motivation": "The code defines classes extending `HTMLElement` and utilizes features like `static styles`, `render`, `@property` (minified as `Oh`), and `@state` (minified as `Dh`) decorators. It imports and uses base classes like `ReactiveElement` (minified as `Xe`) and `LitElement` (minified as `rr`). It also uses template literal tags (`ds`) and CSS processing (`ph`, `mh`) consistent with Lit and its underlying `lit-html` library."
        },
        {
          "name": "WalletConnect Web3Modal",
          "motivation": "The code defines custom elements with prefixes `wui-` and `w3m-` (e.g., `w3m-connecting-siwe-view`, `wui-visual-thumbnail`). It imports many modules from a single file (`./index-f5ba1ec2.js`) using single-letter aliases, including controllers and state management related to WalletConnect (`Ti`, `En`, `Ei`, `Li`, `As`, `qi`) and SIWE (`SIWEController` defined as `pr`). The overall structure and component names strongly suggest the use of WalletConnect's Web3Modal library."
        }
      ]
    },
    {
      "file": "assets/blocks/cryptopay/index-2a4539af.js",
      "occurences": [
        {
          "name": "@coinbase/wallet-sdk",
          "motivation": "The code includes class names like `CoinbaseWalletProvider`, `CoinbaseWalletSDK`, `WalletLinkSigner`, `SCWSigner`, `WalletLinkRelay`, `WalletLinkConnection`, `WalletLinkSession`, `WalletLinkHTTP`, `WalletLinkWebSocket`, constants like `WALLETLINK_URL`, `CB_KEYS_URL`, and methods like `makeWeb3Provider`, `setAppInfo`, `request`, `handshake`, `requestEthereumAccounts`, `switchEthereumChain`. These are all characteristic components of the Coinbase Wallet SDK."
        },
        {
          "name": "Preact (or React-like)",
          "motivation": "The code imports functions like `_t` (likely classnames/clsx), `Et` (render), `an` (useState), `on` (EventEmitter), `s` (likely containing useEffect) from `./hooks.module-52e4f50c.js`. It uses JSX-like syntax transpiled to `(0,r.h)(...)` calls and React Hooks patterns (`useState`, `useEffect`) within UI components like `SnackbarContainer`, `SnackbarInstance`, and `RedirectDialog`."
        },
        {
          "name": "EventEmitter",
          "motivation": "The `CoinbaseWalletProvider` class (`Is`) extends `_s.default`, where `_s` is derived from the imported `on` function, which acts as an EventEmitter, evidenced by the use of `.emit()` method within the provider."
        },
        {
          "name": "Node Buffer Polyfill",
          "motivation": "Frequent use of `Buffer.from`, `Buffer.allocUnsafe`, `Buffer.isBuffer` indicates the use of the Node.js Buffer API, likely provided through a polyfill or bundling process for browser compatibility."
        },
        {
          "name": "Web Crypto API",
          "motivation": "The code utilizes `crypto.subtle` for cryptographic operations (ECDH key generation, derivation, AES-GCM encryption/decryption) and `crypto.getRandomValues` for generating random bytes. These are part of the standard browser Web Crypto API."
        },
        {
          "name": "js-sha256",
          "motivation": "The import `sn` is used as `mr.sha256` within the `WalletLinkSession` class (`ze`) to compute a key digest: `new mr.sha256().update(\"...\").digest(\"hex\")`."
        },
        {
          "name": "Ethereum Utilities (e.g., @ethereumjs/util)",
          "motivation": "The code contains utility functions (in variables `qt` and `sr`) for handling Ethereum-specific data types and operations: hex string manipulation (`stripHexPrefix`, `isHexString`, `ensureHexString`), buffer conversions (`toBuffer`, `bufferToHex`), hashing (`keccak`, aliased from imported `rn`), ABI encoding (`rawEncode`, `solidityPack`), and big integer handling (`bufferBEFromBigInt`, `twosFromBigInt`)."
        },
        {
          "name": "Ethereum Typed Data Signing Utilities (e.g., @metamask/eth-sig-util)",
          "motivation": "The code includes logic (in `ir` and `Be`) for handling EIP-712 typed data signing, including schema validation (`TYPED_MESSAGE_SCHEMA`), encoding (`encodeData`, `encodeType`), hashing (`hashStruct`, `hashType`), and specific versioned hashing functions (`hashForSignTypedDataLegacy`, `hashForSignTypedData_v3`, `hashForSignTypedData_v4`)."
        },
        {
          "name": "eth-rpc-errors",
          "motivation": "The code defines and uses standardized Ethereum error codes (`standardErrorCodes` in `U`), error messages (`errorValues` in `U`), error serialization (`serialize` in `Fe`), and error factory functions (`standardErrors` in `ye`), consistent with the `eth-rpc-errors` library for EIP-1193 and EIP-1474."
        }
      ]
    },
    {
      "file": "assets/blocks/cryptopay/index-6fce87de.js",
      "occurences": [
        {
          "name": "Lit",
          "motivation": "The code extensively uses Lit library features, including:\n*   `w extends ue` where `ue` is `ReactiveElement` (a Lit base class).\n*   The `l` template literal tag, aliased from `Ar(1)` which corresponds to `lit-html`'s `html` tag.\n*   Decorators like `@p` (property) and `@W` (state) from Lit.\n*   The `y` function used as `@y('wcm-...')` for defining custom elements, a Lit pattern.\n*   Rendering functions like `Xr` which internally uses Lit's rendering mechanism.\n*   CSS management functions (`C`, `Hr`) consistent with Lit's styling approach."
        },
        {
          "name": "Motion One",
          "motivation": "The code imports and uses animation functions and classes:\n*   `ne` which wraps `zo` (sequence) and `Vo` (animateValue).\n*   `Mr` class (likely `Motion` or `Animation` class).\n*   Usage of animation properties like `duration`, `easing`, `delay` which are standard in animation libraries.\n*   References like `window.__MOTION_DEV_TOOLS_RECORD` and `motion-one` within variable names (`Zt`).\n*   Functions like `Lo` responsible for creating animations on elements, resembling Motion One's `animate` function."
        },
        {
          "name": "qrcode",
          "motivation": "The code imports `Nr` from a separate chunk (`./index-f5ba1ec2.js`) and uses it as `Nr.create(t,{errorCorrectionLevel:e})`. This pattern, especially the `create` method and options like `errorCorrectionLevel`, is characteristic of QR code generation libraries like `qrcode`. The `Ii.generate` function uses the output of `Nr.create` to generate SVG paths for a QR code."
        },
        {
          "name": "Web3Modal",
          "motivation": "The code is replete with references and components specific to WalletConnect's Web3Modal:\n*   Numerous custom elements are defined with the `wcm-` prefix (e.g., `wcm-modal`, `wcm-button`, `wcm-qrcode`, `wcm-wallet-image`).\n*   Imports like `fe` (ConfigCtrl), `Ke` (ModalCtrl), `O` (RouterCtrl), `L` (ExplorerCtrl), `g` (HelpersCtrl), `Y` (ToastCtrl), `jr` (EventsCtrl), `H` (ClientCtrl), `ae` (ConfigCtrl) represent controllers managing modal state, routing, configuration, and wallet interactions, typical of Web3Modal's architecture.\n*   Constants like `WALLET_CONNECT_LOGO` and `WALLET_CONNECT_ICON` are used.\n*   Functions like `h.handleMobileLinking`, `h.setRecentWallet`, `L.getRecomendedWallets` relate to wallet connection flows managed by Web3Modal."
        }
      ]
    },
    {
      "file": "assets/blocks/cryptopay/index-c3d9f118.js",
      "occurences": [
        {
          "name": "WalletConnect Web3Modal",
          "motivation": "The code explicitly references WalletConnect constants (`WALLETCONNECT_DEEPLINK_CHOICE`, `WCM_VERSION`), handles WalletConnect URIs (`walletConnectUri`), interacts frequently with the WalletConnect Explorer API via the base URL `E = \"https://explorer-api.walletconnect.com\"` (e.g., in functions `getDesktopListings`, `getMobileListings`, `getWalletImageUrl`), manages modal lifecycle (`L.open`, `L.close`), and identifies itself to the API with `sdkType: \"wcm\"` and `sdkVersion: \"js-2.6.2\"`. The class `oe` is identified as `WalletConnectModal` in a source map hint."
        },
        {
          "name": "Custom Reactive State Manager",
          "motivation": "The code consistently uses a pattern where `u({...})` initializes state objects (seen for variables `n`, `a`, `d`, `w`, `p`, `I`, `f`, `g`) and `h(state, callback)` subscribes to changes in these state objects. This indicates a reactive state management system, likely custom-built or a minified version of a library like Zustand, providing reactivity throughout the modal's controllers."
        },
        {
          "name": "Lit (Likely)",
          "motivation": "The `initUi` method uses a dynamic import function `V` to load `./index-6fce87de.js`. Subsequently, it creates a custom HTML element `<wcm-modal>` and appends it to the document body (`document.createElement(\"wcm-modal\"); document.body.insertAdjacentElement(\"beforeend\",t)`). The use of custom elements (`wcm-*`) and dynamic loading for UI components is a common pattern used by the Lit library, which is known to be used in WalletConnect Web3Modal v2/v3."
        }
      ]
    },
    {
      "file": "assets/blocks/cryptopay/index-f5ba1ec2.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code includes the React library's production build (`react.production.min.js`). It uses core React concepts like `React.createElement`, `React.Component`, `useState`, `useEffect`, `useRef`, and React-specific symbols (`Symbol.for(\"react.element\")`, `Symbol.for(\"react.fragment\")`). It also includes `react-jsx-runtime.production.min.js` and `react-dom.production.min.js`."
        },
        {
          "name": "scheduler",
          "motivation": "The code includes the `scheduler.production.min.js` library, which is a dependency of React used for cooperative scheduling."
        },
        {
          "name": "viem",
          "motivation": "The code contains a version string pattern `\"viem@${fV}\"` where `fV` is `\"2.18.2\"`. It includes numerous functions and error classes characteristic of viem, such as `encodeFunctionData`, `decodeFunctionResult`, `encodeAbiParameters`, `getAddress`, `parseUnits`, `formatUnits`, `HttpRequestError`, `RpcRequestError`, `TimeoutError`, `TransactionExecutionError`, `ViemError`, and ABI/address handling logic."
        },
        {
          "name": "Wagmi Core",
          "motivation": "The code includes a version string `\"@wagmi/core@${E2}\"` where `E2` is `\"2.13.1\"`. It references Wagmi-specific concepts like `WagmiCoreError`, `createConfig`, `createConnector`, `createStorage`, `connect`, `disconnect`, `getAccount`, `getChainId`, `switchChain`, and manages connector state (`ConnectorNotFoundError`, `ConnectorAlreadyConnectedError`)."
        },
        {
          "name": "Web3Modal",
          "motivation": "The code defines numerous custom elements prefixed with `w3m-` and `wui-` (e.g., `w3m-modal`, `w3m-button`, `wui-card`, `wui-text`, `wui-icon`, `wui-flex`). These are standard components provided by the Web3Modal HTML/Lit library. It also references WalletConnect-specific logic for connecting wallets and managing sessions, including API calls to WalletConnect services."
        }
      ]
    },
    {
      "file": "assets/blocks/cryptopay/index.es-fe3b6058.js",
      "occurences": [
        {
          "name": "@walletconnect/universal-provider",
          "motivation": "The code exports `OS as EthereumProvider` which is the structure of the Universal Provider. It uses WalletConnect protocol methods like `wc_sessionPropose`, `wc_sessionSettle` and constants like `R4=\"wss://relay.walletconnect.com\"`. The `Xu` class structure closely matches the `SignClient` from `@walletconnect/sign-client`, upon which the Universal Provider is built. It imports `WalletConnectModal` dynamically."
        },
        {
          "name": "ethers.js (v5)",
          "motivation": "The code includes specific ethers v5 error codes (`fr.errors=Ci`) and logger patterns (`new fr(x3)` where `x3=\"bytes/5.7.0\"`). It uses a `BigNumber` implementation (`Cr=class Pi`) consistent with ethers v5's internal BigNumber. Address utility functions like `oA` (which calls `Kd` for checksumming) and signing key logic (`G_` class using `Vi` which wraps `@noble/secp256k1`) are present. String utilities like `Gh` (utf8ToBytes) and `N0` (hashMessage) which uses the standard Ethereum message prefix (`eA=\" Ethereum Signed Message:\\n\"`) are found."
        },
        {
          "name": "@noble/secp256k1",
          "motivation": "The code utilizes `secp256k1` for cryptographic operations, specifically within the ethers.js signing key logic (`G_` class). The `H_(\"secp256k1\")` call indicates the use of an elliptic curve library, and the structure points towards `@noble/secp256k1` as used by ethers v5."
        },
        {
          "name": "@noble/ed25519",
          "motivation": "The code explicitly uses functions like `Xp.sharedKey` and `Xp.generateKeyPair` which belong to the `@noble/ed25519` library, notably for WalletConnect's internal crypto operations."
        },
        {
          "name": "@noble/hashes (sha256, sha512)",
          "motivation": "The code uses `Tu.SHA256` and includes SHA512 logic (`Ri` class, `V0=Ri`). This suggests the use of hash functions likely from the `@noble/hashes` suite."
        },
        {
          "name": "@noble/hashes (sha3/keccak)",
          "motivation": "The `Lu` function explicitly calculates `keccak_256` using `E3.keccak_256`, where `E3` corresponds to the imported `js-sha3` module, a common Keccak implementation used in Ethereum."
        },
        {
          "name": "@noble/hashes (ripemd160)",
          "motivation": "The code contains logic for `ripemd160` within the `ji` class (`Q0.ripemd160=ji`), indicating its inclusion, likely from the `@noble/hashes` suite."
        },
        {
          "name": "@noble/hashes (sha1)",
          "motivation": "The `Ki` class implements the SHA1 algorithm (`GA=Ki`), suggesting its use, likely from `@noble/hashes`."
        },
        {
          "name": "@noble/ciphers",
          "motivation": "The code uses `Zp.ChaCha20Poly1305` for encryption/decryption within the WalletConnect message encoding/decoding logic (`EE`, `IE` functions)."
        },
        {
          "name": "micro-base / multiformats",
          "motivation": "The presence of classes like `B5` (encoder), `q5` (decoder), `k5` (codec) and the `Ap` constant mapping prefixes like 'z', 'f', 'b' to base encodings (base58btc, base16, base32) indicates the use of a multibase encoding library."
        },
        {
          "name": "js-sha3",
          "motivation": "The bundled code contains comments explicitly mentioning `[js-sha3]{@link https://github.com/emn178/js-sha3}` within the module assigned to `b0`."
        },
        {
          "name": "buffer",
          "motivation": "The code checks for and uses `globalThis.Buffer`, `Buffer.from`, and `Buffer.allocUnsafe`, indicating reliance on the Buffer API, potentially using a polyfill if in a browser environment."
        },
        {
          "name": "unstorage",
          "motivation": "The `W2` function implements a storage interface with methods like `mount`, `getItem`, `setItem`, `removeItem`, `getKeys`, `clear`, mirroring the `unstorage` API. It also uses a key normalization function (`Br`). A memory driver (`Q2`) is also defined."
        },
        {
          "name": "idb-keyval",
          "motivation": "The code uses `indexedDB` via helper functions (`n0`, `ud`, `J2`, `Y2`, `t6`) which correspond to the `idb-keyval` library's API for interacting with IndexedDB. The constant `e6=\"idb-keyval\"` is also present."
        },
        {
          "name": "destr",
          "motivation": "The `Ha` function, which safely parses JSON strings with checks against prototype pollution (`Possible prototype pollution`), matches the implementation of the `destr` library."
        },
        {
          "name": "lodash",
          "motivation": "The code contains a bundled version of Lodash, specifically visible in the `dc.exports` module which implements functions like `isEqual`. The assignment `V6=dc.exports; G6=Wp(V6);` confirms its usage."
        },
        {
          "name": "eventemitter3 / events",
          "motivation": "The code frequently uses `wi.EventEmitter` for event handling across different modules (Relayer, Subscription, Provider), indicating the use of an event emitter library."
        },
        {
          "name": "ws",
          "motivation": "The code conditionally requires 'ws' (`require(\"ws\")`) as a fallback for `WebSocket` in Node.js environments."
        }
      ]
    },
    {
      "file": "assets/blocks/efp/efp.js",
      "occurences": [
        {
          "name": "jQuery",
          "motivation": "The code uses the `$` selector extensively (e.g., `$('#followersList')`, `$(document).on`) and the `$.ajax` method, which are characteristic features of the jQuery library."
        }
      ]
    },
    {
      "file": "assets/js/custom.js",
      "occurences": [
        {
          "name": "jQuery",
          "motivation": "The code uses the `$` symbol extensively for selecting DOM elements (`$(selector)`) and making AJAX requests (`$.ajax`). It also checks `if(typeof $ == 'function')` before using jQuery's tooltip functionality (`$('[data-toggle=\"tooltip\"],[data-tooltip]').tooltip();`)."
        }
      ]
    },
    {
      "file": "assets/js/libraries/Chart.bundle.min.js",
      "occurences": [
        {
          "name": "Chart.js",
          "motivation": "The code contains a header comment `/*! * Chart.js v2.9.4 * https://www.chartjs.org * (c) 2020 Chart.js Contributors * Released under the MIT License */` explicitly stating its name and version. The code structure and function names (e.g., `Chart`, `DatasetController`, `Scale`, various chart types like `bar`, `line`, `doughnut`) are characteristic of the Chart.js library."
        },
        {
          "name": "Moment.js",
          "motivation": "The code includes a bundled version of Moment.js, identifiable by its specific function patterns, internal variables like `a.momentProperties`, and date/time manipulation logic. The comment `a.version=\"2.24.0\"` near the end confirms the presence and version of Moment.js, which is often used by Chart.js for time-related scales."
        }
      ]
    },
    {
      "file": "assets/js/libraries/aos.min.js",
      "occurences": [
        {
          "name": "AOS (Animate On Scroll)",
          "motivation": "```\n- The code is wrapped in a UMD (Universal Module Definition) pattern commonly used by libraries: `!function(e,t){...e.AOS=t()}(this,function(){...})`.\n- It assigns its core functionality to `e.AOS` (where `e` is likely `window`).\n- It uses specific data attributes like `data-aos`, `data-aos-easing`, `data-aos-duration`, etc., for configuration.\n- It adds CSS classes like `aos-init` and `aos-animate` to elements.\n- It defines methods like `init`, `refresh`, and `refreshHard`, which are characteristic of a library's API.\n- The filename `aos.min.js` strongly suggests it's the AOS library.\n```"
        }
      ]
    },
    {
      "file": "assets/js/libraries/bootstrap.min.js",
      "occurences": [
        {
          "name": "Bootstrap",
          "motivation": "The code contains the comment `/*! Bootstrap v4.6.0 (https://getbootstrap.com/) */` at the beginning, and the entire codebase consists of Bootstrap's JavaScript components (Alert, Button, Carousel, Collapse, Dropdown, Modal, Popover, Scrollspy, Tab, Toast, Tooltip)."
        },
        {
          "name": "jQuery",
          "motivation": "The code explicitly checks for jQuery's presence (`d.jQueryDetection()`) and throws an error if it's missing or the version is incompatible. It uses `o.default` extensively, which is assigned the imported `jquery` module, for DOM manipulation and event handling (e.g., `o.default(this._element)`, `o.default(document).on(...)`). The UMD header also lists `require(\"jquery\")`."
        },
        {
          "name": "Popper.js",
          "motivation": "The code checks for Popper.js's presence within components that require positioning, such as Dropdown and Tooltip (`if(\"undefined\"==typeof a.default)throw new TypeError(\"Bootstrap's dropdowns require Popper (https://popper.js.org)\")`). It uses `a.default` (assigned the imported `popper.js` module) to create Popper instances (`this._popper=new a.default(...)`). The UMD header also lists `require(\"popper.js\")`."
        }
      ]
    },
    {
      "file": "assets/js/libraries/clipboard.min.js",
      "occurences": [
        {
          "name": "clipboard.js",
          "motivation": "The code contains a header comment `/*! * clipboard.js v2.0.4 * https://zenorocha.github.io/clipboard.js */` and exports a `ClipboardJS` object (`exports.ClipboardJS=e():t.ClipboardJS=e()`). The code structure and functionality align with the clipboard.js library's purpose of handling copy/cut actions."
        }
      ]
    },
    {
      "file": "assets/js/libraries/cookieconsent.js",
      "occurences": [
        {
          "name": "CookieConsent",
          "motivation": "The code includes a header comment explicitly stating `CookieConsent v2.8.0`, its GitHub URL, author, and license. The entire script appears to be the implementation of this library."
        }
      ]
    },
    {
      "file": "assets/js/libraries/daterangepicker.min.js",
      "occurences": [
        {
          "name": "jQuery",
          "motivation": "The code uses the `$` variable extensively for DOM manipulation and event handling, which is the standard alias for jQuery. It also checks for `window.jQuery` and uses `require('jquery')` in Node/Browserify environments within its UMD wrapper. The code defines a jQuery plugin using `$.fn.daterangepicker`."
        },
        {
          "name": "Moment.js",
          "motivation": "The code explicitly requires or expects `moment` via AMD (`define(['moment', ...])`), CommonJS (`require('moment')`), or browser globals (`root.moment`). It heavily utilizes `moment()` for date creation, manipulation (`add`, `subtract`, `startOf`, `endOf`), formatting (`format`), and comparison (`isBefore`, `isAfter`, `isSame`)."
        },
        {
          "name": "Date Range Picker",
          "motivation": "The code defines a `DateRangePicker` class and attaches it as a jQuery plugin `$.fn.daterangepicker`. The file name (`daterangepicker.min.js`) and the header comment (`@version: 3.1`, `@author: Dan Grossman`, `@website: http://www.daterangepicker.com/`) clearly identify it as the Date Range Picker library."
        }
      ]
    },
    {
      "file": "assets/js/libraries/fontawesome-all.min.js",
      "occurences": [
        {
          "name": "Font Awesome",
          "motivation": "The code contains a header comment: `/*!\n * Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com\n * License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)\n */`. It also includes definitions for icon data structures typical of Font Awesome."
        },
        {
          "name": "Font Awesome",
          "motivation": "The code defines icon data (size, unicode, SVG path) in arrays (e.g., `[448,512,[],\"f0fc\",...]`) and registers these icons under prefixes like `fas`, `far`, etc. within a global structure (`Y.styles`). It also includes CSS rules specific to Font Awesome classes (`.svg-inline--fa`, `.fa-lg`, `.fa-spin`, etc.). The filename `fontawesome-all.min.js` further confirms this."
        }
      ]
    },
    {
      "file": "assets/js/libraries/fontawesome-brands.modified.js",
      "occurences": [
        {
          "name": "Font Awesome Brands",
          "motivation": "The code contains a header comment `/*!\\n * Font Awesome Free 5.13.1 by @fontawesome - https://fontawesome.com\\n * License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)\\n */` and defines icon data in a format typical for Font Awesome (`defineIcons('fab', icons)`)."
        }
      ]
    },
    {
      "file": "assets/js/libraries/fontawesome-iconpicker.min.js",
      "occurences": [
        {
          "name": "jQuery",
          "motivation": "The code uses a UMD pattern `!function(e){...}(jQuery)` which explicitly depends on jQuery. It extensively uses `z(...)` and `l(...)` which are aliases for the jQuery function within the script's scope."
        },
        {
          "name": "jQuery UI (Position utility)",
          "motivation": "The code defines and uses `z.ui.pos` and `z.fn.pos` for positioning elements, specifically the icon picker popover (`this.popover.pos(...)`). This mimics or directly utilizes the jQuery UI Position utility."
        },
        {
          "name": "Font Awesome Icon Picker",
          "motivation": "The code header explicitly states `/*! Font Awesome Icon Picker ... */`. The core functionality is defining a jQuery plugin `l.fn.iconpicker = function(a){...}`."
        },
        {
          "name": "Font Awesome (implied data)",
          "motivation": "The plugin is named 'Font Awesome Icon Picker' and the `o.defaultOptions.icons` array contains a large dataset of icon definitions with CSS classes corresponding to Font Awesome icons (e.g., `fab fa-500px`, `fas fa-ad`). The purpose of the library is to select these icons."
        }
      ]
    },
    {
      "file": "assets/js/libraries/fontawesome-solid.min.js",
      "occurences": [
        {
          "name": "Font Awesome Solid",
          "motivation": "The code header explicitly states `/*! * Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com */`. The code structure involves defining icon data (SVG paths and metadata) within an object `L` and using functions like `V` to register these icons under a namespace (`___FONT_AWESOME___`) and style prefix (`fas`). The variable `L` contains a large dictionary mapping icon names (e.g., `\"address-book\"`, `\"adjust\"`) to arrays containing SVG path data and metadata, characteristic of an icon library."
        }
      ]
    },
    {
      "file": "assets/js/libraries/fontawesome.min.js",
      "occurences": [
        {
          "name": "Font Awesome",
          "motivation": "The code begins with a comment block explicitly stating `/*! Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com */`. It also contains numerous references to Font Awesome specific concepts like `fontawesome`, `fa-`, `svg-inline--fa`, icon prefixes (`fas`, `far`, `fab`, etc.), and DOM manipulation logic characteristic of Font Awesome's JavaScript SVG replacement."
        }
      ]
    },
    {
      "file": "assets/js/libraries/html5-qrcode.min.js",
      "occurences": [
        {
          "name": "html5-qrcode",
          "motivation": "The file name is `html5-qrcode.min.js` and the code defines a global variable `__Html5QrcodeLibrary__`. The code contains classes like `Html5Qrcode`, `Html5QrcodeScanner` and methods related to QR code scanning using the camera (`getCameras`, `start`, `stop`, `scanFile`) or image elements/URLs."
        },
        {
          "name": "ZXing-JS",
          "motivation": "The code includes many classes and constants characteristic of the ZXing library (or a JavaScript port/wrapper), such as `Result`, `BinaryBitmap`, `HybridBinarizer`, `MultiFormatReader`, `QRCodeReader`, `AztecReader`, `PDF417Reader`, `BarcodeFormat`, `DecodeHintType`, `ResultPoint`, `NotFoundException`, `FormatException`, `ChecksumException`, specific algorithm implementations (like Reed-Solomon, finder patterns), and error correction levels (`QRCodeDecoderErrorCorrectionLevel`). It appears to be bundled within the `html5-qrcode` library."
        }
      ]
    },
    {
      "file": "assets/js/libraries/jquery-qrcode.min.js",
      "occurences": [
        {
          "name": "jquery-qrcode",
          "motivation": "The code header contains `/*! jquery-qrcode v0.18.0 - https://larsjung.de/jquery-qrcode/ */`. It also references `window.jQuery` and extends the jQuery prototype with `w.fn.qrcode = t.exports = function(t){...}` which is characteristic of a jQuery plugin."
        }
      ]
    },
    {
      "file": "assets/js/libraries/jquery.min.js",
      "occurences": [
        {
          "name": "jQuery",
          "motivation": "The code contains the comment `/*! jQuery v3.5.1 | (c) JS Foundation and other contributors | jquery.org/license */` at the beginning. It defines the core jQuery function `S` and assigns it to `C.jQuery` and `C.$` (`C` is typically `window`). The `S.fn.jquery` property is set to the version string `'3.5.1'`."
        }
      ]
    },
    {
      "file": "assets/js/libraries/jquery.slim.min.js",
      "occurences": [
        {
          "name": "jQuery Slim",
          "motivation": "The code contains a header comment `/*! jQuery v3.6.0 -ajax,-ajax/jsonp,-ajax/load,-ajax/script,-ajax/var/location,-ajax/var/nonce,-ajax/var/rquery,-ajax/xhr,-manipulation/_evalUrl,-deprecated/ajax-event-alias,-effects,-effects/Tween,-effects/animatedSelector | (c) OpenJS Foundation and other contributors | jquery.org/license */`. This explicitly identifies the library as jQuery version 3.6.0. The list of excluded modules (`-ajax`, `-effects`, etc.) corresponds to the jQuery Slim build."
        }
      ]
    },
    {
      "file": "assets/js/libraries/moment-timezone-with-data-10-year-range.min.js",
      "occurences": [
        {
          "name": "Moment.js",
          "motivation": "The code explicitly requires `moment` via `require(\"moment\")` in a CommonJS environment and checks for `c.moment` in a browser environment. It also checks the version of the `moment` object (`b.version`) and throws an error if it's missing or too old, stating `Moment Timezone requires Moment.js`."
        },
        {
          "name": "Moment Timezone",
          "motivation": "The code defines functions and data structures specifically for handling timezones (e.g., `zones`, `links`, `countries` arrays, `b.tz`, `R.zone`, `R.guess`, `P.tz`). The error message `Moment Timezone requires Moment.js` and the structure heavily align with the Moment Timezone library's source code. The filename `moment-timezone-with-data-10-year-range.min.js` also clearly indicates this library."
        }
      ]
    },
    {
      "file": "assets/js/libraries/moment.min.js",
      "occurences": [
        {
          "name": "Moment.js",
          "motivation": "The code contains explicit comments identifying it as `//! moment.js`, `//! version : 2.18.1`, `//! authors : Tim Wood, Iskren Chernev, Moment.js contributors`, `//! license : MIT`, and `//! momentjs.com`. It also uses functions and patterns characteristic of the Moment.js date/time library (e.g., `moment`, `localeData`, `format`, `add`, `subtract`)."
        }
      ]
    },
    {
      "file": "assets/js/libraries/pickr.min.js",
      "occurences": [
        {
          "name": "Pickr",
          "motivation": "The code header contains the comment `/*! Pickr 1.8.2 MIT | https://github.com/Simonwep/pickr */` which explicitly identifies the library and its version. The code defines a class `L` which is later assigned to `t.Pickr = e()` and `exports.Pickr=e()`, confirming it exports the Pickr object/class."
        }
      ]
    },
    {
      "file": "assets/js/libraries/popper.min.js",
      "occurences": [
        {
          "name": "Popper.js",
          "motivation": "The code includes a copyright notice `Copyright (C) Federico Zivolo 2017` and explicitly defines `e.Popper=t()` at the beginning. The name `Popper.js` is mentioned in comments within the `computeStyle` modifier regarding `gpuAcceleration` deprecation. The overall structure and functionality (calculating element positions, handling modifiers like `flip`, `offset`, `preventOverflow`, `arrow`) are characteristic of Popper.js, a library for positioning tooltips and popovers."
        }
      ]
    },
    {
      "file": "assets/js/libraries/quill.min.js",
      "occurences": [
        {
          "name": "Quill Editor",
          "motivation": "```markdown\nThe code contains a header comment explicitly stating the library name and version:\n/*!\n * Quill Editor v1.3.7\n * https://quilljs.com/\n * Copyright (c) 2014, Jason Chen\n * Copyright (c) 2013, salesforce.com\n */\nAdditionally, the global object `Quill` is exported: `\"object\"==typeof exports?exports.Quill=e():t.Quill=e()}`.\n```"
        },
        {
          "name": "Parchment",
          "motivation": "```markdown\nParchment is Quill's document model library. Although bundled within Quill, it's a distinct core component. The code makes numerous references to Parchment concepts like Blots, Scope, Attributors, and registration functions related to it. For example, `ParchmentError` is defined, and `parchment:w.default` is listed in `S.imports`.\n```"
        },
        {
          "name": "Delta",
          "motivation": "```markdown\nDelta is Quill's format for representing document changes. The code defines and extensively uses a `Delta` class (e.g., `var s=function(t){...};s.prototype.insert=function(t,e){...}` matching the Delta structure) for managing content and changes. It's also listed in `S.imports` as `delta:d.default`.\n```"
        }
      ]
    },
    {
      "file": "assets/js/libraries/sortable.js",
      "occurences": [
        {
          "name": "Sortable.js",
          "motivation": "The code includes a header comment `/**! * Sortable 1.10.0-rc3 ... */` and defines a global `Sortable` object/class. The code structure and functionality are consistent with the Sortable.js library for drag-and-drop lists."
        }
      ]
    },
    {
      "file": "assets/js/libraries/splide.min.js",
      "occurences": [
        {
          "name": "Splide.js",
          "motivation": "markdown\n* The code contains a prominent comment: `/*! Splide.js Version : 4.1.2 License : MIT Copyright: 2022 Naotoshi Fujita */`.\n* It exports a global variable `Splide` at the end: `(n=\"undefined\"!=typeof globalThis?globalThis:n||self).Splide=t();`\n* The functionality within the code (DOM manipulation for sliders/carousels, event handling, classes like `splide__slide`, `splide__track`, etc.) is characteristic of the Splide.js library."
        }
      ]
    },
    {
      "file": "assets/js/nft-card.min.js",
      "occurences": [
        {
          "name": "Web3.js",
          "motivation": "The code contains assignments like `window.Web3 = r` and instantiation like `this.web3 = new s(e)`, `this.web3ReadOnly = new s(r)`, and `new s.providers.HttpProvider(...)`. It also uses web3-specific methods like `web3.eth.contract`, `web3.eth.getCode`, `web3.eth.estimateGas`, `web3.eth.sendTransaction`, `web3.toWei`, `web3.isAddress`."
        },
        {
          "name": "OpenSea SDK (OpenSeaPort / OpenSeaAPI)",
          "motivation": "The code includes class definitions and instantiations like `t.OpenSeaPort=r.OpenSeaPort`, `this.seaport=new fe.OpenSeaPort(...)`, `this.api=new d.OpenSeaAPI(...)`, and makes calls to methods like `this.api.getAsset`, `this.api.postOrder`, `this.seaport.fulfillOrder`."
        },
        {
          "name": "Lodash",
          "motivation": "The minified code includes a large block starting with a Lodash license comment: `/** * @license * Lodash <https://lodash.com/> ... */` and uses common Lodash functions like `pickBy`, `includes`, `uniqBy`, `sortBy`, `isNull`, `isUndefined`, `isObject`, `isFunction`, `map`, `filter` (referenced via variables like `l=n(3)` where `n(3)` corresponds to Lodash)."
        },
        {
          "name": "lit-html / lit-element",
          "motivation": "The code contains multiple `@license Copyright (c) 2017 The Polymer Project Authors...` comments typical of lit-* libraries. It defines classes extending `HTMLElement` (referenced as `J` or `se`), uses decorators like `@Y(\"nft-card\")` and `@Q({...})`, and templating functions like `j` (likely `html`) and `ae` (likely `css`), characteristic of lit-element and lit-html."
        },
        {
          "name": "Buffer (Polyfill)",
          "motivation": "The code includes a comment `/*! * The buffer module from node.js, for the browser. ... */` and uses `Buffer.from`, `Buffer.isBuffer`, indicating the inclusion of a Buffer polyfill for browser environments."
        },
        {
          "name": "bignumber.js",
          "motivation": "The code includes license comments `/*! bignumber.js v4.1.0 https://github.com/MikeMcl/bignumber.js/LICENCE */` and uses `new c.BigNumber(...)` for handling large numbers."
        },
        {
          "name": "axios",
          "motivation": "The code contains references suggesting the use of axios, such as `c.Axios=i`, `c.create`, `c.Cancel`, `c.CancelToken`, `c.isCancel`. Axios is likely used internally by the `OpenSeaAPI` for making HTTP requests."
        },
        {
          "name": "elliptic",
          "motivation": "The code includes references to `new (0,n(127).ec)(\"secp256k1\")` and uses various methods associated with elliptic curve cryptography like `.mul`, `.add`, `.validate`, `.sign`, `.verify`, `.recoverPubKey`, suggesting the use of the `elliptic` library."
        },
        {
          "name": "js-sha3",
          "motivation": "The code contains the license header `/*! [js-sha3]{@link https://github.com/emn178/js-sha3} ... */` and references hashing functions like `keccak256` and `sha3`."
        }
      ]
    },
    {
      "file": "index.html#inline-script-2",
      "occurences": [
        {
          "name": "Splide.js",
          "motivation": "The code initializes a Splide carousel using `new Splide('.splide_51983', {...})` and calls its `mount()` method (`splide.mount()`), which are standard patterns for using the Splide.js library."
        }
      ]
    },
    {
      "file": "index.html#inline-script-3",
      "occurences": [
        {
          "name": "Splide.js",
          "motivation": "The code explicitly initializes a new Splide object using `new Splide('.splide_46675', {...})` and calls its `mount()` method, which are standard practices for using the Splide.js carousel library."
        }
      ]
    }
  ],
  "urls": [],
  "ethereum": [
    {
      "file": "assets/blocks/cryptopay/index-0f05fef0.js",
      "occurences": [
        {
          "count": 1
        }
      ]
    },
    {
      "file": "assets/blocks/cryptopay/index-f5ba1ec2.js",
      "occurences": [
        {
          "count": 3
        }
      ]
    },
    {
      "file": "assets/js/nft-card.min.js",
      "occurences": [
        {
          "count": 4
        }
      ]
    }
  ],
  "fallbacks": []
}