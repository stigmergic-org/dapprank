{
  "version": 2,
  "contentHash": "bafybeiamuzzvjgr72ogmtn4jsrd5x64zc3qu4nhf2bdokxk7cdiywr7iwq",
  "timestamp": 1748944229,
  "blockNumber": 22623341,
  "rootMimeType": "inode/directory",
  "totalSize": 1826493,
  "favicon": "favicon.png",
  "title": "",
  "distributionPurity": {
    "externalScripts": [],
    "externalMedia": []
  },
  "networkingPurity": [
    {
      "file": "_app/immutable/chunks/CGdLpSCZ.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://gateway.ipfs.io/ipfs/"
          ],
          "library": "ethers",
          "type": "auxiliary",
          "motivation": "The `FetchRequest` class, part of the ethers.js library, includes logic to handle `ipfs://` URIs. It transforms these URIs into HTTP URLs using a gateway, with `https://gateway.ipfs.io/ipfs/` being the default. The transformed URL is then used in a `fetch` call made by the internal `createGetUrl` function."
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.ankr.com/",
            "https://*.alchemyapi.io/",
            "https://*.core.chainstack.com/",
            "https://cloudflare-eth.com/",
            "https://*.infura.io/",
            "https://*.quiknode.pro/"
          ],
          "library": "ethers",
          "type": "rpc",
          "motivation": "Provider classes within ethers.js such as `AnkrProvider`, `AlchemyProvider`, `ChainstackProvider`, `CloudflareProvider`, `InfuraProvider`, and `QuickNodeProvider` construct specific URLs for Ethereum RPC endpoints. These URLs are based on the chosen network and often an API key. These providers utilize the `JsonRpcProvider`, which in turn uses `FetchRequest` (employing `fetch`) to make RPC calls to these configured endpoints. The URLs listed are patterns or base domains derived from the implementations of these provider classes."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.etherscan.io/api"
          ],
          "library": "ethers",
          "type": "auxiliary",
          "motivation": "The `EtherscanProvider` class in ethers.js constructs URLs to interact with the Etherscan API (e.g., `https://api.etherscan.io/api?module=...`). These calls are made using the internal `fetch` mechanism (via `FetchRequest`) for functionalities like fetching contract ABIs or transaction history."
        }
      ]
    }
  ],
  "libraryUsage": [
    {
      "file": "_app/immutable/chunks/CGdLpSCZ.js",
      "occurences": [
        {
          "name": "ethers",
          "motivation": "The code contains numerous classes, functions, and patterns characteristic of the ethers.js library. This includes `AbstractProvider`, `JsonRpcProvider`, `BrowserProvider`, `SigningKey`, `Transaction`, `AbiCoder`, `Interface`, `HDNodeWallet`, `Mnemonic`, `Wallet`, `FetchRequest`, `FetchResponse`, various cryptographic functions (keccak256, sha256, secp256k1 operations), utility functions for encoding/decoding data (hexlify, getBytes), and a version string `version$1=\"6.13.7\"` which corresponds to an ethers.js version. Specific provider classes like `AnkrProvider`, `AlchemyProvider`, `InfuraProvider`, `EtherscanProvider` are also defined, all ofwhich are part of or built upon ethers.js."
        },
        {
          "name": "siwe",
          "motivation": "The code references `siweExports.SiweMessage` and uses classes like `SiweMessage`. This indicates the usage of the Sign-In with Ethereum (SIWE) library for EIP-4361 message handling."
        }
      ]
    },
    {
      "file": "_app/immutable/chunks/CMk4UJ8g.js",
      "occurences": [
        {
          "name": "Svelte",
          "motivation": "The code includes several strong indicators of Svelte usage:\n1. Initialization of a global `window.__svelte` object: `(C=window.__svelte??(window.__svelte={})).v??(C.v=new Set)).add(ve)` where `ve` is `\"5\"`, suggesting Svelte version 5.\n2. Imports of numerous minified functions (e.g., `h`, `a5 as b`, `a6 as H`, `L`, `N`, `F`, `x`, `B`, `j`, `A`, `T`, `S`, `ae`, `re`, `Ne`) from a local chunk (`./lG7z3RZq.js`). These functions and their usage patterns are characteristic of Svelte's runtime library, handling tasks like component creation, DOM manipulation, reactivity, lifecycle management, and event handling.\n3. Specific Svelte patterns are visible, such as the `B` function (likely for mounting components) which accepts `target`, `anchor`, `props`, `events`, `context`, and `intro` arguments. The `j` function, wrapping calls with `L(null), N(null)` and restoring context, is typical for Svelte's reactive updates and effect management. The `Ne` function and `D` (a `WeakMap`) suggest component destruction and instance tracking mechanisms."
        }
      ]
    },
    {
      "file": "_app/immutable/chunks/lG7z3RZq.js",
      "occurences": [
        {
          "name": "Svelte",
          "motivation": "The code contains numerous error messages that link directly to `svelte.dev` (e.g., `\"https://svelte.dev/e/effect_in_teardown\"`, `\"https://svelte.dev/e/hydration_failed\"`, `\"https://svelte.dev/e/props_invalid_value\"`). Additionally, the code's structure, featuring many concise internal functions (like `k`, `D`, `L`, `V`, `p`, `h`, `we`, `ye`), extensive use of `Symbol` for state management (e.g., `Symbol(\"$state\")`, `Symbol(\"legacy props\")`), and a sophisticated reactivity system (involving `queueMicrotask`, dependency tracking with functions like `G`, `pt`, `dt`, and effect management with functions like `V`, `Dt`, `Mn`), is characteristic of Svelte's compiled output and its core runtime. The file path `_app/immutable/chunks/` is also common in SvelteKit applications."
        }
      ]
    },
    {
      "file": "index.html#inline-script-1",
      "occurences": [
        {
          "name": "SvelteKit",
          "motivation": "The code uses dynamic `import()` statements to load modules named `start.[hash].js` and `app.[hash].js` from a `/_app/immutable/entry/` path. It then calls `kit.start(app, element)`. This pattern, along with the variable `__sveltekit_1ql115c`, is characteristic of how a SvelteKit application initializes on the client-side."
        }
      ]
    }
  ],
  "urls": [],
  "ethereum": [
    {
      "file": "_app/immutable/chunks/CGdLpSCZ.js",
      "occurences": [
        {
          "count": 2
        }
      ]
    }
  ],
  "fallbacks": []
}