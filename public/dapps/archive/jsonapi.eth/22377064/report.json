{
  "version": 2,
  "contentHash": "bafybeicn7yegbpc4l2lcazaa3czed6p6nnldsluizam6nrfphu6rujs37m",
  "timestamp": 1745958097,
  "blockNumber": 22377064,
  "rootMimeType": "inode/directory",
  "totalSize": 324617,
  "favicon": "namesys.svg",
  "title": "JSONAPI.ETH Resolver",
  "distributionPurity": {
    "externalScripts": [],
    "externalMedia": []
  },
  "networkingPurity": [
    {
      "file": "assets/ccip-BEXNofod.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "<url_from_contract_error_containing_{sender}_and_{data}_placeholders>"
          ],
          "library": "otherwise",
          "type": "auxiliary",
          "motivation": "The `ccipRequest` function (`T`) iterates through an array of URLs (`a`) obtained from the `OffchainLookup` error data. For each URL (`t`), it makes a `fetch` request. The URL used in the fetch call is dynamically constructed by replacing placeholders: `t.replace(\"{sender}\", r.toLowerCase()).replace(\"{data}\", c)`. The request method is determined based on whether the URL contains `{data}` ('GET' if it does, 'POST' otherwise). For POST requests, it sends a JSON body containing `data` and `sender`. These URLs point to CCIP-Read gateways specified by the contract that reverted, hence the type is 'auxiliary'."
        }
      ]
    },
    {
      "file": "assets/index-DIUj9XRf.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "<MODULE_PRELOAD_HREF>"
          ],
          "library": "Vite Module Preloader",
          "type": "self",
          "motivation": "The initial IIFE fetches resources specified in `<link rel=\"modulepreload\">` tags using `fetch(s.href, o)`. These URLs (`s.href`) are dynamically determined by the HTML structure and typically point to JavaScript modules hosted on the same domain."
        },
        {
          "method": "fetch",
          "urls": [
            "<RPC_URL>",
            "https://eth.merkle.io"
          ],
          "library": "viem",
          "type": "rpc",
          "motivation": "The function `rd` wraps the native `fetch` API (`fetch(g.url??e, g)`) to make JSON-RPC requests. This function is used by the viem client's HTTP transport (`sd` function). The URL (`e`) is typically configured when creating the viem client, often pointing to an Ethereum RPC endpoint. The default mainnet RPC URL defined in the code is `https://eth.merkle.io`."
        },
        {
          "method": "fetch",
          "urls": [
            "<ENS_AVATAR_URI>"
          ],
          "library": "viem (ENS Avatar Logic)",
          "type": "auxiliary",
          "motivation": "The `pd` function uses `fetch(e, {method:\"HEAD\"})` to check if a URI points to a valid image resource, typically as part of resolving an ENS avatar. The URL `e` is derived dynamically from ENS avatar records or metadata (could be HTTP, IPFS gateway, Arweave gateway URLs)."
        },
        {
          "method": "fetch",
          "urls": [
            "<ENS_METADATA_URI>"
          ],
          "library": "viem (ENS Avatar Logic)",
          "type": "auxiliary",
          "motivation": "The `bd` function uses `fetch(t).then(s=>s.json())` to retrieve JSON metadata from a URI, often encountered when resolving NFT-based ENS avatars (e.g., ERC721 `tokenURI`, ERC1155 `uri`). The URL `t` is derived dynamically."
        }
      ]
    }
  ],
  "libraryUsage": [
    {
      "file": "assets/ccip-BEXNofod.js",
      "occurences": [
        {
          "name": "viem",
          "motivation": "The code imports several functions (`k`, `L`, `O`, `E`, `b`, `x`, `m`, `y`, `l`, `h`) from a bundled module (`./index-DIUj9XRf.js`). \n- `k` is used with an ABI (`[$]`) to decode error data (`k({data:o,abi:[$]})`), similar to viem's `decodeErrorResult`.\n- `L` appears to make a blockchain call (`L(c, {...})`), akin to viem's `call`.\n- `O` and `E` are used for encoding data (`O([u,E(...)])`), resembling viem's `concatHex` and `encodeAbiParameters`.\n- `b` compares addresses (`b(i,t)`), like viem's `isAddressEqual`.\n- `x` checks for hex strings (`x(e)`), like viem's `isHex`.\n- Error classes (`M`, `R`, `S`) extend a base error class `l` and another error `h` is used, consistent with viem's custom error handling (`BaseError`, `HttpRequestError`).\n- The overall context involves handling an `OffchainLookup` error (EIP-3668), decoding ABI-encoded data, and interacting with blockchain state, which are core functionalities provided by Ethereum libraries like viem."
        }
      ]
    },
    {
      "file": "assets/index-DIUj9XRf.js",
      "occurences": [
        {
          "name": "viem",
          "motivation": "The code includes the version string `viem@2.25.0` and uses patterns characteristic of viem, such as `e.request({method:\"...\")`, `L(e, mn, \"getBlockNumber\")`, `L(e, jr, \"getTransactionReceipt\")`, `L(e, xs, \"estimateGas\")`, `L(e, Kn, \"call\")`, specific error classes like `RpcRequestError`, `HttpRequestError`, `CallExecutionError`, `ContractFunctionExecutionError`, and utility functions like `M` (likely `toHex`), `Se` (likely `hexToNumber`), `Gi` (likely `formatTransaction`), `Hd` (likely `formatTransactionReceipt`), `Ne` (likely `formatLog`), etc. It also defines a default chain configuration `Kh` (Ethereum mainnet) with RPC URL `https://eth.merkle.io`."
        },
        {
          "name": "abitype",
          "motivation": "The code includes the version string `abitype@1.0.8` and contains numerous functions and classes related to ABI parsing and type checking, such as `parseAbiItem`, `formatAbiItem`, `AbiTypeError`, `InvalidAbiItemError`, etc., matching the functionality of the abitype library."
        },
        {
          "name": "@noble/hashes",
          "motivation": "The code includes comments indicating the origin `/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */` and implements hashing algorithms like Keccak (used in `Ai=Zu(1,136,256/8);function Z(e,t){...Ai(...)` which likely corresponds to `keccak256`) and SHA256 (bl class likely corresponds to `sha256`), consistent with the noble-hashes library, often used as a dependency by libraries like viem."
        },
        {
          "name": "@noble/curves",
          "motivation": "The code includes comments indicating the origin `/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */` and implements elliptic curve cryptography operations, specifically mentioning `secp256k1` (e.g., `import { secp256k1 } from \"./noble-curves.js\"` is implied by the dynamic import structure, and `Fh=Object.freeze(...)secp256k1:Hs`) which is characteristic of the noble-curves library, often used as a dependency by libraries like viem."
        },
        {
          "name": "Vite Module Preloader",
          "motivation": "The initial IIFE in the code checks for `link[rel=modulepreload]` support and uses `fetch` to preload modules if necessary. The dynamic import function `Li` uses `new Event(\"vite:preloadError\")`. This pattern is typical of the module preloading shim used by the Vite build tool."
        }
      ]
    }
  ],
  "urls": [],
  "ethereum": [],
  "fallbacks": []
}