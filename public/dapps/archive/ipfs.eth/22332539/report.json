{
  "version": 2,
  "contentHash": "bafybeiddamod5xk4uipjz52xodu4z62ul5xk6lzo3qaiz32yc3t6vd7xqa",
  "timestamp": 1745427204,
  "blockNumber": 22332539,
  "rootMimeType": "inode/directory",
  "totalSize": 10022690,
  "favicon": "favicon.png",
  "title": "IPFS is the Distributed Web",
  "distributionPurity": {
    "externalScripts": [
      {
        "file": "blog/index.html",
        "occurences": [
          {
            "type": "script",
            "url": "https://camp.ipfs.io/ribbon.min.js"
          },
          {
            "type": "script",
            "url": "https://www.google-analytics.com/analytics.js"
          }
        ]
      },
      {
        "file": "contact-ipfs/index.html",
        "occurences": [
          {
            "type": "script",
            "url": "https://camp.ipfs.io/ribbon.min.js"
          },
          {
            "type": "script",
            "url": "https://www.google-analytics.com/analytics.js"
          }
        ]
      },
      {
        "file": "docs/index.html",
        "occurences": [
          {
            "type": "script",
            "url": "https://camp.ipfs.io/ribbon.min.js"
          },
          {
            "type": "script",
            "url": "https://www.google-analytics.com/analytics.js"
          }
        ]
      },
      {
        "file": "index.html",
        "occurences": [
          {
            "type": "script",
            "url": "https://camp.ipfs.io/ribbon.min.js"
          },
          {
            "type": "script",
            "url": "https://www.google-analytics.com/analytics.js"
          }
        ]
      },
      {
        "file": "legal/index.html",
        "occurences": [
          {
            "type": "script",
            "url": "https://camp.ipfs.io/ribbon.min.js"
          },
          {
            "type": "script",
            "url": "https://www.google-analytics.com/analytics.js"
          }
        ]
      },
      {
        "file": "media/index.html",
        "occurences": [
          {
            "type": "script",
            "url": "https://camp.ipfs.io/ribbon.min.js"
          },
          {
            "type": "script",
            "url": "https://www.google-analytics.com/analytics.js"
          }
        ]
      },
      {
        "file": "team/index.html",
        "occurences": [
          {
            "type": "script",
            "url": "https://camp.ipfs.io/ribbon.min.js"
          },
          {
            "type": "script",
            "url": "https://www.google-analytics.com/analytics.js"
          }
        ]
      }
    ],
    "externalMedia": [
      {
        "file": "media/index.html",
        "occurences": [
          {
            "type": "iframe",
            "url": "https://www.youtube.com/embed/8CMxDNuuAiQ"
          },
          {
            "type": "iframe",
            "url": "https://www.youtube.com/embed/HUVmypx9HGI"
          }
        ]
      }
    ]
  },
  "networkingPurity": [
    {
      "file": "docs/examples/example-viewer/example#inline-script-1",
      "occurences": [
        {
          "method": "XMLHttpRequest",
          "urls": [
            "<value from window.location.hash>"
          ],
          "library": "jQuery",
          "type": "self",
          "motivation": "The code uses `$.get(path, ...)` which is a jQuery AJAX function that typically uses XMLHttpRequest internally. The `path` variable is derived directly from `window.location.hash.substring(1)`. Since the hash usually represents a fragment identifier for the current document or a relative path, `$.get` fetches this path relative to the current domain. The default example hash `/ipfs/QmTDMoVqvyBkNMRhzvukTDznntByUNDwyNdSfV8dZ3VKRC/readme.md` points to a relative path."
        }
      ]
    },
    {
      "file": "docs/examples/example-viewer/lib/jquery.min.js",
      "occurences": [
        {
          "method": "XMLHttpRequest",
          "urls": [],
          "library": "jQuery",
          "type": "auxiliary",
          "motivation": "jQuery's `$.ajax` function (and its wrappers like `$.get`, `$.post`, `$.getJSON`, `.load()`) uses `XMLHttpRequest` (or `ActiveXObject` for older IE versions) internally to make network requests. Helper functions `ch()` attempts `new a.XMLHttpRequest` and `ci()` attempts `new a.ActiveXObject(\"Microsoft.XMLHTTP\")`. The `f.ajax` function utilizes `f.ajaxSettings.xhr()` which calls these helpers. While the library provides the mechanism for these calls, the specific URLs are determined by the arguments passed to these functions by the consuming application code, not hardcoded within the library itself. Therefore, no specific URLs from *this* codebase are listed."
        }
      ]
    },
    {
      "file": "docs/examples/markdown-viewer/lib/jquery.min.js",
      "occurences": [
        {
          "method": "XMLHttpRequest",
          "urls": [],
          "library": "jQuery",
          "type": "auxiliary",
          "motivation": "jQuery's `$.ajax` function (and its wrappers like `$.get`, `$.post`, `$.getJSON`, `.load()`) uses `XMLHttpRequest` (or `ActiveXObject` for older IE versions) internally to make network requests. Helper functions `ch()` attempts `new a.XMLHttpRequest` and `ci()` attempts `new a.ActiveXObject(\"Microsoft.XMLHTTP\")`. The `f.ajax` function utilizes `f.ajaxSettings.xhr()` which calls these helpers. While the library provides the mechanism for these calls, the specific URLs are determined by the arguments passed to these functions by the consuming application code, not hardcoded within the library itself. Therefore, no specific URLs from *this* codebase are listed."
        }
      ]
    },
    {
      "file": "docs/examples/markdown-viewer/mdown#inline-script-1",
      "occurences": [
        {
          "method": "XMLHttpRequest",
          "urls": [
            "sample.md"
          ],
          "library": "jQuery",
          "type": "self",
          "motivation": "The code uses `$.get(path, ...)` to fetch content. `$.get` is a jQuery function that uses `XMLHttpRequest` internally. The `path` variable is derived from `window.location.hash`. If the hash is empty initially, the code sets `window.location.hash = \"#sample.md\"` and reloads the page, leading to `$.get` being called with `sample.md` as the path. Other relative paths based on the hash value can also be fetched."
        }
      ]
    },
    {
      "file": "docs/examples/play/lib/jquery.min.js",
      "occurences": [
        {
          "method": "XMLHttpRequest",
          "urls": [],
          "library": "jQuery",
          "type": "auxiliary",
          "motivation": "jQuery's `$.ajax` function (and its wrappers like `$.get`, `$.post`, `$.getJSON`, `.load()`) uses `XMLHttpRequest` (or `ActiveXObject` for older IE versions) internally to make network requests. Helper functions `ch()` attempts `new a.XMLHttpRequest` and `ci()` attempts `new a.ActiveXObject(\"Microsoft.XMLHTTP\")`. The `f.ajax` function utilizes `f.ajaxSettings.xhr()` which calls these helpers. While the library provides the mechanism for these calls, the specific URLs are determined by the arguments passed to these functions by the consuming application code, not hardcoded within the library itself. Therefore, no specific URLs from *this* codebase are listed."
        }
      ]
    },
    {
      "file": "docs/examples/play/lib/video.js",
      "occurences": [
        {
          "method": "XMLHttpRequest",
          "urls": [
            "[dynamic track src]"
          ],
          "library": "Video.js",
          "type": "auxiliary",
          "motivation": "The code defines a function `t.ye` which explicitly uses `window.XMLHttpRequest` (or fallbacks like `ActiveXObject` and `XDomainRequest` for older IE versions) to perform HTTP requests. This function is primarily called by the text track loading mechanism (`t.B.prototype.load`) to fetch track data. The URL passed to `t.ye` originates from the `src` property of a track object (`this.Xc`), which is derived from the `src` attribute of HTML `<track>` elements or the `tracks` array provided in the Video.js options. As the specific URL depends on the external configuration/HTML using the library, it's represented as `[dynamic track src]`. These URLs typically point to subtitle or caption files (e.g., WebVTT)."
        }
      ]
    },
    {
      "file": "docs/examples/qr-render/lib/jquery.min.js",
      "occurences": [
        {
          "method": "XMLHttpRequest",
          "urls": [],
          "library": "jQuery",
          "type": "auxiliary",
          "motivation": "jQuery's `$.ajax` function (and its wrappers like `$.get`, `$.post`, `$.getJSON`, `.load()`) uses `XMLHttpRequest` (or `ActiveXObject` for older IE versions) internally to make network requests. Helper functions `ch()` attempts `new a.XMLHttpRequest` and `ci()` attempts `new a.ActiveXObject(\"Microsoft.XMLHTTP\")`. The `f.ajax` function utilizes `f.ajaxSettings.xhr()` which calls these helpers. While the library provides the mechanism for these calls, the specific URLs are determined by the arguments passed to these functions by the consuming application code, not hardcoded within the library itself. Therefore, no specific URLs from *this* codebase are listed."
        }
      ]
    },
    {
      "file": "docs/examples/webapps/example-viewer/example#inline-script-1",
      "occurences": [
        {
          "method": "XMLHttpRequest",
          "urls": [
            "<value from window.location.hash>"
          ],
          "library": "jQuery",
          "type": "self",
          "motivation": "The code uses `$.get(path, ...)` which is a jQuery AJAX function that typically uses XMLHttpRequest internally. The `path` variable is derived directly from `window.location.hash.substring(1)`. Since the hash usually represents a fragment identifier for the current document or a relative path, `$.get` fetches this path relative to the current domain. The default example hash `/ipfs/QmTDMoVqvyBkNMRhzvukTDznntByUNDwyNdSfV8dZ3VKRC/readme.md` points to a relative path."
        }
      ]
    },
    {
      "file": "docs/examples/webapps/example-viewer/lib/jquery.min.js",
      "occurences": [
        {
          "method": "XMLHttpRequest",
          "urls": [],
          "library": "jQuery",
          "type": "auxiliary",
          "motivation": "jQuery's `$.ajax` function (and its wrappers like `$.get`, `$.post`, `$.getJSON`, `.load()`) uses `XMLHttpRequest` (or `ActiveXObject` for older IE versions) internally to make network requests. Helper functions `ch()` attempts `new a.XMLHttpRequest` and `ci()` attempts `new a.ActiveXObject(\"Microsoft.XMLHTTP\")`. The `f.ajax` function utilizes `f.ajaxSettings.xhr()` which calls these helpers. While the library provides the mechanism for these calls, the specific URLs are determined by the arguments passed to these functions by the consuming application code, not hardcoded within the library itself. Therefore, no specific URLs from *this* codebase are listed."
        }
      ]
    },
    {
      "file": "docs/examples/webapps/markdown-viewer/lib/jquery.min.js",
      "occurences": [
        {
          "method": "XMLHttpRequest",
          "urls": [],
          "library": "jQuery",
          "type": "auxiliary",
          "motivation": "jQuery's `$.ajax` function (and its wrappers like `$.get`, `$.post`, `$.getJSON`, `.load()`) uses `XMLHttpRequest` (or `ActiveXObject` for older IE versions) internally to make network requests. Helper functions `ch()` attempts `new a.XMLHttpRequest` and `ci()` attempts `new a.ActiveXObject(\"Microsoft.XMLHTTP\")`. The `f.ajax` function utilizes `f.ajaxSettings.xhr()` which calls these helpers. While the library provides the mechanism for these calls, the specific URLs are determined by the arguments passed to these functions by the consuming application code, not hardcoded within the library itself. Therefore, no specific URLs from *this* codebase are listed."
        }
      ]
    },
    {
      "file": "docs/examples/webapps/markdown-viewer/mdown#inline-script-1",
      "occurences": [
        {
          "method": "XMLHttpRequest",
          "urls": [
            "sample.md"
          ],
          "library": "jQuery",
          "type": "self",
          "motivation": "The code uses `$.get(path, ...)` to fetch content. `$.get` is a jQuery function that uses `XMLHttpRequest` internally. The `path` variable is derived from `window.location.hash`. If the hash is empty initially, the code sets `window.location.hash = \"#sample.md\"` and reloads the page, leading to `$.get` being called with `sample.md` as the path. Other relative paths based on the hash value can also be fetched."
        }
      ]
    },
    {
      "file": "docs/examples/webapps/play/lib/jquery.min.js",
      "occurences": [
        {
          "method": "XMLHttpRequest",
          "urls": [],
          "library": "jQuery",
          "type": "auxiliary",
          "motivation": "jQuery's `$.ajax` function (and its wrappers like `$.get`, `$.post`, `$.getJSON`, `.load()`) uses `XMLHttpRequest` (or `ActiveXObject` for older IE versions) internally to make network requests. Helper functions `ch()` attempts `new a.XMLHttpRequest` and `ci()` attempts `new a.ActiveXObject(\"Microsoft.XMLHTTP\")`. The `f.ajax` function utilizes `f.ajaxSettings.xhr()` which calls these helpers. While the library provides the mechanism for these calls, the specific URLs are determined by the arguments passed to these functions by the consuming application code, not hardcoded within the library itself. Therefore, no specific URLs from *this* codebase are listed."
        }
      ]
    },
    {
      "file": "docs/examples/webapps/play/lib/video.js",
      "occurences": [
        {
          "method": "XMLHttpRequest",
          "urls": [
            "[dynamic track src]"
          ],
          "library": "Video.js",
          "type": "auxiliary",
          "motivation": "The code defines a function `t.ye` which explicitly uses `window.XMLHttpRequest` (or fallbacks like `ActiveXObject` and `XDomainRequest` for older IE versions) to perform HTTP requests. This function is primarily called by the text track loading mechanism (`t.B.prototype.load`) to fetch track data. The URL passed to `t.ye` originates from the `src` property of a track object (`this.Xc`), which is derived from the `src` attribute of HTML `<track>` elements or the `tracks` array provided in the Video.js options. As the specific URL depends on the external configuration/HTML using the library, it's represented as `[dynamic track src]`. These URLs typically point to subtitle or caption files (e.g., WebVTT)."
        }
      ]
    },
    {
      "file": "docs/examples/webapps/qr-render/lib/jquery.min.js",
      "occurences": [
        {
          "method": "XMLHttpRequest",
          "urls": [],
          "library": "jQuery",
          "type": "auxiliary",
          "motivation": "jQuery's `$.ajax` function (and its wrappers like `$.get`, `$.post`, `$.getJSON`, `.load()`) uses `XMLHttpRequest` (or `ActiveXObject` for older IE versions) internally to make network requests. Helper functions `ch()` attempts `new a.XMLHttpRequest` and `ci()` attempts `new a.ActiveXObject(\"Microsoft.XMLHTTP\")`. The `f.ajax` function utilizes `f.ajaxSettings.xhr()` which calls these helpers. While the library provides the mechanism for these calls, the specific URLs are determined by the arguments passed to these functions by the consuming application code, not hardcoded within the library itself. Therefore, no specific URLs from *this* codebase are listed."
        }
      ]
    },
    {
      "file": "js/header-and-latest.js",
      "occurences": [
        {
          "method": "XMLHttpRequest",
          "urls": [
            "/ipns/blog.ipfs.io/index.json"
          ],
          "library": "jQuery",
          "type": "self",
          "motivation": "The code in the `blog-feed` module retrieves an RSS feed URL from a `<link>` tag's `href` attribute (expected to be like `//blog.ipfs.io/index.xml`), modifies it by replacing `//blog.ipfs.io/` with `/ipns/blog.ipfs.io/` and `.xml` with `.json`, resulting in a relative URL like `/ipns/blog.ipfs.io/index.json`. It then uses `$.getJSON` (which uses XMLHttpRequest internally) to fetch data from this relative URL."
        }
      ]
    }
  ],
  "libraryUsage": [
    {
      "file": "blog/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Google Analytics (analytics.js)",
          "motivation": "The code uses the standard `window.ga` object and the `ga('create', ...)` and `ga('send', 'pageview')` pattern, which are characteristic of Google Analytics' analytics.js library."
        }
      ]
    },
    {
      "file": "contact-ipfs/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Google Analytics (analytics.js)",
          "motivation": "The code uses the standard `window.ga` object and the `ga('create', ...)` and `ga('send', 'pageview')` pattern, which are characteristic of Google Analytics' analytics.js library."
        }
      ]
    },
    {
      "file": "docs/examples/example-viewer/example#inline-script-1",
      "occurences": [
        {
          "name": "jQuery",
          "motivation": "The code uses the `$` syntax for DOM manipulation (`$(xmp).attr(...)`, `$('.navbar #headline').html(...)`, `$('title').text(...)`, `$('.navbar-fixed-top').addClass(...)`, `$('#loading').hide()`) and for making AJAX requests (`$.get(...)`). This is characteristic of jQuery."
        },
        {
          "name": "Strapdown.js",
          "motivation": "The code explicitly calls the `strapdown(window, document)` function after fetching and setting the content of the `xmp` element. Strapdown.js is a library that uses `<xmp>` tags to render Markdown."
        }
      ]
    },
    {
      "file": "docs/examples/example-viewer/lib/jquery.min.js",
      "occurences": [
        {
          "name": "jQuery",
          "motivation": "The code includes a copyright notice mentioning the 'jQuery Foundation'. It defines the global variables `jQuery` and `$` (assigning them to the internal function `f`). The code structure, methods like `f.fn.extend`, `f.extend`, `f.ajax`, `f.Deferred`, `f.Callbacks`, `f.event`, and the presence of the version string `jquery: \"1.7.2\"` are all characteristic of the jQuery library."
        }
      ]
    },
    {
      "file": "docs/examples/example-viewer/lib/marked.min.js",
      "occurences": [
        {
          "name": "marked",
          "motivation": "The code begins with a comment block explicitly stating `/**\n * marked - a markdown parser\n * Copyright (c) 2011-2013, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/chjj/marked\n */`. It also exports itself as `marked` for various module systems (`module.exports`, `define`, `this.marked`)."
        }
      ]
    },
    {
      "file": "docs/examples/example-viewer/lib/prettify.min.js",
      "occurences": [
        {
          "name": "Google Code Prettify",
          "motivation": "The code includes a copyright notice `// Copyright (C) 2006 Google Inc.`, defines global functions `prettyPrintOne` and `prettyPrint`, exports a `PR` object containing related functions, and attempts an AMD definition with `define(\"google-code-prettify\", ...)` at the end. These are characteristic patterns of the Google Code Prettify library."
        }
      ]
    },
    {
      "file": "docs/examples/markdown-viewer/lib/jquery.min.js",
      "occurences": [
        {
          "name": "jQuery",
          "motivation": "The code includes a copyright notice mentioning the 'jQuery Foundation'. It defines the global variables `jQuery` and `$` (assigning them to the internal function `f`). The code structure, methods like `f.fn.extend`, `f.extend`, `f.ajax`, `f.Deferred`, `f.Callbacks`, `f.event`, and the presence of the version string `jquery: \"1.7.2\"` are all characteristic of the jQuery library."
        }
      ]
    },
    {
      "file": "docs/examples/markdown-viewer/lib/marked.min.js",
      "occurences": [
        {
          "name": "marked",
          "motivation": "The code includes comments explicitly stating `/**\n * marked - a markdown parser\n * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/chjj/marked\n */`. It also defines and exports a `marked` object/function (`this.marked=marked`, `module.exports=marked`, `define(function(){return marked})`). The core logic involves `Lexer`, `Parser`, and `Renderer` classes typical of a markdown processing library."
        }
      ]
    },
    {
      "file": "docs/examples/markdown-viewer/lib/prettify.min.js",
      "occurences": [
        {
          "name": "Google Code Prettify",
          "motivation": "The code includes a copyright notice `// Copyright (C) 2006 Google Inc.`, defines global functions `prettyPrintOne` and `prettyPrint`, exports a `PR` object containing related functions, and attempts an AMD definition with `define(\"google-code-prettify\", ...)` at the end. These are characteristic patterns of the Google Code Prettify library."
        }
      ]
    },
    {
      "file": "docs/examples/markdown-viewer/mdown#inline-script-1",
      "occurences": [
        {
          "name": "marked",
          "motivation": "The code explicitly calls `marked.setOptions(...)` configuring the library."
        },
        {
          "name": "jQuery",
          "motivation": "The code uses the `$` function selector syntax (`$(xmp)`) and the `$.get()` method for AJAX requests, which are core features of jQuery."
        },
        {
          "name": "strapdown",
          "motivation": "The code calls `strapdown(window, document)`, indicating the use of the Strapdown.js library for rendering Markdown with Bootstrap styling."
        }
      ]
    },
    {
      "file": "docs/examples/play/lib/jquery.min.js",
      "occurences": [
        {
          "name": "jQuery",
          "motivation": "The code includes a copyright notice mentioning the 'jQuery Foundation'. It defines the global variables `jQuery` and `$` (assigning them to the internal function `f`). The code structure, methods like `f.fn.extend`, `f.extend`, `f.ajax`, `f.Deferred`, `f.Callbacks`, `f.event`, and the presence of the version string `jquery: \"1.7.2\"` are all characteristic of the jQuery library."
        }
      ]
    },
    {
      "file": "docs/examples/play/lib/video.js",
      "occurences": [
        {
          "name": "Video.js",
          "motivation": "The code begins with a comment `/*! Video.js v4.11.4 Copyright 2014 Brightcove, Inc. https://github.com/videojs/video.js/blob/master/LICENSE */`. The global `videojs` object is defined (`window.videojs=t`) and used extensively throughout the script for namespacing components, options, and core functionality (e.g., `videojs.options`, `videojs.Player`, `window.videojs[d]`). The structure with components like `ControlBar`, `PlayToggle`, `Slider`, etc., aligns with the Video.js architecture."
        }
      ]
    },
    {
      "file": "docs/examples/qr-render/lib/jquery.min.js",
      "occurences": [
        {
          "name": "jQuery",
          "motivation": "The code includes a copyright notice mentioning the 'jQuery Foundation'. It defines the global variables `jQuery` and `$` (assigning them to the internal function `f`). The code structure, methods like `f.fn.extend`, `f.extend`, `f.ajax`, `f.Deferred`, `f.Callbacks`, `f.event`, and the presence of the version string `jquery: \"1.7.2\"` are all characteristic of the jQuery library."
        }
      ]
    },
    {
      "file": "docs/examples/qr-render/lib/jquery.qr.min.js",
      "occurences": [
        {
          "name": "jQuery",
          "motivation": "The code uses `d = jQuery` and makes extensive use of jQuery functions like `d(selector)`, `d.extend`, `d.fn.qrcode`, `d('<canvas/>')`, `.data()`, `.css()`, `.append()`, `.attr()`, etc."
        },
        {
          "name": "jQuery.qrcode",
          "motivation": "The initial comment `/* jQuery.qrcode 0.11.0 - http://larsjung.de/jquery-qrcode/ */` explicitly names the library. Furthermore, the code defines `d.fn.qrcode`, which is the standard way jQuery plugins extend jQuery's functionality."
        },
        {
          "name": "qrcode-generator",
          "motivation": "The initial comment mentions `//github.com/kazuhikoarase/qrcode-generator (MIT)`. The core logic for QR code generation (e.g., `y`, `t`, `e`, `n`, `o`, `i`, `a`, `u`, `f`, `l`, `c`, `g`, `s`, `h`, `v` functions related to QR matrix generation, error correction, masking) appears to be based on or directly includes this underlying library, although it's integrated within the jQuery plugin."
        }
      ]
    },
    {
      "file": "docs/examples/qr-render/lib/qr.min.js",
      "occurences": [
        {
          "name": "qr-js",
          "motivation": "The code includes a header comment: `/*! qr-js v1.1.3 | (c) 2014 Alasdair Mercer | GPL v3 License */`. The global variable `V=a.qr` and the export `exports.qr=X` also point to this library."
        },
        {
          "name": "jsqrencode",
          "motivation": "The code includes a header comment: `/*! ... jsqrencode | (c) 2010 tz@execpc.com | GPL v3 License */`. This suggests that `qr-js` likely incorporates or is based on `jsqrencode`."
        },
        {
          "name": "Node.js Canvas",
          "motivation": "The code conditionally requires the 'canvas' module (`r=require(\"canvas\")`) if running in an environment where browser Canvas is not available (indicated by `T=!0`, likely Node.js). It's used for server-side rendering."
        },
        {
          "name": "Node.js fs",
          "motivation": "The code conditionally requires the 'fs' module (`w=require(\"fs\")`) if running in an environment without browser APIs (indicated by `T=!0`, likely Node.js). It's used for the `save` and `saveSync` functions to write the QR code to a file."
        }
      ]
    },
    {
      "file": "docs/examples/qr-render/qr#inline-script-1",
      "occurences": [
        {
          "name": "jQuery",
          "motivation": "The code uses jQuery selectors `$('#input')` and methods like `.bind(...)` and `.val()`."
        },
        {
          "name": "qr",
          "motivation": "The code calls `qr.image(...)` to render a QR code, indicating the use of a QR code generation library referenced by the global variable `qr`."
        }
      ]
    },
    {
      "file": "docs/examples/webapps/example-viewer/example#inline-script-1",
      "occurences": [
        {
          "name": "jQuery",
          "motivation": "The code uses the `$` syntax for DOM manipulation (`$(xmp).attr(...)`, `$('.navbar #headline').html(...)`, `$('title').text(...)`, `$('.navbar-fixed-top').addClass(...)`, `$('#loading').hide()`) and for making AJAX requests (`$.get(...)`). This is characteristic of jQuery."
        },
        {
          "name": "Strapdown.js",
          "motivation": "The code explicitly calls the `strapdown(window, document)` function after fetching and setting the content of the `xmp` element. Strapdown.js is a library that uses `<xmp>` tags to render Markdown."
        }
      ]
    },
    {
      "file": "docs/examples/webapps/example-viewer/lib/jquery.min.js",
      "occurences": [
        {
          "name": "jQuery",
          "motivation": "The code includes a copyright notice mentioning the 'jQuery Foundation'. It defines the global variables `jQuery` and `$` (assigning them to the internal function `f`). The code structure, methods like `f.fn.extend`, `f.extend`, `f.ajax`, `f.Deferred`, `f.Callbacks`, `f.event`, and the presence of the version string `jquery: \"1.7.2\"` are all characteristic of the jQuery library."
        }
      ]
    },
    {
      "file": "docs/examples/webapps/example-viewer/lib/marked.min.js",
      "occurences": [
        {
          "name": "marked",
          "motivation": "The code begins with a comment block explicitly stating `/**\n * marked - a markdown parser\n * Copyright (c) 2011-2013, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/chjj/marked\n */`. It also exports itself as `marked` for various module systems (`module.exports`, `define`, `this.marked`)."
        }
      ]
    },
    {
      "file": "docs/examples/webapps/example-viewer/lib/prettify.min.js",
      "occurences": [
        {
          "name": "Google Code Prettify",
          "motivation": "The code includes a copyright notice `// Copyright (C) 2006 Google Inc.`, defines global functions `prettyPrintOne` and `prettyPrint`, exports a `PR` object containing related functions, and attempts an AMD definition with `define(\"google-code-prettify\", ...)` at the end. These are characteristic patterns of the Google Code Prettify library."
        }
      ]
    },
    {
      "file": "docs/examples/webapps/markdown-viewer/lib/jquery.min.js",
      "occurences": [
        {
          "name": "jQuery",
          "motivation": "The code includes a copyright notice mentioning the 'jQuery Foundation'. It defines the global variables `jQuery` and `$` (assigning them to the internal function `f`). The code structure, methods like `f.fn.extend`, `f.extend`, `f.ajax`, `f.Deferred`, `f.Callbacks`, `f.event`, and the presence of the version string `jquery: \"1.7.2\"` are all characteristic of the jQuery library."
        }
      ]
    },
    {
      "file": "docs/examples/webapps/markdown-viewer/lib/marked.min.js",
      "occurences": [
        {
          "name": "marked",
          "motivation": "The code includes comments explicitly stating `/**\n * marked - a markdown parser\n * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/chjj/marked\n */`. It also defines and exports a `marked` object/function (`this.marked=marked`, `module.exports=marked`, `define(function(){return marked})`). The core logic involves `Lexer`, `Parser`, and `Renderer` classes typical of a markdown processing library."
        }
      ]
    },
    {
      "file": "docs/examples/webapps/markdown-viewer/lib/prettify.min.js",
      "occurences": [
        {
          "name": "Google Code Prettify",
          "motivation": "The code includes a copyright notice `// Copyright (C) 2006 Google Inc.`, defines global functions `prettyPrintOne` and `prettyPrint`, exports a `PR` object containing related functions, and attempts an AMD definition with `define(\"google-code-prettify\", ...)` at the end. These are characteristic patterns of the Google Code Prettify library."
        }
      ]
    },
    {
      "file": "docs/examples/webapps/markdown-viewer/mdown#inline-script-1",
      "occurences": [
        {
          "name": "marked",
          "motivation": "The code explicitly calls `marked.setOptions(...)` configuring the library."
        },
        {
          "name": "jQuery",
          "motivation": "The code uses the `$` function selector syntax (`$(xmp)`) and the `$.get()` method for AJAX requests, which are core features of jQuery."
        },
        {
          "name": "strapdown",
          "motivation": "The code calls `strapdown(window, document)`, indicating the use of the Strapdown.js library for rendering Markdown with Bootstrap styling."
        }
      ]
    },
    {
      "file": "docs/examples/webapps/play/lib/jquery.min.js",
      "occurences": [
        {
          "name": "jQuery",
          "motivation": "The code includes a copyright notice mentioning the 'jQuery Foundation'. It defines the global variables `jQuery` and `$` (assigning them to the internal function `f`). The code structure, methods like `f.fn.extend`, `f.extend`, `f.ajax`, `f.Deferred`, `f.Callbacks`, `f.event`, and the presence of the version string `jquery: \"1.7.2\"` are all characteristic of the jQuery library."
        }
      ]
    },
    {
      "file": "docs/examples/webapps/play/lib/video.js",
      "occurences": [
        {
          "name": "Video.js",
          "motivation": "The code begins with a comment `/*! Video.js v4.11.4 Copyright 2014 Brightcove, Inc. https://github.com/videojs/video.js/blob/master/LICENSE */`. The global `videojs` object is defined (`window.videojs=t`) and used extensively throughout the script for namespacing components, options, and core functionality (e.g., `videojs.options`, `videojs.Player`, `window.videojs[d]`). The structure with components like `ControlBar`, `PlayToggle`, `Slider`, etc., aligns with the Video.js architecture."
        }
      ]
    },
    {
      "file": "docs/examples/webapps/qr-render/lib/jquery.min.js",
      "occurences": [
        {
          "name": "jQuery",
          "motivation": "The code includes a copyright notice mentioning the 'jQuery Foundation'. It defines the global variables `jQuery` and `$` (assigning them to the internal function `f`). The code structure, methods like `f.fn.extend`, `f.extend`, `f.ajax`, `f.Deferred`, `f.Callbacks`, `f.event`, and the presence of the version string `jquery: \"1.7.2\"` are all characteristic of the jQuery library."
        }
      ]
    },
    {
      "file": "docs/examples/webapps/qr-render/lib/jquery.qr.min.js",
      "occurences": [
        {
          "name": "jQuery",
          "motivation": "The code uses `d = jQuery` and makes extensive use of jQuery functions like `d(selector)`, `d.extend`, `d.fn.qrcode`, `d('<canvas/>')`, `.data()`, `.css()`, `.append()`, `.attr()`, etc."
        },
        {
          "name": "jQuery.qrcode",
          "motivation": "The initial comment `/* jQuery.qrcode 0.11.0 - http://larsjung.de/jquery-qrcode/ */` explicitly names the library. Furthermore, the code defines `d.fn.qrcode`, which is the standard way jQuery plugins extend jQuery's functionality."
        },
        {
          "name": "qrcode-generator",
          "motivation": "The initial comment mentions `//github.com/kazuhikoarase/qrcode-generator (MIT)`. The core logic for QR code generation (e.g., `y`, `t`, `e`, `n`, `o`, `i`, `a`, `u`, `f`, `l`, `c`, `g`, `s`, `h`, `v` functions related to QR matrix generation, error correction, masking) appears to be based on or directly includes this underlying library, although it's integrated within the jQuery plugin."
        }
      ]
    },
    {
      "file": "docs/examples/webapps/qr-render/lib/qr.min.js",
      "occurences": [
        {
          "name": "qr-js",
          "motivation": "The code includes a header comment: `/*! qr-js v1.1.3 | (c) 2014 Alasdair Mercer | GPL v3 License */`. The global variable `V=a.qr` and the export `exports.qr=X` also point to this library."
        },
        {
          "name": "jsqrencode",
          "motivation": "The code includes a header comment: `/*! ... jsqrencode | (c) 2010 tz@execpc.com | GPL v3 License */`. This suggests that `qr-js` likely incorporates or is based on `jsqrencode`."
        },
        {
          "name": "Node.js Canvas",
          "motivation": "The code conditionally requires the 'canvas' module (`r=require(\"canvas\")`) if running in an environment where browser Canvas is not available (indicated by `T=!0`, likely Node.js). It's used for server-side rendering."
        },
        {
          "name": "Node.js fs",
          "motivation": "The code conditionally requires the 'fs' module (`w=require(\"fs\")`) if running in an environment without browser APIs (indicated by `T=!0`, likely Node.js). It's used for the `save` and `saveSync` functions to write the QR code to a file."
        }
      ]
    },
    {
      "file": "docs/examples/webapps/qr-render/qr#inline-script-1",
      "occurences": [
        {
          "name": "jQuery",
          "motivation": "The code uses jQuery selectors `$('#input')` and methods like `.bind(...)` and `.val()`."
        },
        {
          "name": "qr",
          "motivation": "The code calls `qr.image(...)` to render a QR code, indicating the use of a QR code generation library referenced by the global variable `qr`."
        }
      ]
    },
    {
      "file": "docs/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Google Analytics (analytics.js)",
          "motivation": "The code uses the standard `window.ga` object and the `ga('create', ...)` and `ga('send', 'pageview')` pattern, which are characteristic of Google Analytics' analytics.js library."
        }
      ]
    },
    {
      "file": "index.html#inline-script-1",
      "occurences": [
        {
          "name": "Google Analytics (analytics.js)",
          "motivation": "The code uses the standard `window.ga` object and the `ga('create', ...)` and `ga('send', 'pageview')` pattern, which are characteristic of Google Analytics' analytics.js library."
        }
      ]
    },
    {
      "file": "js/common.js",
      "occurences": [
        {
          "name": "pixi.js",
          "motivation": "The code explicitly requires the 'pixi.js' module using `require(\"pixi.js\")` and uses its methods like `pixi.CanvasRenderer`, `pixi.Container`, `pixi.Graphics`, `pixi.Sprite`, `pixi.utils.skipHello`, etc. throughout the star animation logic."
        },
        {
          "name": "jQuery",
          "motivation": "The code explicitly requires the 'jquery' module using `require(\"jquery\")` and uses its methods like `$()` for selecting DOM elements (`$(\".menu-toggle-acc\")`) and event handling (`.on(\"keypress\", ...)`)."
        }
      ]
    },
    {
      "file": "js/header-and-latest.js",
      "occurences": [
        {
          "name": "jQuery",
          "motivation": "The code uses `require(\"jquery\")` and extensively uses the `$` function, which is the standard alias for jQuery. Methods like `$.getJSON`, `$(document).ready`, `.on`, `.find`, `.closest`, `.attr`, `.append`, `.empty`, `.each`, `.ajax` (within Magnific Popup) are used throughout the code."
        },
        {
          "name": "Magnific Popup",
          "motivation": "The code uses `require(\"magnific-popup\")` and calls the `magnificPopup` method on jQuery objects (`$(\".popup-youtube\").magnificPopup(...)`). The bundled code includes the full source of the Magnific Popup plugin."
        }
      ]
    },
    {
      "file": "legal/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Google Analytics (analytics.js)",
          "motivation": "The code uses the standard `window.ga` object and the `ga('create', ...)` and `ga('send', 'pageview')` pattern, which are characteristic of Google Analytics' analytics.js library."
        }
      ]
    },
    {
      "file": "media/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Google Analytics (analytics.js)",
          "motivation": "The code uses the standard `window.ga` object and the `ga('create', ...)` and `ga('send', 'pageview')` pattern, which are characteristic of Google Analytics' analytics.js library."
        }
      ]
    },
    {
      "file": "team/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Google Analytics (analytics.js)",
          "motivation": "The code uses the standard `window.ga` object and the `ga('create', ...)` and `ga('send', 'pageview')` pattern, which are characteristic of Google Analytics' analytics.js library."
        }
      ]
    }
  ],
  "urls": [],
  "ethereum": [],
  "fallbacks": []
}