{
  "version": 2,
  "contentHash": "bafybeifo37kyb54s65a42kf4hxcpfxb2eyvopihyzytycoit7lt2xvpga4",
  "timestamp": 1747392409,
  "blockNumber": 22495132,
  "rootMimeType": "inode/directory",
  "totalSize": 6675083,
  "favicon": "favicon.ico",
  "title": "Ethereum Phunks Market",
  "distributionPurity": {
    "externalScripts": [
      {
        "file": "index.html",
        "occurences": [
          {
            "type": "script",
            "url": "https://plausible.io/js/script.js"
          }
        ]
      }
    ],
    "externalMedia": []
  },
  "networkingPurity": [
    {
      "file": "chunk-3CWPPSUN.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "[DYNAMIC_RPC_URL]"
          ],
          "library": "@coinbase/wallet-sdk",
          "type": "rpc",
          "motivation": "The `W` function, used by both SCW (`he` class) and WalletLink (`Y` class) signers, makes a `fetch` call to a dynamically determined RPC URL stored in `this.chain.rpcUrl` or `this.jsonRpcUrl`. This URL is typically provided by the connected Coinbase Wallet extension/app or configured during chain switching. It's used for standard Ethereum JSON-RPC requests like `eth_sendRawTransaction`."
        },
        {
          "method": "fetch",
          "urls": [
            "http://rpc.wallet.coinbase.com"
          ],
          "library": "@coinbase/wallet-sdk",
          "type": "auxiliary",
          "motivation": "A `fetch` call is made to `Kt` (hardcoded as `http://rpc.wallet.coinbase.com`) via the `W` function when handling the `wallet_getCallsStatus` method. This URL is a Coinbase-specific endpoint used for auxiliary wallet functionalities."
        },
        {
          "method": "fetch",
          "urls": [
            "https://www.walletlink.org/events/[EVENT_ID_VARIABLE]/seen"
          ],
          "library": "@coinbase/wallet-sdk",
          "type": "auxiliary",
          "motivation": "The `fe` class, part of the WalletLink communication logic, makes a `fetch` POST request to `https://www.walletlink.org/events/{eventId}/seen` to mark WalletLink events as seen. `this.linkAPIUrl` is `We` (`https://www.walletlink.org`)."
        },
        {
          "method": "fetch",
          "urls": [
            "https://www.walletlink.org/events?unseen=true"
          ],
          "library": "@coinbase/wallet-sdk",
          "type": "auxiliary",
          "motivation": "The `fe` class makes a `fetch` GET request to `https://www.walletlink.org/events?unseen=true` to fetch unseen WalletLink events. `this.linkAPIUrl` is `We` (`https://www.walletlink.org`)."
        },
        {
          "method": "fetch",
          "urls": [
            "[WINDOW_LOCATION_ORIGIN_PATHNAME]"
          ],
          "library": "@coinbase/wallet-sdk",
          "type": "self",
          "motivation": "The `checkCrossOriginOpenerPolicy` function performs a `fetch` HEAD request to the current page's URL (`${window.location.origin}${window.location.pathname}`) to inspect the `Cross-Origin-Opener-Policy` header. This is a self-request to check deployment configuration."
        },
        {
          "method": "WebSocket",
          "urls": [
            "wss://www.walletlink.org/rpc"
          ],
          "library": "@coinbase/wallet-sdk",
          "type": "auxiliary",
          "motivation": "The `me` class, responsible for WebSocket communication in WalletLink, establishes a connection to a URL derived from `linkAPIUrl` (which is `We`, i.e., `https://www.walletlink.org`) by replacing `http` with `ws` and appending `/rpc`. This results in `wss://www.walletlink.org/rpc`, used for real-time message relay with the WalletLink server."
        }
      ]
    },
    {
      "file": "chunk-BIAGPTTJ.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "<HttpConnection_URL>"
          ],
          "library": "Fetch API (polyfill/ponyfill)",
          "type": "rpc",
          "motivation": "The `tt` class (HttpConnection) utilizes `we.default` (an alias for the `fetch` function provided by the Fetch API polyfill/ponyfill module) in its `send` and `register` methods. The `send` method POSTs a serialized JSON-RPC request to `this.url`. The `register` method, if not disabled by `disableProviderPing`, sends a test JSON-RPC ping (`{\"id\":1,\"jsonrpc\":\"2.0\",\"method\":\"test\",\"params\":[]}`) to the same URL. `this.url` is a configurable property of the `tt` instance, initialized via its constructor or `open` method, and is expected to be an RPC endpoint."
        },
        {
          "method": "XMLHttpRequest",
          "urls": [
            "<HttpConnection_URL>"
          ],
          "library": "Fetch API (polyfill/ponyfill)",
          "type": "rpc",
          "motivation": "The codebase includes a polyfill for the Fetch API (module `Xe`). If native `fetch` is unavailable, this polyfill's `re` function is invoked. This function internally uses `XMLHttpRequest.open()` and `XMLHttpRequest.send()` to execute the network request. The URL for `XMLHttpRequest.open()` (`y.url`) is derived from the URL argument originally passed to the `fetch` call. In the context of the `tt` (HttpConnection) class using this fetch mechanism, this URL would be its configured RPC endpoint URL. Data is passed via `l.send(typeof y._bodyInit>\"u\"?null:y._bodyInit)`."
        }
      ]
    },
    {
      "file": "chunk-CPVF7SWV.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://kcbuycbhynlmsrvoegzp.supabase.co/rest/v1/",
            "https://kcbuycbhynlmsrvoegzp.supabase.co/rpc/"
          ],
          "library": "PostgREST Client (via Supabase)",
          "type": "auxiliary",
          "motivation": "The `PostgrestBuilder` class (`bg`) uses `this.fetch` (which defaults to global `fetch`) to make requests. The URL is dynamically constructed from `this.url.toString()`. The Supabase client, which uses this builder, is initialized with `Re.supabaseUrl` (`https://kcbuycbhynlmsrvoegzp.supabase.co`). PostgREST calls typically target paths like `/rest/v1/{table_name}` or `/rpc/{function_name}` under this base URL."
        },
        {
          "method": "fetch",
          "urls": [
            "https://eth-mainnet.g.alchemy.com/v2/",
            "https://turbo.magma-rpc.com"
          ],
          "library": "Wagmi (via Viem)",
          "type": "rpc",
          "motivation": "Wagmi is configured with Viem's HTTP transport (`Ls`) for chains. The URLs `Re.rpcHttpProvider` (Alchemy URL, API key part stripped) and `Re.magmaRpcHttpProvider` are passed to this transport. Viem's HTTP transport utilizes `fetch` for making Ethereum RPC calls."
        },
        {
          "method": "fetch",
          "urls": [
            "https://kcbuycbhynlmsrvoegzp.supabase.co/functions/v1/"
          ],
          "library": "Functions Client (via Supabase)",
          "type": "auxiliary",
          "motivation": "The `Hc` class (FunctionsClient, part of Supabase) uses `this.fetch` to invoke Supabase Edge Functions. The base URL is constructed from the main Supabase URL (`Re.supabaseUrl`) by appending `/functions/v1/`, and then the specific function name is added to the path."
        },
        {
          "method": "fetch",
          "urls": [
            "https://kcbuycbhynlmsrvoegzp.supabase.co/storage/v1/"
          ],
          "library": "Storage Client (via Supabase)",
          "type": "auxiliary",
          "motivation": "The `oh` class (StorageFileApi, part of Supabase Storage) uses `this.fetch` for operations like uploading, downloading, and managing files. The base URL is derived from `Re.supabaseUrl` by appending `/storage/v1/`, with further paths like `/object/...` or `/bucket/...` depending on the operation."
        },
        {
          "method": "fetch",
          "urls": [
            "https://kcbuycbhynlmsrvoegzp.supabase.co/storage/v1/object/public/data/"
          ],
          "library": "Angular HttpClient",
          "type": "auxiliary",
          "motivation": "The `gse` service (DataService) uses Angular's `HttpClient` (`this.http.get`) to fetch attribute JSON files. The URL is constructed using `Re.staticUrl` (which is `https://kcbuycbhynlmsrvoegzp.supabase.co/storage/v1/object/public`) and appending `/data/{collection_slug}_attributes.json`. Angular's HttpClient uses `fetch` if `withFetch()` is enabled, or `XMLHttpRequest` otherwise."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.ethscriptions.com/api/ethscriptions/",
            "https://ethscriptions-api.flooredape.io/ethscriptions/"
          ],
          "library": "Angular HttpClient",
          "type": "auxiliary",
          "motivation": "The `gse` service (DataService) uses Angular's `HttpClient` (`this.http.get`) to fetch Ethscription data from external APIs at `api.ethscriptions.com` and `ethscriptions-api.flooredape.io`."
        },
        {
          "method": "fetch",
          "urls": [
            "https://min-api.cryptocompare.com/data/price"
          ],
          "library": "Angular HttpClient",
          "type": "auxiliary",
          "motivation": "The `gse` service (DataService) uses Angular's `HttpClient` (`this.http.get`) to fetch cryptocurrency price data from `min-api.cryptocompare.com`."
        },
        {
          "method": "fetch",
          "urls": [
            "http://localhost:3000/merkle-proofs"
          ],
          "library": "Angular HttpClient",
          "type": "auxiliary",
          "motivation": "The `gse` service (DataService) uses Angular's `HttpClient` (`this.http.get`) to fetch Merkle proofs from `http://localhost:3000/merkle-proofs`. This appears to be an endpoint for local development or a self-hosted auxiliary service."
        },
        {
          "method": "XMLHttpRequest",
          "urls": [
            "https://kcbuycbhynlmsrvoegzp.supabase.co/storage/v1/object/public/data/",
            "https://api.ethscriptions.com/api/ethscriptions/",
            "https://ethscriptions-api.flooredape.io/ethscriptions/",
            "https://min-api.cryptocompare.com/data/price",
            "http://localhost:3000/merkle-proofs"
          ],
          "library": "Angular HttpClient (via XhrBackend)",
          "type": "auxiliary",
          "motivation": "Angular's `HttpClientModule` (used by the `gse` service) defaults to using `XMLHttpRequest` via its `XhrBackend` (represented by the `qf` class in the code) if not explicitly configured with `provideHttpClient(withFetch())`. The URLs are for various auxiliary data services called by the `gse` service."
        },
        {
          "method": "WebSocket",
          "urls": [
            "wss://kcbuycbhynlmsrvoegzp.supabase.co/realtime/v1/websocket"
          ],
          "library": "Realtime Client (via Supabase)",
          "type": "auxiliary",
          "motivation": "The `Zc` class (Socket, part of Supabase Realtime Client) establishes a WebSocket connection using `new WebSocket(this.endpointURL())`. `this.endpointURL()` constructs the URL from `Re.supabaseUrl` by appending `/realtime/v1/websocket` and includes parameters like API key and VSN."
        },
        {
          "method": "WebSocket",
          "urls": [
            "wss://relay.walletconnect.com"
          ],
          "library": "Wagmi (via @walletconnect/ethereum-provider)",
          "type": "auxiliary",
          "motivation": "The WalletConnect connector, configured in Wagmi via the `mc` factory function, uses `@walletconnect/ethereum-provider` internally. This provider establishes WebSocket connections to WalletConnect relay servers for communication. `wss://relay.walletconnect.com` is a common default relay URL, though the specific URL can be configured or dynamically chosen by the SDK."
        }
      ]
    },
    {
      "file": "chunk-HNKXLYLO.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://safe-client.safe.global/v1/chains/{chainId}/relay",
            "https://safe-client.safe.global/v1/chains/{chainId}/safes/{address}",
            "https://safe-client.safe.global/v1/balances/supported-fiat-codes",
            "https://safe-client.safe.global/v2/chains/{chainId}/safes/{address}/collectibles",
            "https://safe-client.safe.global/v1/chains",
            "https://safe-client.safe.global/v1/auth/nonce",
            "https://safe-client.safe.global/v1/accounts",
            "https://safe-client.safe.global/v1/chains/{chainId}/about/indexing"
          ],
          "library": "Safe Client Gateway SDK",
          "type": "auxiliary",
          "motivation": "The `fetch` API is used for all network requests within this code. These requests are made through internal helper functions `fetchData` (typically for POST, PUT, DELETE methods) and `getData` (for GET methods), both defined in module `b`. These helpers are, in turn, utilized by generic endpoint functions `postEndpoint`, `putEndpoint`, `deleteEndpoint`, and `getEndpoint` defined in module `G`.\n\nThe various exported functions in module `bt` (e.g., `relayTransaction`, `getSafeInfo`, `getChainsConfig`) use these generic endpoint functions to make specific API calls.\n\nURLs are dynamically constructed. A base URL (variable `r`, defaulting to `\"https://safe-client.safe.global\"` and modifiable via `setBaseUrl`) is combined with API-specific path templates (e.g., `\"/v1/chains/{chainId}/safes/{address}\"`). Placeholders within these path templates (like `{chainId}` and `{address}`) are replaced with actual values using the `insertParams` function. Query parameters are appended using the `stringifyQuery` function. For example, a call to `getSafeInfo(chainIdValue, safeAddressValue)` would ultimately `fetch` a URL like `https://safe-client.safe.global/v1/chains/chainIdValue/safes/safeAddressValue`.\n\nThese URLs point to the Safe Client Gateway backend, which is an auxiliary service providing data management, transaction indexing, and relaying capabilities for Safe{Wallet} users, rather than a direct Ethereum RPC endpoint or a 4337 bundler."
        }
      ]
    },
    {
      "file": "chunk-PGV2D432.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://explorer-api.walletconnect.com/w3m/v1/getDesktopListings",
            "https://explorer-api.walletconnect.com/w3m/v1/getMobileListings",
            "https://explorer-api.walletconnect.com/w3m/v1/getInjectedListings",
            "https://explorer-api.walletconnect.com/w3m/v1/getAllListings"
          ],
          "library": "Web3Modal (WalletConnect)",
          "type": "auxiliary",
          "motivation": "The function `L(e, t)` is an asynchronous function that constructs a URL and makes a `fetch` call. \n- The base URL is `E = \"https://explorer-api.walletconnect.com\"`.\n- A path `e` (e.g., `\"/w3m/v1/getDesktopListings\"`) is appended to this base URL.\n- Several query parameters are added to the URL object `o` before it's passed to `fetch(o)`:\n  - `projectId`: dynamically obtained from `f.state.projectId`.\n  - `sdkType`: hardcoded as `\"wcm\"` (from variable `O`).\n  - `sdkVersion`: hardcoded as `\"js-2.6.2\"` (from variable `A`).\n  - Other parameters based on the `t` argument passed to `L`, such as `page`, `entries`, `chains`, `excludedIds`, `recommendedIds`, `sdks`.\nFor example, a call to `h.getDesktopListings({})` would trigger a `fetch` to a URL like `https://explorer-api.walletconnect.com/w3m/v1/getDesktopListings?projectId=YOUR_PROJECT_ID&sdkType=wcm&sdkVersion=js-2.6.2` (plus any additional default or empty parameters from `t`).\nThese URLs are used to retrieve lists of wallets and their metadata from the WalletConnect explorer, which is an auxiliary service for wallet connection functionality."
        }
      ]
    },
    {
      "file": "chunk-RI7A2EBQ.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.com/v1/"
          ],
          "library": "@walletconnect/utils",
          "type": "rpc",
          "motivation": "The function `_5` makes a `fetch` call to a URL constructed as `\\`\\${a||t6}/?chainId=\\${r}&projectId=\\${n}\\``. `t6` is hardcoded to `\"https://rpc.walletconnect.com/v1\"`. The `a` parameter allows overriding this base URL. The request body (not fully shown but implied by `method: \"eth_call\"` in typical usage of such functions) is a JSON-RPC payload for an `eth_call`. The URL includes a `chainId` query parameter. The `projectId` is also a query parameter but is treated as an API key and excluded here."
        }
      ]
    },
    {
      "file": "chunk-UAOJMTAB.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "{contract_provided_gateway_url_template}"
          ],
          "library": "viem",
          "type": "auxiliary",
          "motivation": "The `On` function, part of viem's offchain lookup handling (EIP-3668/CCIP-Read), iterates through a list of URL strings (these strings are passed as the `urls` argument to `On`, originating from decoded `OffchainLookup` error data which is typically provided by a smart contract).\nFor each URL string `s` from this list, it constructs the final URL by replacing `{sender}` and `{data}` placeholders within `s` using `s.replace(\"{sender}\", senderAddress).replace(\"{data}\", callData)`.\nThis constructed URL is then used in a `fetch` request. The HTTP method is 'POST' if the URL template `s` contains `\"{data}\"`, otherwise it's 'GET'.\nThe `urls` field in this entry represents one such template URL string `s` before placeholder replacement."
        }
      ]
    },
    {
      "file": "chunk-X75IXMRO.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://metamask-sdk.api.cx.metamask.io/evt"
          ],
          "library": "cross-fetch (or a fetch polyfill)",
          "type": "auxiliary",
          "motivation": "The `Wt` function makes a POST request to an `/evt` endpoint on the `communicationServerUrl`. The `communicationServerUrl` defaults to `https://metamask-sdk.api.cx.metamask.io/`. This is used for sending buffered analytics or logging events."
        },
        {
          "method": "fetch",
          "urls": [
            "https://mainnet.infura.io/v3/",
            "https://goerli.infura.io/v3/",
            "https://sepolia.infura.io/v3/",
            "https://linea-mainnet.infura.io/v3/",
            "https://linea-goerli.infura.io/v3/",
            "https://polygon-mainnet.infura.io/v3/",
            "https://polygon-mumbai.infura.io/v3/",
            "https://optimism-mainnet.infura.io/v3/",
            "https://optimism-goerli.infura.io/v3/",
            "https://arbitrum-mainnet.infura.io/v3/",
            "https://arbitrum-goerli.infura.io/v3/",
            "https://palm-mainnet.infura.io/v3/",
            "https://palm-testnet.infura.io/v3/",
            "https://avalanche-mainnet.infura.io/v3/",
            "https://avalanche-fuji.infura.io/v3/",
            "https://aurora-mainnet.infura.io/v3/",
            "https://aurora-testnet.infura.io/v3/",
            "https://starknet-mainnet.infura.io/v3/",
            "https://starknet-goerli.infura.io/v3/",
            "https://starknet-goerli2.infura.io/v3/",
            "https://celo-mainnet.infura.io/v3/",
            "https://celo-alfajores.infura.io/v3/"
          ],
          "library": "cross-fetch (or a fetch polyfill)",
          "type": "rpc",
          "motivation": "The `pp` function populates `readonlyRPCMap` with these Infura base URLs (API key part omitted as per instructions). The `q` function then uses these as `rpcEndpoint` for `fetch` POST requests, sending JSON-RPC payloads for read-only Ethereum operations."
        },
        {
          "method": "fetch",
          "urls": [
            "https://raw.githubusercontent.com/MetaMask/metamask-sdk/refs/heads/gh-pages/locales/en.json",
            "https://raw.githubusercontent.com/MetaMask/metamask-sdk/refs/heads/gh-pages/locales/es.json",
            "https://raw.githubusercontent.com/MetaMask/metamask-sdk/refs/heads/gh-pages/locales/fr.json",
            "https://raw.githubusercontent.com/MetaMask/metamask-sdk/refs/heads/gh-pages/locales/he.json",
            "https://raw.githubusercontent.com/MetaMask/metamask-sdk/refs/heads/gh-pages/locales/it.json",
            "https://raw.githubusercontent.com/MetaMask/metamask-sdk/refs/heads/gh-pages/locales/pt.json",
            "https://raw.githubusercontent.com/MetaMask/metamask-sdk/refs/heads/gh-pages/locales/tr.json"
          ],
          "library": "cross-fetch (or a fetch polyfill)",
          "type": "auxiliary",
          "motivation": "The i18nInstance (`zr` class) fetches translation JSON files. The `baseUrl` defaults to `https://raw.githubusercontent.com/MetaMask/metamask-sdk/refs/heads/gh-pages/locales` and appends the language code (e.g., `en`, `es`) and `.json`."
        },
        {
          "method": "XMLHttpRequest",
          "urls": [
            "https://metamask-sdk.api.cx.metamask.io/evt",
            "https://mainnet.infura.io/v3/",
            "https://goerli.infura.io/v3/",
            "https://sepolia.infura.io/v3/",
            "https://linea-mainnet.infura.io/v3/",
            "https://linea-goerli.infura.io/v3/",
            "https://polygon-mainnet.infura.io/v3/",
            "https://polygon-mumbai.infura.io/v3/",
            "https://optimism-mainnet.infura.io/v3/",
            "https://optimism-goerli.infura.io/v3/",
            "https://arbitrum-mainnet.infura.io/v3/",
            "https://arbitrum-goerli.infura.io/v3/",
            "https://palm-mainnet.infura.io/v3/",
            "https://palm-testnet.infura.io/v3/",
            "https://avalanche-mainnet.infura.io/v3/",
            "https://avalanche-fuji.infura.io/v3/",
            "https://aurora-mainnet.infura.io/v3/",
            "https://aurora-testnet.infura.io/v3/",
            "https://starknet-mainnet.infura.io/v3/",
            "https://starknet-goerli.infura.io/v3/",
            "https://starknet-goerli2.infura.io/v3/",
            "https://celo-mainnet.infura.io/v3/",
            "https://celo-alfajores.infura.io/v3/",
            "https://raw.githubusercontent.com/MetaMask/metamask-sdk/refs/heads/gh-pages/locales/en.json",
            "https://raw.githubusercontent.com/MetaMask/metamask-sdk/refs/heads/gh-pages/locales/es.json",
            "https://raw.githubusercontent.com/MetaMask/metamask-sdk/refs/heads/gh-pages/locales/fr.json",
            "https://raw.githubusercontent.com/MetaMask/metamask-sdk/refs/heads/gh-pages/locales/he.json",
            "https://raw.githubusercontent.com/MetaMask/metamask-sdk/refs/heads/gh-pages/locales/it.json",
            "https://raw.githubusercontent.com/MetaMask/metamask-sdk/refs/heads/gh-pages/locales/pt.json",
            "https://raw.githubusercontent.com/MetaMask/metamask-sdk/refs/heads/gh-pages/locales/tr.json"
          ],
          "library": "cross-fetch (or a fetch polyfill)",
          "type": "rpc",
          "motivation": "The fetch polyfill (`Xa` module) uses `XMLHttpRequest` as its underlying mechanism if native `fetch` is not available. The URLs passed to `fetch` would be handled by `XMLHttpRequest` in such cases. Type is listed as 'rpc' here as a general placeholder, but it corresponds to the type of the original `fetch` call it's polyfilling (rpc or auxiliary)."
        },
        {
          "method": "WebSocket",
          "urls": [
            "https://metamask-sdk.api.cx.metamask.io/"
          ],
          "library": "socket.io-client",
          "type": "auxiliary",
          "motivation": "`socket.io-client` (aliased as `Ya`) is initialized with `communicationServerUrl`. This URL defaults to `https://metamask-sdk.api.cx.metamask.io/`. `socket.io-client` primarily uses WebSockets (with fallbacks like polling) to establish a real-time, bidirectional communication channel for the SDK's core messaging functionality."
        }
      ]
    },
    {
      "file": "chunk-ZSSDNERX.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "<gateway_url_from_OffchainLookup_error_with_placeholders_resolved>"
          ],
          "library": "viem",
          "type": "auxiliary",
          "motivation": "The `fetch` call is made within the `Yr` function, which is part of an EIP-3668 OffchainLookup (CCIP-Read) implementation, commonly used with Viem. This function iterates through URLs provided in an `OffchainLookup` revert error from a smart contract. These URLs point to external gateways to resolve data. The URLs are dynamic and constructed at runtime by replacing placeholders like `{sender}` and `{data}` in the template URL (e.g., `https://gateway.example.com/lookup?sender={sender}&data={data}`) with actual values. The `fetch` call uses either 'GET' or 'POST' based on whether the URL template includes `{data}`."
        }
      ]
    },
    {
      "file": "polyfills-SB2L2NTK.js",
      "occurences": [
        {
          "method": "XMLHttpRequest",
          "urls": [
            "<URL provided as argument to XMLHttpRequest.open>"
          ],
          "library": "Zone.js (patching native API)",
          "type": "auxiliary",
          "motivation": "The code patches `XMLHttpRequest.prototype.open`. The URL is the second argument passed to this method (referred to as `b[1]` in the patching function's scope: `A[f]=b[1]`). This URL is used by the original `XMLHttpRequest.open` call and the operation is tracked by Zone.js. The specific URL is determined dynamically by the application code that instantiates and uses `XMLHttpRequest`."
        },
        {
          "method": "fetch",
          "urls": [
            "<URL provided as argument to fetch>"
          ],
          "library": "Zone.js (patching native API)",
          "type": "auxiliary",
          "motivation": "The code patches the global `fetch` function. The URL is the first argument passed to `fetch` (referred to as `l[0]` in the arguments array `l` of the patching function wrapper `st`). This URL is used by the original `fetch` call and the operation is tracked by Zone.js. The specific URL is determined dynamically by the application code that calls `fetch`."
        }
      ]
    }
  ],
  "libraryUsage": [
    {
      "file": "chunk-3CWPPSUN.js",
      "occurences": [
        {
          "name": "@coinbase/wallet-sdk",
          "motivation": "The code exports `CoinbaseWalletSDK` (class `J`) and `createCoinbaseWalletSDK`. Internal classes like `H` (provider implementation), `G` (WalletLink relay), `he` (SCW signer), and `Se` (communicator for popups) are characteristic of this SDK. Strings like `de=\"@coinbase/wallet-sdk\"`, `E=\"4.3.0\"` (version), and specific URLs like `Ht=\"https://keys.coinbase.com/connect\"`, `We=\"https://www.walletlink.org\"` further confirm its usage. The SDK orchestrates communication with Coinbase Wallet (extension or mobile) for Web3 operations."
        },
        {
          "name": "EventEmitter Provider",
          "motivation": "The class `H` (CoinbaseWalletProvider) extends `xe`, which in turn extends `He.default`. `He.default` is used as a base class that provides event emitting capabilities (e.g., `this.emit('disconnect', ...)`). This is a common pattern for Web3 providers to emit events like `accountsChanged` or `chainChanged`."
        },
        {
          "name": "Ethereum ABI Encoder & Utilities",
          "motivation": "The module `Mt` (imported as `z`) provides functions like `rawEncode`, `solidityPack`, and `soliditySHA3`. These are used for encoding data according to Ethereum ABI specifications, for example, in `Ln(t,e){return y.keccak(xt(t,e))}` and for EIP-712 typed data signing (`$.default.hashForSignTypedData_v4`). This functionality is similar to libraries like `ethereumjs-abi`."
        },
        {
          "name": "Ethereum Cryptography Utilities",
          "motivation": "The module `Oe` (imported as `y`) provides cryptographic functions like `keccak` (which internally uses `keccak_256` from module `cn`) and various buffer manipulation utilities (`toBuffer`, `bufferToHex`, `zeros`, `setLength`). These are essential for Ethereum operations such as hashing data and preparing it for signing or transaction submission."
        }
      ]
    },
    {
      "file": "chunk-3MP3NF7U.js",
      "occurences": [
        {
          "name": "Noble Cryptography Libraries (secp256k1, SHA256, HMAC, BIP340)",
          "motivation": "The code implements several cryptographic primitives:\n- **SHA-256**: The `Qt` class and associated constants (`fn`, `st`) are characteristic of SHA-256. The exported `Et` (aliased as `a`) is a SHA-256 factory.\n- **HMAC**: The `Zt` class and `Jt` function implement HMAC.\n- **Elliptic Curve Cryptography (secp256k1)**:\n    - Specific constants for secp256k1 are used: prime `Lt` (0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f) and order `Kt` (0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141).\n    - The `Gt` object (aliased as `b`) configures a secp256k1 curve with generator points `Gx`, `Gy`, and cofactor `h`.\n    - A `ProjectivePoint` class (`h` within the `vn` function scope, which is used by `Gt`) implements point arithmetic (addition, doubling, scalar multiplication using methods like `wNAF`).\n    - Endomorphism optimizations for secp256k1 are present (the `endo` object with `beta` and `splitScalar` within `Gt`'s definition).\n- **BIP340 Schnorr Signatures**: The `Br` object (aliased as `c`) implements Schnorr signatures with tagged hashes specific to BIP340 (e.g., `Yt(\"BIP0340/challenge\", ...)` and `Yt(\"BIP0340/nonce\", ...)`). Functions like `lift_x` (`nn`) are also common in BIP340 implementations.\n- **Hashing to Curve (SSWU for secp256k1)**: The `sn` object and its exported functions `vr` (hashToCurve, aliased as `d`) and `Sr` (encodeToCurve, aliased as `e`) implement hashing to the secp256k1 curve using the SSWU (Simplified Shallue-van de Woestijne-Ulas) method, with standard Domain Separation Tags (DSTs) like `secp256k1_XMD:SHA-256_SSWU_RO_` and `secp256k1_XMD:SHA-256_SSWU_NU_`.\nThese features, specific constants, data structures (like `ProjectivePoint`), and algorithm implementations (like `wNAF`, `splitScalar` for endomorphism) are highly indicative of the `noble-curves` and `noble-hashes` libraries, or a custom bundling/implementation of similar low-level cryptographic functionalities."
        }
      ]
    },
    {
      "file": "chunk-4LLAJJBA.js",
      "occurences": [
        {
          "name": "Web Cryptography API",
          "motivation": "The code accesses `globalThis.crypto` and specifically calls `globalThis.crypto.getRandomValues` in the function `A`. This is part of the Web Cryptography API for generating cryptographically strong random values."
        },
        {
          "name": "Encoding API",
          "motivation": "The code utilizes `new TextEncoder().encode(t)` within the function `a` (aliased as `utf8ToBytes` internally). `TextEncoder` is part of the Encoding API standard used for converting strings to byte streams (specifically `Uint8Array` here)."
        }
      ]
    },
    {
      "file": "chunk-5EONOFK2.js",
      "occurences": [
        {
          "name": "Angular",
          "motivation": "The code uses Angular's dependency injection pattern with `InjectionToken` (e.g., `var R=new n(\"[WA_WINDOW]\", ...)` where `n` is imported and likely `InjectionToken`). It also uses Angular-specific function names from imports like `A` (likely `ɵɵdefineDirective`), `v` (likely `ɵɵStandaloneFeature`), `u` (likely `ɵɵHostDirectivesFeature`), `l` (likely `ɵɵdefineInjectable`), and `O` (likely `ElementRef`). The `t` function is used for injection (e.g., `t(T)`), similar to Angular's `inject()`. Class definitions like `class e extends M { ... static \\u0275fac=...; static \\u0275dir=... }` are characteristic of compiled Angular components or directives. The `ngOnDestroy()` lifecycle hook is present."
        },
        {
          "name": "RxJS",
          "motivation": "The code extensively uses reactive programming patterns characteristic of RxJS. `E` is imported and used to create new observables (e.g., `new E(r=>{...})`), which is likely `rxjs.Observable`. The `.pipe()` method is used for composing operators (e.g., `this.pipe(I())`). Several imported functions appear to be RxJS operators: `S` is used like `fromEvent` (e.g., `S(e,\"visibilitychange\")`), `_` is used for filtering (e.g., `_(()=>e.visibilityState!==\"hidden\")`), `d` is used like `startWith` (e.g., `d(0)`), `N` is used like `distinctUntilChanged` (e.g., `N()`), and `I` and `f` are used as sharing operators (e.g., `I()`, `f({refCount:!1,bufferSize:1})`)."
        }
      ]
    },
    {
      "file": "chunk-72CTK2RT.js",
      "occurences": [
        {
          "name": "base64-js",
          "motivation": "The code includes a module `V` which implements base64 encoding and decoding. Key functions like `S.byteLength=lr`, `S.toByteArray=yr`, `S.fromByteArray=Br` and the use of a lookup table `k=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"` are characteristic of the `base64-js` library."
        },
        {
          "name": "ieee754",
          "motivation": "The code includes a module `X` which implements functions `D.read` and `D.write` for handling IEEE754 floating-point numbers. This functionality is provided by the `ieee754` library, used for converting between byte arrays and floating point numbers."
        },
        {
          "name": "buffer",
          "motivation": "The code includes a module `Wr` that defines `T.Buffer=h`. This module implements a `Buffer` class similar to Node.js's Buffer, including methods like `alloc`, `from`, `isBuffer`, `concat`, `toString`, various `read/write` methods for different data types (e.g., `readUInt8`, `writeFloatLE`). It also references the `base64-js` (as `V()`) and `ieee754` (as `U()`) modules, which are dependencies of the `buffer` package for browsers."
        }
      ]
    },
    {
      "file": "chunk-BIAGPTTJ.js",
      "occurences": [
        {
          "name": "Fetch API (polyfill/ponyfill)",
          "motivation": "The code defines a module (variable `Xe`, referenced as `we`) that exports `fetch` (`we.default`), `Headers`, `Request`, and `Response`. This module conditionally provides a `fetch` implementation using `XMLHttpRequest` (in function `re` within the closure defining `Xe`) if a global `fetch` is not already present, acting as a polyfill or ponyfill for the Fetch API."
        },
        {
          "name": "JSON-RPC Client Utilities",
          "motivation": "The code includes a significant set of functions dedicated to JSON-RPC 2.0. These include `formatJsonRpcRequest` (aliased as `ue`), `formatJsonRpcResult` (aliased as `dt`), `formatJsonRpcError` (aliased as `le`), validation functions like `isJsonRpcRequest` (aliased as `Vt`), `isJsonRpcResponse` (aliased as `ge`), and predefined error objects/codes (e.g., `A`, `Pe`, `Ae`). These utilities are used by higher-level classes like `Ge` (JsonRpcProvider) and `tt` (HttpConnection) for communication."
        },
        {
          "name": "EventEmitter",
          "motivation": "An `EventEmitter` class is imported (from `'./chunk-3YBW5SNO.js'` as `xe`, then used via aliases `We` and `rt`). Instances of this `EventEmitter` are created (e.g., `this.events = new We.EventEmitter`, `this.events = new rt.EventEmitter`) and used for event handling (e.g., `this.events.on`, `this.events.emit`) in both the `Ge` (JsonRpcProvider) and `tt` (HttpConnection) classes."
        }
      ]
    },
    {
      "file": "chunk-CPVF7SWV.js",
      "occurences": [
        {
          "name": "@angular/core",
          "motivation": "The code extensively uses Angular's core functionalities, decorators (`@Component`, `@Injectable`, `@Input`, `@Output`, etc.), lifecycle hooks (`ngOnInit`, `ngOnDestroy`), dependency injection (`et`, `He`), and other common Angular patterns. Imports like `Oe` (OpaqueToken/InjectionToken), `dt` (ɵɵdefineInjectable), `Rs` (ɵɵdefineNgModule), `Ps` (ɵɵdefineDirective), `Li` (ɵɵdefinePipe) are present."
        },
        {
          "name": "@angular/common",
          "motivation": "Directives like `ngIf`, `ngClass`, and pipes like `async`, `date`, `number`, `currency`, `lowercase`, `titlecase` are used or defined, which are part of `@angular/common`."
        },
        {
          "name": "@angular/common/http",
          "motivation": "The code imports `Hu` (HttpClient) and `aP` (provideHttpClient), and a service `gse` uses `this.http` (an instance of HttpClient) to make GET requests. The `qf` class is Angular's `XhrBackend`."
        },
        {
          "name": "@ngrx/store",
          "motivation": "The code uses `Se` (createAction), `ht` (createSelector), `kF` (StoreModule.forRoot), `DF` (createReducer), `IF` (on), and various `Oe` tokens prefixed with `@ngrx/store` (e.g., `i0` for `@ngrx/store Internal Root Guard`). The `Ao` class (Store) and `js` (ActionsSubject) are also indicative."
        },
        {
          "name": "RxJS",
          "motivation": "The code uses `Ds` (BehaviorSubject), `Jt` (Observable), `mu` (Signal), `sf` (signal), and numerous RxJS operators like `Ze` (map), `Nt` (switchMap), `er` (tap), `ai` (combineLatest), `tf` (forkJoin), `St` (of), `mo` (filter), `cv` (mergeMap), `hv` (finalize), `nv` (distinctUntilKeyChanged), `tv` (auditTime), `wv` (scan), `fv` (withLatestFrom), `pv` (pluck), `uv` (distinctUntilChanged), `lv` (debounceTime), `gv` (retry)."
        },
        {
          "name": "Lit",
          "motivation": "The code uses `N` (likely LitElement/ReactiveElement or a base class from Lit), `m` (html tagged template literal), `H` (css tagged template literal for styles), decorators like `@R` (customElement), `@C` (state), `@ne` (property). Multiple components (`_r`, `sn`, `To`, `Mn`, `wc`, etc.) follow this pattern."
        },
        {
          "name": "LocalForage",
          "motivation": "A large, self-contained block of code `qE=Nn((VE,Bg)=>{\"use strict\";(function(n){...e.localforage=n()}})` is present, which is the UMD build of LocalForage."
        },
        {
          "name": "Wagmi",
          "motivation": "The code initializes a wagmi config using `xm` (createConfig) with chains like `_o` (mainnet), `_m` (sepolia), `Tm` (custom). It uses wagmi hooks/actions like `Ju` (connect), `uc` (disconnect), `fr` (getAccount), `Un` (getChainId), `rd` (switchChain), `pm` (sendTransaction), `wm` (writeContract) and connectors like `$i` (injected), `mc` (walletConnect), `Vs` (coinbaseWallet)."
        },
        {
          "name": "Viem",
          "motivation": "Wagmi v2 uses Viem under the hood. The wagmi configuration involves transports like `Tf` (fallback) and `Ls` (http) which are Viem transports. Functions like `_u` (createPublicClient), `Ns` (custom transport), `Yt` (getAddress), `Pv` (isAddress), `vn` (numberToHex) are used, consistent with Viem."
        },
        {
          "name": "Web3Modal",
          "motivation": "The code initializes a Web3Modal instance using `IA` with a wagmi config. It defines and uses many custom elements prefixed with `w3m-` (e.g., `_r` as `w3m-account-button`, `wc` as `w3m-router`, `cn` as `w3m-header`) which are characteristic of Web3Modal components."
        },
        {
          "name": "Supabase Client",
          "motivation": "The code initializes a Supabase client using `wt=HE(q3,K3)` where `HE` is `createClient` from `supabase-js`. It then uses `wt.from(...)`, `wt.channel(...)`, `wt.rpc(...)`, `wt.storage.from(...)`, `wt.functions.invoke(...)`."
        },
        {
          "name": "PostgREST Client (via Supabase)",
          "motivation": "The code includes the `postgrest-js` library (classes `yg`, `bg`, `Cg`, `Qd`, `Eg`, `Tg`) and uses it via the Supabase client's `.from()` and `.rpc()` methods for database interactions."
        },
        {
          "name": "Realtime Client (via Supabase)",
          "motivation": "The code includes the Supabase Realtime client (`Zc` class for WebSocket connection, constants like `YA`, `XA`) used by the Supabase client for `channel()` functionality."
        },
        {
          "name": "Storage Client (via Supabase)",
          "motivation": "The Supabase client (`gh` class) initializes a Storage client (`tl` class wrapping `oh` for StorageFileApi), which is used for file storage operations. The code for `oh` (StorageFileApi) handling uploads, downloads, etc., is present."
        },
        {
          "name": "Functions Client (via Supabase)",
          "motivation": "The Supabase client (`gh` class) initializes a Functions client (`Hc` class), used for invoking edge functions. The code for `Hc` is present."
        },
        {
          "name": "Zustand",
          "motivation": "The code contains store creation logic using `od(D0(t?I0(b,{...}):b))`. `od` is `createStore` from zustand, and `I0` appears to be the `persist` middleware from `zustand/middleware`. State controllers like `j` (AccountController), `se` (NetworkController), `fe` (ModalController) use this pattern."
        }
      ]
    },
    {
      "file": "chunk-EHJU4KF2.js",
      "occurences": [
        {
          "name": "qrcode",
          "motivation": "The code implements a comprehensive QR code generation system. This includes modules for QR code model data (versions, error correction, character encoding like SJIS), data segmentation (Numeric, Alphanumeric, Byte, Kanji), Reed-Solomon error correction, mask pattern application, and rendering to Canvas (`toCanvas`, `toDataURL`) and SVG (`toString`). The exported API (`O.create`, `O.toCanvas`, `O.toDataURL`, `O.toString` which are assigned to `Pn.a`) and the options object structure (e.g., `errorCorrectionLevel`, `version`, `maskPattern`, `color: {dark, light}`, `margin`) are characteristic of the popular 'qrcode' JavaScript library."
        }
      ]
    },
    {
      "file": "chunk-HNKXLYLO.js",
      "occurences": [
        {
          "name": "Safe Client Gateway SDK",
          "motivation": "The code defines a collection of functions (within modules aliased as `b`, `G`, `y`, and primarily exported via `bt`) that are specifically designed to interact with the Safe{Wallet} backend API. This is evidenced by the `DEFAULT_BASE_URL` constant set to `\"https://safe-client.safe.global\"` (module `y`) and numerous exported functions like `getSafeInfo`, `proposeTransaction`, `getBalances`, etc. (module `bt`), which construct and call endpoints on this domain. This self-contained set of functionalities acts as an SDK for the Safe Client Gateway service."
        }
      ]
    },
    {
      "file": "chunk-I3CEA2SL.js",
      "occurences": [
        {
          "name": "Preact",
          "motivation": "The code implements and utilizes a significant portion of the Preact API.\n- **Core Components/Functions**: It defines functions and classes that mirror Preact's core API, such as `createElement` (exported as `h` from module `Z_`, implemented by function `y_`), `Fragment` (exported as `Fragment` from `Z_`, implemented by function `R`), `Component` (exported as `Component` from `Z_`, implemented by class `M`), `render` (exported as `render` from `Z_`, implemented by function `P_`), and `createContext` (exported as `createContext` from `Z_`, implemented by function `Y_`).\n- **Options Object**: A Preact-specific `options` object (aliased as `h` and exported from `Z_`) is used for hooking into the rendering lifecycle (e.g., `h.vnode`, `h.__e` for error handling, `h.diffed`, `h.unmount`).\n- **Hooks**: It implements and exports a suite of hooks analogous to Preact/React hooks within the `fe` module (initialized within `se`). These include `useState` (implemented by `I_`), `useEffect` (implemented by `_e`), `useContext` (implemented by `re`), `useRef` (implemented by `ee`), `useMemo` (implemented by `n_`), `useLayoutEffect` (implemented by `$_`), `useReducer` (implemented by `R_`), `useImperativeHandle` (implemented by `te`), `useErrorBoundary` (implemented by `ie`), and `useId` (implemented by `ue`). The internal hook management logic (e.g., `E` function for getting hook state, `C` as hook index counter) is present.\n- **Virtual DOM & Reconciliation**: The code contains detailed logic for Virtual DOM node creation (`F` function), diffing, and reconciliation (e.g., main reconciliation logic in `Z` function, children reconciliation in `b_` function, DOM element updates in `K_` function). This includes handling of props, state, refs, keys, and lifecycle methods (`componentDidMount`, `componentWillUnmount`, etc., managed via `__h` arrays).\n- **Exports**: The pattern `G(Z_, { Component: ()=>M, ... })` and `G(fe, { useState: ()=>I_, ... })` (where `G` is an imported helper function likely for defining module exports) clearly indicates the export of these Preact-like functionalities."
        },
        {
          "name": "clsx",
          "motivation": "The code defines a function `u_` that replicates the functionality of the `clsx` library, which is used for conditionally constructing CSS class name strings.\n- **Function Logic**: The `u_` function iterates through its arguments. It uses a helper `i_` which processes strings, numbers, arrays (recursively), and objects (iterating over keys) to build a space-separated string of class names if their corresponding values are truthy. This is the core behavior of `clsx`.\n- **Export**: The `u_` function is assigned to `q_`. The module-like structure `B_` has `u_` exported as `clsx` and `q_` as its `default` export, as indicated by `G(B_,{clsx:()=>u_,default:()=>q_})`. The statement `V_=z(()=>{\"use strict\";q_=u_});` further shows `q_` being initialized with `u_`."
        }
      ]
    },
    {
      "file": "chunk-KR2GNOUA.js",
      "occurences": [
        {
          "name": "ms",
          "motivation": "The code block assigned to the variable `E` implements functionality to convert time expressions between string representations (e.g., \"2 days\", \"10h\", \"7d\") and millisecond values, and vice-versa into human-readable formats. This is evidenced by:\n- The presence of constants for `h` (1000ms), `g` (60s), `m` (60m), `f` (24h), `P` (7d), `q` (365.25d).\n- The `B(r)` function parses strings like `\"10s\"` or `\"2h\"` using a regular expression `/^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i` and a switch statement to convert them to milliseconds based on the unit.\n- Functions `T(r)` and `U(r)` format millisecond numbers into short (e.g., \"1d\", \"2h\") and long (e.g., \"1 day\", \"2 hours\") string representations, respectively.\nThis behavior is characteristic of the `ms` library, commonly used for time duration conversions."
        },
        {
          "name": "debug",
          "motivation": "The code blocks assigned to variables `j` and `Q` implement a debugging utility. This is indicated by:\n- The creation of a `debug` function `e(t)` that returns a logging function `a` associated with a `namespace`.\n- Methods like `e.enable(t)`, `e.disable()`, `e.enabled(t)` for controlling which debug messages are shown, often based on a string pattern.\n- The use of `localStorage` (via `c.storage.getItem(\"debug\")` and `c.storage.setItem(\"debug\",r)`) and potentially `process.env.DEBUG` (checked in `function $()`) to persist and load enabled namespaces, a common feature of the `debug` library.\n- Color-coded console output, managed by `e.selectColor(t)`, `a.useColors`, `c.colors` array, and formatting logic in `G(r)` that prepends `%c` specifiers.\n- Calculation of time differences between log messages (`C.diff = p - (o || p)`).\n- Use of the `ms` library (imported as `E()`, and called as `w.exports.humanize(this.diff)` where `w.exports.humanize` is set to `E()`) for formatting these time differences.\n- Methods like `a.extend` for creating new debug instances with extended namespaces.\n- Formatters (`e.formatters`, `K.j` for JSON stringification).\nThese features collectively point to the `debug` library."
        }
      ]
    },
    {
      "file": "chunk-OE5MH5QI.js",
      "occurences": [
        {
          "name": "Noble Cryptography Libraries (or a derivative/part thereof)",
          "motivation": "The code structure and functionality strongly indicate that it is a part of, or a derivative/minified version of, the Noble Cryptography suite of libraries (e.g., components typically found in `@noble/hashes` or similar packages).\n\nThis conclusion is based on several observations:\n- The presence of wrapper functions `H` (similar to `wrapConstructor`) and `S` (similar to `wrapConstructorWithOpts`) for hash algorithm instantiation, a pattern commonly used in Noble libraries to provide a consistent API for hash functions.\n- The definition of a base class `s` with a `clone()` method, which is characteristic of the `Hash` base class in Noble libraries from which specific hash implementations inherit.\n- A comprehensive set of utility functions for cryptographic operations, including:\n    - Type checking and assertion for numbers and `Uint8Array`s (functions `c`, `a`, `f`).\n    - Byte array manipulation functions: `L` (for converting `Uint8Array` to `Uint32Array`, like `toWords`), `U` (for creating `DataView`, like `ensureDataView`), `E` (bitwise rotation, `rotr`), `y` (byte swapping, `byteSwap`), `O` (conditional byte swapping for endianness, `byteSwapIfBE`).\n    - Endianness detection (variable `B`, `isLE`).\n    - String-to-byte array conversion (`l` for `utf8ToBytes`) and input normalization to `Uint8Array` (`p` for `toBytes`).\n    - Byte array concatenation (`k` for `concatBytes`).\n- The function `V` (exported as `p` in the minified code) for generating random bytes, which attempts to use `globalThis.crypto.getRandomValues`, a standard method for obtaining cryptographically secure random numbers, also a common utility in such libraries.\n\nThese elements, particularly the specific functional patterns and utility functions, collectively point to the code being a segment of a Noble cryptographic library, possibly bundled or minified."
        },
        {
          "name": "Web Crypto API",
          "motivation": "The code explicitly checks for the existence of `globalThis.crypto` and its methods. Specifically, the function `V` (exported as `p`) attempts to use `globalThis.crypto.getRandomValues()` to generate an array of random bytes. It also includes a check for `globalThis.crypto.randomBytes()`, which is less common in browsers but might be present in Node.js environments or polyfilled. This demonstrates a direct utilization of the Web Crypto API (or a similar cryptographic API provided by the JavaScript environment) for fundamental cryptographic operations like random number generation."
        }
      ]
    },
    {
      "file": "chunk-PBVOTSOE.js",
      "occurences": [
        {
          "name": "Angular",
          "motivation": "- The code defines components (e.g., `dt` which becomes `app-notification-image`, and `mn` which becomes `app-notification`) using a structure and decorators characteristic of Angular. For instance, `M` (likely a minified version of Angular's `ɵɵdefineComponent`) is used with `type`, `selectors`, `inputs`, `decls`, `vars`, `consts`, `template`, `dependencies`, and `styles` properties.\n- Angular's dependency injection is evident, with `_(X)` (likely `ɵɵdirectiveInject` or `ɵɵinject`) used in constructors (e.g., `new(e||n)(_(X),_(et),_(lt))`).\n- Modern Angular features like `signals` are used: `h()` (likely `signal()`) is used to declare reactive state (e.g., `this.hashId = h()`).\n- The `effect` primitive is also used: `b(()=>{...})` (likely `effect()`) for running side effects in response to signal changes.\n- Compiled Angular template functions are present, such as `m` (e.g., `m(0,\"img\",0)` for element creation), `g` (e.g., `g(\"lazyLoad\", ...)` for property binding), `f` (e.g., `f(1,\"x\")` for text node creation), `c` (e.g., `c(0,\"button\",12)` for element start/end), `P` (e.g., `P(\"click\", ...)` for event listeners).\n- Angular Pipes are defined, for example, `pt` (NotificationTextPipe) uses `D` (likely `ɵɵdefinePipe`) with `name: \"notifText\"`.\n- Angular Router's `routerLink` directive is used, as seen with `g(\"routerLink\", R(2,_t,t.hashId))`, where `R` is likely a template instruction for directive inputs."
        },
        {
          "name": "NgRx",
          "motivation": "- The `mn` component injects and uses a `store` object: `constructor(t){this.store=t}` where `t` is `_(nt)`.\n- It interacts with the store using `this.store.select(it)` to retrieve state. `it` is an imported selector (`import{d as it}from\"./chunk-EJZLPBRJ.js\";`).\n- It dispatches actions to the store using `this.store.dispatch(S({txId:t.id}))` and `this.store.dispatch(T({...}))`. `S` and `T` (imported from `./chunk-DBPOOQIB.js`) are characteristic of NgRx action creators.\n- The pattern of selecting data and then piping it through RxJS operators (`this.collections$=this.store.select(it).pipe(B(...))`) is a hallmark of NgRx usage."
        },
        {
          "name": "RxJS",
          "motivation": "- The `.pipe(B(...))` method is invoked on an Observable returned by `this.store.select(...)`. The `pipe` method is central to using RxJS operators to compose asynchronous operations.\n- `B` (imported as `w` from `./chunk-DR7SPOG3.js` then aliased, or directly `B` from chunk-DR7SPOG3's `import {w as B}` ) is an RxJS operator used within the `.pipe()` chain (e.g., `map`, `filter`, `tap`).\n- RxJS is a foundational library for Angular and NgRx, used extensively for managing asynchronous data streams and events."
        }
      ]
    },
    {
      "file": "chunk-PGV2D432.js",
      "occurences": [
        {
          "name": "Web3Modal (WalletConnect)",
          "motivation": "The code interacts with WalletConnect services and uses terminology associated with it:\n- API calls are made to `explorer-api.walletconnect.com`, which is WalletConnect's explorer API endpoint.\n- Constants such as `WALLETCONNECT_DEEPLINK_CHOICE` and `WCM_VERSION` (likely Web3Modal Version) are defined and used. The value `\"wcm\"` is used for `sdkType` and `\"js-2.6.2\"` for `sdkVersion` in API requests, indicating a Web3Modal client.\n- Functions like `setWalletConnectDeepLink`, `formatNativeUrl`, `formatUniversalUrl` for WalletConnect URIs, and `getDesktopListings`, `getMobileListings` to fetch wallet information are characteristic of Web3Modal or a similar WalletConnect SDK."
        }
      ]
    },
    {
      "file": "chunk-RI7A2EBQ.js",
      "occurences": [
        {
          "name": "ethers",
          "motivation": "The code includes a `Logger` class (variable `ee`) with versioned module identifiers (e.g., `logger/5.7.0`, `bytes/5.7.0`, `bignumber/5.7.0`), `BigNumber` (variable `be`), `FixedNumber` (variable `Yn`), address utilities (e.g., `qo` for `getAddress`), hashing utilities (e.g., `S0` for `keccak256`), signing key utilities (e.g., `x0` class), and transaction-related enums (e.g., `jo` for transaction types). These are characteristic of `ethers.js` v5."
        },
        {
          "name": "query-string",
          "motivation": "The code in variable `W0` (assigned to `Go`) exports functions like `extract`, `parse`, `stringify`, `parseUrl`, `stringifyUrl`, and handles options like `arrayFormat`. This API and functionality match the `query-string` library."
        },
        {
          "name": "bn.js",
          "motivation": "The code in variable `rr` (assigned to `Af` which is then used in `pt`) defines a class for arbitrary-precision integers with methods like `toString`, `toNumber`, `add`, `sub`, `mul`, `invm`, `toRed`, `fromRed`, which is characteristic of `bn.js`."
        },
        {
          "name": "elliptic",
          "motivation": "The code defines elliptic curve operations and presets. Variable `Ca` contains a `package.json`-like structure explicitly naming 'elliptic'. Variable `Da` defines base classes for curves and points. `ka`, `ja`, `Ya` implement specific curve types (short Weierstrass, Montgomery, Edwards). `Cn` defines curve presets (e.g., `p256`, `secp256k1`, `ed25519`). `Ks` provides an EC context for key generation, signing, and verification. This is all characteristic of `elliptic.js`."
        },
        {
          "name": "hash.js",
          "motivation": "The code includes implementations for various hash algorithms. `gi` defines a `BlockHash` base class. `fs` (SHA1), `Cf` (SHA256), `us` (SHA224), `Tf` (SHA512), `ms` (SHA384), `_s` (RIPEMD160) are concrete hash implementations. `Es` implements HMAC. These modules are bundled in `Rn` and are characteristic of `hash.js`."
        },
        {
          "name": "@noble/hashes",
          "motivation": "The code contains SHA256 (variable `Ea`), SHA512 (variable `ao` containing `Nr`), and SHA3/Keccak-256 (variable `Xo` assigned to `M1`) implementations with structures and internal function names (e.g., `_initState`, `_stateHi`, `_stateLo`, Keccak permutation `L`) consistent with the `@noble/hashes` library. Ed25519 signing/verification utilities within `ao` also point to `@noble` crypto libraries."
        },
        {
          "name": "@noble/curves",
          "motivation": "The code in variable `Ra` implements X25519 elliptic curve Diffie-Hellman (scalar multiplication functions like `wf`, `Na`) using low-level arithmetic operations on `Float64Array`, characteristic of `@noble/curves/x25519`."
        },
        {
          "name": "@noble/ciphers",
          "motivation": "The code includes implementations for ChaCha20Poly1305 (variable `da`, class `Ru`), Poly1305 (variable `oa`, class `sa`), HMAC (variable `zi`, class `la`), and HKDF (variable `cf`, class `Tu`), which are cryptographic primitives provided by `@noble/ciphers`."
        },
        {
          "name": "@noble/random",
          "motivation": "The code defines `BrowserRandomSource` (variable `ya`), `NodeRandomSource` (variable `wa`), and `SystemRandomSource` (variable `Aa`) for generating random bytes, along with utility functions like `randomBytes` and `randomString` (variable `ki`). This is characteristic of `@noble/random`."
        },
        {
          "name": "@metamask/utils",
          "motivation": "The code defines codec objects using a `Mo` function (e.g., `xo` for UTF-8, `e0` for ASCII/latin1) which specify `name`, `prefix`, `encoder`, and `decoder` properties. This pattern and the specific encoder/decoder logic (e.g., `new TextDecoder`, `new TextEncoder`) are found in `@metamask/utils`."
        },
        {
          "name": "@metamask/abi-utils",
          "motivation": "The code in variable `M3` uses a dispatcher pattern (`R0`) that selects encoding/decoding functions based on type strings (like `utf8`, `hex`). `ef` (imported into `M3`) provides `base16` (hex) encoding. This is consistent with how `@metamask/abi-utils` handles ABI type encoding/decoding."
        },
        {
          "name": "@metamask/caip",
          "motivation": "The code includes functions for CAIP string manipulation: `g1` joins namespace and reference using `Qo` (which is ':'), `y1` splits CAIP strings, and `A1` and `x5` further process these parts. This functionality aligns with the `@metamask/caip` library."
        },
        {
          "name": "@metamask/SIPUtils",
          "motivation": "The code defines `r6` as `\"did:pkh:\"` and includes functions like `i6` (extracting chain ID from DID) and `n6` (extracting address from DID). The function `S5` constructs a Sign-In with Ethereum (SIWE, EIP-4361) message. Functions `a6`, `s6`, `o6`, `h6` deal with parsing and incorporating 'recap' (Resource Capabilities) information into SIWE messages. This is indicative of utilities for SIPs (Sign-in with Ethereum Proposals), likely from `@metamask/SIPUtils` or a similar library focused on SIWE and UCANs/recaps."
        },
        {
          "name": "@walletconnect/utils",
          "motivation": "The constant `t6` is defined as `\"https://rpc.walletconnect.com/v1\"`. The function `_5` uses this URL as a default for a `fetch` call related to `eth_call`, which is characteristic of WalletConnect's RPC utilities."
        },
        {
          "name": "@walletconnect/jsonrpc-utils",
          "motivation": "The function `e6` generates a numeric ID using `Date.now() + Math.floor(Math.random() * 1e3)`. This is a common method for creating unique JSON-RPC request IDs, often found in WalletConnect's JSON-RPC utility libraries."
        }
      ]
    },
    {
      "file": "chunk-UAOJMTAB.js",
      "occurences": [
        {
          "name": "viem",
          "motivation": "The code explicitly defines error classes that inherit from a base error class named `ViemError` and references viem's version (e.g., \"viem@2.7.15\").\nIt includes numerous functions and patterns characteristic of viem, such as ABI encoding/decoding (`encodeAbiParameters`, `decodeAbiParameters`, `formatAbiItem`), contract interaction helpers (`call`, multicall logic using `aggregate3`), error handling (`decodeErrorResult`), and Ethereum-specific utilities (address checking, keccak256 hashing which internally uses the crypto library).\nThe overall structure for handling blockchain interactions, especially seen in functions like `zr` (simulating `eth_call`) and offchain data resolution (`au`, `On`), aligns with viem's functionalities."
        },
        {
          "name": "Noble Cryptography Libraries (e.g., noble-hashes)",
          "motivation": "The codebase contains a SHA3/Keccak implementation (class `He`) and utility functions for various hashing algorithms (e.g., `Ne` for keccak256, specific Keccak variants like `Eo`, `To`).\nIt imports helper functions (e.g., `Tt` as a base class for hashers, `Et` for byte conversion, `Mt` for u32 array views) from an internal module (`./chunk-4LLAJJBA.js`), which are indicative of the patterns used in Noble cryptography libraries (like `noble-hashes`).\nThese cryptographic functions are used by other parts of the code, for example, in ABI-related signature generation (`_e`, `Y`) and by viem's functionalities."
        }
      ]
    },
    {
      "file": "chunk-UCLFYNNM.js",
      "occurences": [
        {
          "name": "Angular",
          "motivation": "The code utilizes Angular-specific static properties for Ivy-compiled components, directives, pipes, modules, and injectables. Examples include:\n- `static {this.\\u0275fac = ...}` (factory definition)\n- `static {this.\\u0275prov = h(...)}` (provider definition, where `h` is an Angular internal function like `ɵɵdefineInjectable`)\n- `static {this.\\u0275pipe = S(...)}` (pipe definition, e.g., `TimeagoPipe.\\u0275pipe = S({name:\"timeago\", ...})`, where `S` is `ɵɵdefinePipe`)\n- `static {this.\\u0275mod = M(...)}` (module definition, e.g., `TimeagoModule.\\u0275mod = M({type:t})`, where `M` is `ɵɵdefineNgModule`)\n- `static {this.\\u0275inj = w(...)}` (injector definition, e.g., `TimeagoModule.\\u0275inj = w({})`, where `w` is `ɵɵdefineInjector`)\nDependency injection is evident with `u(A,24)`, `u(D,16)`, etc., where `u` is an Angular injection function (like `ɵɵinject`) and `D` is used with `i.markForCheck()`, indicating `ChangeDetectorRef`."
        },
        {
          "name": "RxJS",
          "motivation": "The code employs reactive programming patterns characteristic of RxJS:\n- An imported symbol `f` is instantiated (e.g., `this.changes = new f`, `this.stateChanges = new f`) and used with methods like `.subscribe()`, `.next()`, and `.complete()`. This pattern is typical for RxJS `Subject` or `BehaviorSubject`.\n- Observable streams are created and manipulated using the `.pipe()` method, for instance, `v(0).pipe(y(...), k(1))` and `this.clock.tick(this.date).pipe(m(...))`. \n- The imported symbols `v`, `y`, `b`, `g`, `k`, `m` behave like RxJS observable creation functions and operators: \n  - `v(0)` likely corresponds to `timer(0)`.\n  - `y` is used as a higher-order mapping operator in `pipe(y(() => ...))`, suggesting `switchMap`.\n  - `b(n)` returns an Observable, suggesting `timer(n)`.\n  - `g()` returns an Observable, suggesting `EMPTY`.\n  - `k(1)` is a common pattern for `take(1)`.\n  - `m(() => this.live, this)` suggests an operator like `takeWhile`."
        },
        {
          "name": "ngx-timeago",
          "motivation": "The code defines a set of classes and a module with names and structure highly indicative of the `ngx-timeago` library or a compatible custom implementation:\n- Class names: `TimeagoPipe`, `TimeagoFormatter`, `TimeagoClock`, `TimeagoIntlService`.\n- Module name: `TimeagoModule`.\n- The `TimeagoModule` class exposes static methods `forRoot(e={})` and `forChild(e={})`, which is a common pattern for configuring Angular libraries like `ngx-timeago`.\n- The core functionality implemented by `TimeagoPipe` is to format a date into a human-readable relative time string (e.g., \"5 minutes ago\"), which is the specific purpose of `ngx-timeago`."
        }
      ]
    },
    {
      "file": "chunk-USZTPXNT.js",
      "occurences": [
        {
          "name": "Bundler Runtime Helpers",
          "motivation": "The provided code is a collection of utility functions characteristic of a JavaScript bundler's runtime (e.g., ESBuild, Rollup, Webpack). These functions facilitate:\n- **Module System Management**: Functions like `G` (dynamic `require` emulation: `typeof require<\"u\"?require:...`), `H` (bundle-internal module lookup), `J` (lazy module initialization), `K` (CommonJS `exports` pattern: `(b={exports:{}}).exports,b`), and `L`, `M`, `N`, `O` (ES module interoperability helpers for `default` exports and `__esModule` marking) are standard in bundler outputs.\n- **JavaScript Feature Transpilation/Polyfilling**:\n    - Object utilities like `E` (similar to `Object.assign`), `F` (similar to `Object.defineProperties`), and `I` (object rest spread helper).\n    - Asynchronous operation helpers such as `Q` (async/await helper: `new Promise(...)` wrapping generator logic), `v`, `R`, `S`, `T` (support for async iterators/generators, identifiable by usage of `Symbol.asyncIterator` or `Symbol.iterator` and Promise-based iteration logic).\n    - `P` (helper for `super` property access using `Reflect.get`).\n- **Minified and Self-Contained**: The code is minified (e.g., single-letter variable names like `x`, `m`, `y`) and self-contained, designed to be included in bundled JavaScript files to provide these foundational capabilities."
        }
      ]
    },
    {
      "file": "chunk-VWMMQM55.js",
      "occurences": [
        {
          "name": "Self-contained SHA-256 Hashing Module",
          "motivation": "The code implements the SHA-256 hashing algorithm. This is identified by SHA-256 specific initial hash values (in variable `d`), round constants (in variable `R`), and the compression function logic (in class `m`'s `process` method). It's a self-contained module providing this cryptographic functionality and does not appear to use external top-level libraries."
        }
      ]
    },
    {
      "file": "chunk-X75IXMRO.js",
      "occurences": [
        {
          "name": "cross-fetch (or a fetch polyfill)",
          "motivation": "The code includes a comprehensive polyfill for the `fetch` API (`Zr=function(){...}; (function(e){...})(Zr)`). This polyfill is then used for HTTP requests via `(0,aa.default)(...)`, where `aa` is derived from this polyfill."
        },
        {
          "name": "EventEmitter2",
          "motivation": "A full implementation of `EventEmitter2` is present (`tc=Ga((Qa,ec)=>{...A.EventEmitter2=A})`) and it's imported and used (`sr=Lo(tc())`). Classes like `Os` (RemoteCommunication) and `Ts` (KeyExchange) extend `sr.EventEmitter2`."
        },
        {
          "name": "uuid",
          "motivation": "The code contains functions for UUID v4 generation, specifically `dr=bf` which uses `To()` relying on `crypto.getRandomValues`. This pattern is characteristic of the `uuid` library. It's used, for example, in `let o=dr();t.state.channelId=o;` to generate channel IDs."
        },
        {
          "name": "buffer (Node.js Buffer polyfill)",
          "motivation": "Includes a polyfill/implementation of the Node.js `Buffer` API (`function Y(e,t,n){...}`). This is commonly used for binary data handling in browser environments. It's accessible via `Y.from(...)`, `Y.isBuffer(...)` etc."
        },
        {
          "name": "debug",
          "motivation": "The code uses the pattern `(0,qe.default)(\"ModuleName:Layer\")` (e.g., `Ou=(0,qe.default)(\"KeyExchange:Layer\")`), where `qe` is an import of the `debug` library (`gf()`). This is used for conditional logging throughout the SDK modules."
        },
        {
          "name": "eciesjs",
          "motivation": "Implements ECIES encryption/decryption. The class `Er` (ECIES wrapper) initializes `this.ecies` with `Hn.PrivateKey.fromHex(...)` or `new Hn.PrivateKey()` and uses `Hn.encrypt` and `Hn.decrypt`. `Hn` itself is a module that combines symmetric encryption (`bo` which includes `symEncrypt`, `aesEncrypt`) and elliptic curve cryptography from `jn`."
        },
        {
          "name": "socket.io-client",
          "motivation": "The code initializes a socket connection using `this.state.socket=Ya(s,o)`, where `Ya` is imported from another chunk and represents the `socket.io-client` library. Characteristic options like `transports: y0` (where `y0=[\"websocket\"]`) are used."
        },
        {
          "name": "@metamask/providers (or similar Ethereum provider implementation)",
          "motivation": "Defines a hierarchy of classes (`Ws` extends `Q1`, `Q1` extends `X1`, `X1` extends `g1` which is `SafeEventEmitter`). These classes implement typical Ethereum provider methods like `request`, `send`, `_rpcRequest`, and handle EIP-1193 events such as `accountsChanged`, `chainChanged`, `connect`, `disconnect`. The use of `obj-multiplex` (`Y1=vo(oo.ObjectMultiplex)`) within `X1` for stream management is also common in MetaMask provider implementations."
        },
        {
          "name": "@metamask/eth-rpc-errors",
          "motivation": "Uses standardized Ethereum RPC error structures. For instance, `Nh.ethErrors.provider.disconnected()` is called. The `Nh` module imports error definitions from `gn`, `Pa`, and `dn` which define `EthereumRpcError`, `EthereumProviderError`, and standard error codes, consistent with `@metamask/eth-rpc-errors`."
        },
        {
          "name": "bowser",
          "motivation": "The code uses `jh.parse(window.navigator.userAgent)` where `jh=vo($h.exports)` and `$h.exports` is the `bowser` library. This is used for parsing the browser's user agent string to determine browser type and version, for example in `e._detectBrowser`."
        },
        {
          "name": "@metamask/onboarding",
          "motivation": "Contains class `vp` with logic for `startOnboarding()` and `isMetaMaskInstalled()`. This class handles the process of guiding users to install MetaMask if it's not detected, which is the core functionality of `@metamask/onboarding`."
        },
        {
          "name": "Cryptographic Primitives (AES, SHA, ECC, ChaCha20, Poly1305, HKDF)",
          "motivation": "The codebase includes numerous cryptographic functions: AES encryption modes (GCM, CBC, CTR, SIV, KW, KWP in module `Ae`), SHA hashing (SHA256 in `zt`, SHA512/384 in `Ie`), elliptic curve operations (secp256k1, X25519, Ed25519 via modules `gu` and `$d`), ChaCha20Poly1305 (in `Lu`), HKDF (in `qn`), and Poly1305/GHASH (in `Sn` and `wr`). These are fundamental for secure communication and Ethereum interactions."
        },
        {
          "name": "@paulmillr/qr (or similar QR code generator)",
          "motivation": "The function `sf(this.link,\"svg\",{ecc:\"medium\",scale:2})` and its internal implementation `sf(e,t=\"raw\",n={})` contain detailed logic for QR code generation, including error correction codes (ECC), different output formats (SVG, ASCII, GIF), patterns, and masking. This is characteristic of a QR code generation library."
        },
        {
          "name": "obj-multiplex",
          "motivation": "Explicitly imported (`Y1=vo(oo.ObjectMultiplex)`) and instantiated (`new Y1()`) within the provider implementation class `X1`. This is used to multiplex different communication channels over a single underlying stream."
        },
        {
          "name": "readable-stream (or Node.js stream polyfills)",
          "motivation": "The code extensively uses Node.js stream classes like `or.Duplex`, `or.Readable`, `or.Writable`, and `or.Transform` (where `or=zs.exports`). This indicates the use of stream polyfills for browser compatibility, commonly provided by libraries like `readable-stream`."
        },
        {
          "name": "Stencil.js (or similar Web Component toolchain)",
          "motivation": "The code contains `Jp=(e,t={})=>{...s.define(S,of(E,p,1))}` which defines custom elements (like `mm-install-modal`, `mm-pending-modal`, `mm-select-modal`). The dynamic import pattern `Promise.resolve().then(function(){return f2})` to load component definitions (`f2` contains these modal definitions) is also typical of Stencil.js or similar web component build tools."
        }
      ]
    },
    {
      "file": "chunk-Y5ANX67C.js",
      "occurences": [
        {
          "name": "tslib",
          "motivation": "The code defines a comprehensive set of helper functions prefixed with `__` (e.g., `__extends`, `__awaiter`, `__decorate`, `__generator`, `__rest`, `__importStar`, `__importDefault`, `__classPrivateFieldGet`, `__classPrivateFieldSet`, `__classPrivateFieldIn`, `__addDisposableResource`, `__disposeResources`). These functions are standard utilities emitted by the TypeScript compiler to provide runtime support for features from newer JavaScript versions or TypeScript-specific features when targeting older JavaScript runtimes. The variable `re` is assigned an object containing these helpers, which is characteristic of how `tslib` exports its utilities. This module effectively provides the functionality of the `tslib` library."
        }
      ]
    },
    {
      "file": "chunk-ZDJ5P4NJ.js",
      "occurences": [
        {
          "name": "Popper.js",
          "motivation": "The code includes functions and variable names highly characteristic of Popper.js, such as `applyStyles` (`Ke`), `arrow` (`ir`), `computeStyles` (`sr`), `eventListeners` (`pr`), `flip` (`ur`), `hide` (`dr`), `offset` (`mr`), `popperOffsets` (`vr`), `preventOverflow` (`gr`). It defines common Popper.js concepts like `placement` (e.g., \"top\", \"bottom\", \"left\", \"right\", \"auto\"), `strategy` (\"absolute\", \"fixed\"), and modifiers. The `br` function (e.g., `Ft=br(...)`) appears to be a minified or wrapped version of Popper's `createPopper` factory, and `En` is an array of default modifiers whose names correspond to standard Popper.js modifiers."
        },
        {
          "name": "Tippy.js",
          "motivation": "The code contains specific Tippy.js class names like `Tn` (`\"tippy-box\"`), `Sr` (`\"tippy-content\"`), `Mr` (`\"tippy-arrow\"`). It defines a main factory function `ot` (assigned to `Vr`) used to initialize Tippy instances (`this.instance=Vr(r, {...})`), which is a common pattern in Tippy.js. It also uses `e._tippy` to store Tippy instances on DOM elements, references `ot.setDefaultProps`, and the overall structure of the `qn` function (internal instance creator) mirrors Tippy.js internals. The code handles props like `content`, `appendTo`, `placement`, `trigger`, `animation`, `theme`, `allowHTML`, `interactive`, which are standard Tippy.js options. The `Wr` function (passed to `ot.setDefaultProps({render:Wr})`) defines the rendering logic for the tooltip structure, also typical for Tippy.js when using a custom render function or its default."
        },
        {
          "name": "Angular",
          "motivation": "The class `Gs` uses Angular lifecycle hooks like `ngOnInit()`, `ngOnDestroy()`, and `ngOnChanges()`. It also has static properties `\\u0275fac` (factory) and `\\u0275dir` (directive metadata) which are indicative of Angular's compiled output for directives/components. The import statement `import{Ca as Kt,Cb as Qt,Ra as Jt,Wc as Zt,tb as Dt}from\"./chunk-DR7SPOG3.js\";` and their usage (e.g., `Dt(Jt)`) suggest minified Angular core functionalities such as dependency injection (`Dt` likely `directiveInject`) and references to `ElementRef` (`Jt`) or other Angular-specific types (`Zt`, `Qt`, `Kt`)."
        }
      ]
    },
    {
      "file": "chunk-ZSSDNERX.js",
      "occurences": [
        {
          "name": "viem",
          "motivation": "The code includes a version string `viem@2.23.2` (derived from `bt.version` and `ht = \"2.23.2\"`). It extensively uses error classes (e.g., `AbiDecodingZeroDataError`, `CallExecutionError`, `HttpRequestError`), ABI utility functions (e.g., `encodeAbiParameters` via `J`, `decodeFunctionResult` via `Un`, `encodeFunctionData` via `Dn`), cryptographic functions (e.g. `Ge` for keccak256), address checksumming (`We`), and implements EIP-3668 OffchainLookup (CCIP-Read) logic using `Xr` (OffchainLookup ABI) and associated functions `B0` and `Yr`. These are characteristic features and patterns of the Viem library."
        }
      ]
    },
    {
      "file": "polyfills-SB2L2NTK.js",
      "occurences": [
        {
          "name": "Zone.js",
          "motivation": "The code defines and uses `Zone`, `ZoneAwarePromise`, and Zone-specific symbols like `__Zone_symbol_prefix`. It extensively patches asynchronous APIs (`setTimeout`, `Promise`, `XMLHttpRequest`, `fetch`, event listeners) by wrapping callbacks and operations with `Zone.current.run`, `Zone.current.scheduleMacroTask`, etc. This is characteristic of Zone.js, used for asynchronous operation tracking and change detection, commonly in frameworks like Angular."
        },
        {
          "name": "buffer (polyfill)",
          "motivation": "The code defines `window.Buffer` and implements the Node.js `Buffer` API. This is evident from functions like `Buffer.alloc`, `Buffer.from`, `Buffer.isBuffer`, `Buffer.byteLength`, and various methods for reading/writing integers and floats (e.g., `Buffer.prototype.write`, `Buffer.prototype.readUIntLE`). The module pattern `fn=Kt(Nt=>{...Nt.Buffer=a...})` and `window.Buffer=hn.Buffer;` at the end clearly indicate this polyfill."
        },
        {
          "name": "base64-js (inlined)",
          "motivation": "The code includes functions for Base64 encoding and decoding: `byteLength` (calculates decoded length), `toByteArray` (decodes Base64 string to byte array), and `fromByteArray` (encodes byte array to Base64 string). The presence of the Base64 character set `ae=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"` and the logic within these functions match the `base64-js` library. This is inlined as a module initialized by `ze=Kt(zt=>{...})`."
        },
        {
          "name": "ieee754 (inlined)",
          "motivation": "The code contains functions `fe.read` and `fe.write` for converting between IEEE 754 floating-point numbers (single and double precision) and byte arrays. This functionality is characteristic of the `ieee754` library, often used in conjunction with buffer operations. This is inlined as a module initialized by `We=Kt(fe=>{...})`."
        },
        {
          "name": "Angular $localize (runtime)",
          "motivation": "The code defines `globalThis.$localize = jt;`. The `jt` function is a tagged template literal processor that checks for `jt.translate` and handles localization metadata syntax (e.g., `:message_id:meaning|description@@id`). This is the runtime part of Angular's `$localize` internationalization (i18n) framework."
        }
      ]
    }
  ],
  "urls": [],
  "ethereum": [
    {
      "file": "chunk-CPVF7SWV.js",
      "occurences": [
        {
          "count": 6
        }
      ]
    },
    {
      "file": "chunk-X75IXMRO.js",
      "occurences": [
        {
          "count": 16
        }
      ]
    },
    {
      "file": "chunk-ZSMZYYET.js",
      "occurences": [
        {
          "count": 1
        }
      ]
    },
    {
      "file": "main-RP5TA2PI.js",
      "occurences": [
        {
          "count": 2
        }
      ]
    }
  ],
  "fallbacks": []
}