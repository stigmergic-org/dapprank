{
  "version": 2,
  "contentHash": "bafybeiac7ho2po2l3smw33kng7t57cliihnu6zqcw2jknxynsh5bk6encm",
  "timestamp": 1745424733,
  "blockNumber": 22332539,
  "rootMimeType": "inode/directory",
  "totalSize": 6161185,
  "favicon": "favicon.ico",
  "title": "Ethereum Phunks Market",
  "distributionPurity": {
    "externalScripts": [
      {
        "file": "index.html",
        "occurences": [
          {
            "type": "script",
            "url": "https://plausible.io/js/script.js"
          }
        ]
      }
    ],
    "externalMedia": []
  },
  "networkingPurity": [
    {
      "file": "chunk-4EDCFSKP.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://safe-client.safe.global"
          ],
          "library": "Safe{Core} Client SDK (or similar)",
          "type": "auxiliary",
          "motivation": "```javascript\n// Base URL variable initialized with the default\nvar a=ye.DEFAULT_BASE_URL,Me=e=>{a=e};\n\n// Helper function using fetch\nfunction z(e,i,t,s,c){return y(this,void 0,void 0,function*(){/*...*/let C=yield fetch(e,I);return M(C)})}\nu.fetchData=z;\n\n// Helper function using fetch\nfunction Z(e,i,t){return y(this,void 0,void 0,function*(){/*...*/let c=yield fetch(e,s);return M(c)})}\nu.getData=Z\n\n// Endpoint functions combining base URL and path, calling fetchData/getData\nfunction S(e,i,t,s){let c=(0,p.insertParams)(i,t),T=(0,p.stringifyQuery)(s);return`${e}${c}${T}`}\nfunction k(e,i,t){let s=S(e,i,t?.path,t?.query);return(0,p.fetchData)(s,\"POST\",t?.body,t?.headers,t?.credentials)}l.postEndpoint=k;\nfunction ne(e,i,t,s){/*...*/let c=S(e,i,t?.path,t?.query);return(0,p.getData)(c,t?.headers,t?.credentials)}l.getEndpoint=ne;\n\n// Example API call using an endpoint function\nfunction Ge(e,i){return(0,r.getEndpoint)(a,\"/v1/chains/{chainId}/safes/{address}\",{path:{chainId:e,address:i}})}n.getSafeInfo=Ge;\n```\nThe code defines helper functions `fetchData` (named `z`) and `getData` (named `Z`) which internally use the native `fetch` API. These helpers are then used by `postEndpoint`, `getEndpoint`, `putEndpoint`, and `deleteEndpoint` functions. These endpoint functions construct the full URL by combining a base URL (stored in variable `a`, defaulting to `https://safe-client.safe.global`) with specific API paths (e.g., `/v1/chains/{chainId}/safes/{address}`). Numerous exported functions like `getSafeInfo`, `getMultisigTransactions`, etc., utilize these endpoint functions, directing `fetch` calls to various endpoints under the `https://safe-client.safe.global` domain. These endpoints provide auxiliary data and services related to Safe smart contracts, not direct blockchain RPC or bundler interactions."
        }
      ]
    },
    {
      "file": "chunk-5JMKXA2Q.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "dynamic RPC endpoint"
          ],
          "library": "ox / Custom Transport",
          "type": "rpc",
          "motivation": "The `Nx` function uses the native `fetch` API to make HTTP requests. This function is wrapped by `wS`, which acts as an HTTP transport layer. `wS` is configured with a URL (`e`) passed during client setup, typically referencing `chain.rpcUrls.default.http[0]`. This transport is then used by the main client (`$f`) to execute various JSON-RPC methods (`eth_getBlockNumber`, `eth_call`, `eth_sendRawTransaction`, etc.). Therefore, `fetch` is used to send RPC requests to a dynamically configured endpoint."
        }
      ]
    },
    {
      "file": "chunk-BPSYNGBE.js",
      "occurences": [
        {
          "method": "XMLHttpRequest",
          "urls": [],
          "library": "otherwise",
          "type": "auxiliary",
          "motivation": "The code defines a factory class `oo` with a `build` method: `build(){return new XMLHttpRequest}`. This class is provided via Angular's DI (`provide:jn, useClass:oo`). While this indicates the capability to make `XMLHttpRequest` calls, this specific snippet only contains the factory to *create* the request object. The actual `open()` and `send()` calls, which would specify the URL, are not present in this file. Therefore, no specific URL can be determined from this code alone."
        }
      ]
    },
    {
      "file": "chunk-FDXPYCFZ.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://explorer-api.walletconnect.com/w3m/v1/getDesktopListings",
            "https://explorer-api.walletconnect.com/w3m/v1/getMobileListings",
            "https://explorer-api.walletconnect.com/w3m/v1/getInjectedListings",
            "https://explorer-api.walletconnect.com/w3m/v1/getAllListings"
          ],
          "library": "WalletConnect Web3Modal",
          "type": "auxiliary",
          "motivation": "The function `L` constructs a `URL` object using the base `E` (`https://explorer-api.walletconnect.com`) and relative paths passed to it (e.g., `/w3m/v1/getDesktopListings`). It then calls `fetch` on this URL. Query parameters including `projectId`, `sdkType` (`wcm`), `sdkVersion` (`js-2.7.0`), and others specific to the listing type (desktop, mobile, etc.) are appended dynamically to the URL before the `fetch` call is made. These endpoints are used to retrieve wallet information from the WalletConnect Explorer API."
        }
      ]
    },
    {
      "file": "chunk-JDKI25G2.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "{{dynamic_rpc_url}}"
          ],
          "library": "Coinbase Wallet SDK (SCW State Manager / WalletLink Relay)",
          "type": "rpc",
          "motivation": "The function `W(t, e)` performs a fetch POST request. It is called by `he.request` (SCW) with `this.chain.rpcUrl` and by `Y.request` (WalletLink) with `this.jsonRpcUrl` when forwarding standard JSON-RPC requests to the configured chain's RPC endpoint. The specific URL (`this.chain.rpcUrl` or `this.jsonRpcUrl`) is determined dynamically based on the selected chain configuration."
        },
        {
          "method": "fetch",
          "urls": [
            "http://rpc.wallet.coinbase.com"
          ],
          "library": "Coinbase Wallet SDK",
          "type": "auxiliary",
          "motivation": "The main provider class `H` explicitly calls the `W` function (which uses fetch) with the constant `Kt` (`http://rpc.wallet.coinbase.com`) when handling the `wallet_getCallsStatus` method."
        },
        {
          "method": "fetch",
          "urls": [
            "https://www.walletlink.org/events/{{eventId}}/seen"
          ],
          "library": "Coinbase Wallet SDK (WalletLink Relay)",
          "type": "auxiliary",
          "motivation": "The `fe` class (HttpEventManager) calls `fetch` with a dynamically constructed URL `${this.linkAPIUrl}/events/${n.eventId}/seen`. `linkAPIUrl` defaults to `We` (`https://www.walletlink.org`). This is used to mark WalletLink events as seen on the backend."
        },
        {
          "method": "fetch",
          "urls": [
            "https://www.walletlink.org/events?unseen=true"
          ],
          "library": "Coinbase Wallet SDK (WalletLink Relay)",
          "type": "auxiliary",
          "motivation": "The `fe` class (HttpEventManager) calls `fetch` with the URL `${this.linkAPIUrl}/events?unseen=true`. `linkAPIUrl` defaults to `We` (`https://www.walletlink.org`). This is used to poll for unseen WalletLink events from the backend."
        },
        {
          "method": "WebSocket",
          "urls": [
            "wss://www.walletlink.org/rpc"
          ],
          "library": "Coinbase Wallet SDK (WalletLink Relay)",
          "type": "auxiliary",
          "motivation": "The `me` class (WebSocketConnection) establishes a WebSocket connection. It's instantiated within the `ge` (Relay) class with a URL derived from `linkAPIUrl` (defaulting to `We`, `https://www.walletlink.org`) by replacing `http` with `ws` and appending `/rpc`. This WebSocket is used for the primary WalletLink communication channel."
        },
        {
          "method": "fetch",
          "urls": [
            "{{origin}}{{pathname}}"
          ],
          "library": "Coinbase Wallet SDK",
          "type": "self",
          "motivation": "The `Bn().checkCrossOriginOpenerPolicy` function performs a HEAD request using `fetch` to the current page's URL (`${window.location.origin}${window.location.pathname}`) to check the `Cross-Origin-Opener-Policy` header."
        }
      ]
    },
    {
      "file": "chunk-JLNLMZ6Z.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [],
          "library": "viem",
          "type": "auxiliary",
          "motivation": "The code contains a function `Lv` (identified as part of viem's CCIP Read implementation `ccipRequest`) that uses the native `fetch` API. This function is designed to make HTTP requests to URLs provided dynamically. Specifically, it iterates through a list of URLs (`r`) passed as an argument, replacing placeholders like `{sender}` and `{data}`. The method (`GET` or `POST`) depends on whether the URL includes `{data}`. Because the URLs are determined dynamically based on external data (likely from an `OffchainLookup` revert), no specific static URLs can be extracted from this codebase."
        },
        {
          "method": "WebSocket",
          "urls": [],
          "library": "viem",
          "type": "rpc",
          "motivation": "The code defines a function `J8` (identified as viem's `getWebSocketRpcClient`) that creates and manages WebSocket connections. It explicitly imports `WebSocket` (via chunk `chunk-MSD3ZN2O.js`) and instantiates it (`new l(e)` where `l` is WebSocket and `e` is the URL). This is used for establishing persistent connections to WebSocket RPC endpoints. The specific URL (`e`) is passed as an argument during client setup and is not hardcoded within this snippet."
        }
      ]
    },
    {
      "file": "chunk-JT5M5CHD.js",
      "occurences": [
        {
          "method": "eth_call",
          "urls": [],
          "library": "viem",
          "type": "rpc",
          "motivation": "The code invokes `e.request({method:\"eth_call\", ...})` within functions like `Mn` (handling contract calls) and `ur` (handling multicall aggregation). This signifies an Ethereum JSON-RPC call. The specific RPC endpoint URL is not defined within this code chunk; it's expected to be configured in the `viem` client instance (`e`) elsewhere in the application. Data is passed via the `params` array, typically containing the transaction object and block specifier."
        },
        {
          "method": "fetch",
          "urls": [
            "url.replace('{sender}', senderAddress).replace('{data}', callData)"
          ],
          "library": "viem",
          "type": "auxiliary",
          "motivation": "The `mr` function, part of the CCIP-Read implementation (`OffchainLookup` error handling), uses `fetch` to query off-chain gateway URLs provided in the error data. The URL pattern is constructed dynamically by replacing placeholders `{sender}` and `{data}` within the URLs retrieved from the `OffchainLookup` error. The request method is 'POST' if the URL does not contain '{data}', sending `{data, sender}` in the body, otherwise it's 'GET'. These URLs point to external gateways defined by smart contracts for off-chain data retrieval."
        }
      ]
    },
    {
      "file": "chunk-KIZ2JL2X.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "/mint/random"
          ],
          "library": "Angular",
          "type": "auxiliary",
          "motivation": "The code constructs a URL using `mi.relayUrl` (an external configuration, represented here by the relative path `/mint/random` as the base URL isn't in the code) and appends query parameters `slug` and `address`. It then calls `fetch` with this dynamically constructed URL inside the `getRandomMintItem` method.\n```javascript\nlet n = `${mi.relayUrl}/mint/random`;\nlet i = new URLSearchParams;\ni.set(\"slug\", this.collection()?.slug ?? \"\"), i.set(\"address\", e ?? \"\");\nlet o = yield (yield fetch(n + \"?\" + i.toString())).json();\n```"
        },
        {
          "method": "fetch",
          "urls": [
            "blob:"
          ],
          "library": "Angular",
          "type": "auxiliary",
          "motivation": "The code calls `fetch` with a variable `r[o+1]` inside the `handleMintImage` method. The preceding code suggests this variable contains a `blob:` URL, used to fetch local blob data.\n```javascript\nlet c = yield fetch(r[o + 1]).then(f => f.arrayBuffer());\n```"
        },
        {
          "method": "fetch",
          "urls": [
            "blob:"
          ],
          "library": "Angular",
          "type": "auxiliary",
          "motivation": "The function `blobUrlToBase64` takes a URL `e` as input and calls `fetch` on it to retrieve a blob. Given the function name and context, `e` is expected to be a `blob:` URL.\n```javascript\nlet i = yield (yield fetch(e)).blob();\n```"
        },
        {
          "method": "fetch",
          "urls": [
            "/static/images/"
          ],
          "library": "Angular",
          "type": "self",
          "motivation": "The code calls `this.imageSvc.fetchSupportedImageBySha(l)` within `createImageArray`. While the `fetch` is inside the service (`ra`), other parts of the code load images using `this.dataSvc.staticUrl + \"/static/images/\" + n.sha`. It's highly probable this service uses `fetch` internally with a similar URL structure (`${this.dataSvc.staticUrl}/static/images/<sha>`), represented here by the relative path. Classified as 'self' assuming `staticUrl` points to the application's own static assets."
        },
        {
          "method": "fetch",
          "urls": [],
          "library": "Angular",
          "type": "auxiliary",
          "motivation": "The code calls `this.dataSvc.fetchMintProgress(s.slug)` in the constructor. The `dataSvc` service (`Xe`) likely uses `fetch` internally to call a custom backend API endpoint to retrieve mint progress for a given collection slug. The exact URL is not present in this code chunk."
        }
      ]
    },
    {
      "file": "chunk-PGV2D432.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://explorer-api.walletconnect.com/w3m/v1/getDesktopListings",
            "https://explorer-api.walletconnect.com/w3m/v1/getMobileListings",
            "https://explorer-api.walletconnect.com/w3m/v1/getInjectedListings",
            "https://explorer-api.walletconnect.com/w3m/v1/getAllListings"
          ],
          "library": "WalletConnect SDK/Core functionality",
          "type": "auxiliary",
          "motivation": "```javascript\nconst E = \"https://explorer-api.walletconnect.com\";\n\nasync function L(e, t) {\n  // ...\n  let o = new URL(e, E);\n  o.searchParams.append(\"projectId\", f.state.projectId); \n  // ... appends more query params from t\n  return (await fetch(o)).json();\n}\n\nvar h = {\n  getDesktopListings(e) {\n    return c(this, null, function* () {\n      return L(\"/w3m/v1/getDesktopListings\", e);\n    });\n  },\n  getMobileListings(e) {\n    return c(this, null, function* () {\n      return L(\"/w3m/v1/getMobileListings\", e);\n    });\n  },\n  getInjectedListings(e) {\n    return c(this, null, function* () {\n      return L(\"/w3m/v1/getInjectedListings\", e);\n    });\n  },\n  getAllListings(e) {\n    return c(this, null, function* () {\n      return L(\"/w3m/v1/getAllListings\", e);\n    });\n  },\n  // ...\n};\n```\n*   The function `L` constructs a URL using the base `https://explorer-api.walletconnect.com` and a path provided by the caller (`/w3m/v1/getDesktopListings`, etc.). \n*   It appends query parameters like `projectId` and others passed in the `t` argument.\n*   It then uses `fetch` to make a GET request to this constructed URL and parses the JSON response.\n*   These endpoints are used to retrieve lists of wallets from the WalletConnect Explorer service, which is auxiliary to direct blockchain interaction."
        }
      ]
    },
    {
      "file": "chunk-UAOJMTAB.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "s.replace(\"{sender}\", t).replace(\"{data}\", e)"
          ],
          "library": "otherwise",
          "type": "auxiliary",
          "motivation": "```markdown\nThe code explicitly calls `fetch` within the `On` async function: `let p = yield fetch(s.replace(\"{sender}\", t).replace(\"{data}\", e), { body: JSON.stringify(c), method: a })`. This function is designed to handle EIP-3668 (CCIP Read / Offchain Lookup) resolution, identified by the surrounding logic (`au` function processing `OffchainLookup` error, `An` ABI, `su` selector). The URL is constructed dynamically using a template string `s` (which comes from the `urls` array provided by the contract in the OffchainLookup error) and replaces placeholders `{sender}` and `{data}` with runtime values `t` (sender address) and `e` (callData) respectively. The variable `a` determines the HTTP method ('GET' or 'POST'). If the method is 'POST', data is passed in the request body as a JSON object: `{ \"data\": e, \"sender\": t }`. These URLs point to external gateways specified by the contract for off-chain data retrieval.\n```"
        }
      ]
    },
    {
      "file": "chunk-UB6PLLYC.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://metamask-sdk.api.cx.metamask.io/evt"
          ],
          "library": "Internal / fetch polyfill",
          "type": "auxiliary",
          "motivation": "The `Wt` function sends buffered analytics events via a POST request using the fetch polyfill (`aa.default`). The URL is constructed from a base URL (`fr`, defaulting to `https://metamask-sdk.api.cx.metamask.io/`) and the path `/evt`."
        },
        {
          "method": "fetch",
          "urls": [
            "https://mainnet.infura.io/v3/",
            "https://goerli.infura.io/v3/",
            "https://sepolia.infura.io/v3/",
            "https://linea-mainnet.infura.io/v3/",
            "https://linea-goerli.infura.io/v3/",
            "https://polygon-mainnet.infura.io/v3/",
            "https://polygon-mumbai.infura.io/v3/",
            "https://optimism-mainnet.infura.io/v3/",
            "https://optimism-goerli.infura.io/v3/",
            "https://arbitrum-mainnet.infura.io/v3/",
            "https://arbitrum-goerli.infura.io/v3/",
            "https://palm-mainnet.infura.io/v3/",
            "https://palm-testnet.infura.io/v3/",
            "https://avalanche-mainnet.infura.io/v3/",
            "https://avalanche-fuji.infura.io/v3/",
            "https://aurora-mainnet.infura.io/v3/",
            "https://aurora-testnet.infura.io/v3/",
            "https://starknet-mainnet.infura.io/v3/",
            "https://starknet-goerli.infura.io/v3/",
            "https://starknet-goerli2.infura.io/v3/",
            "https://celo-mainnet.infura.io/v3/",
            "https://celo-alfajores.infura.io/v3/"
          ],
          "library": "Internal / fetch polyfill",
          "type": "rpc",
          "motivation": "The code defines a `readonlyRPCMap` containing Infura RPC endpoint URLs. If this map is present, it iterates through it and potentially makes POST requests using the fetch polyfill (`aa.default`) to these endpoints for read-only methods."
        },
        {
          "method": "fetch",
          "urls": [
            "https://raw.githubusercontent.com/MetaMask/metamask-sdk/refs/heads/gh-pages/locales/{LANGUAGE_CODE}.json"
          ],
          "library": "Native fetch or polyfill",
          "type": "auxiliary",
          "motivation": "The `zr` class, responsible for internationalization, fetches translation JSON files using `fetch(r)`, where `r` is constructed from `this.baseUrl` (defaulting to `https://raw.githubusercontent.com/MetaMask/metamask-sdk/refs/heads/gh-pages/locales`) and a language code."
        },
        {
          "method": "WebSocket",
          "urls": [
            "https://metamask-sdk.api.cx.metamask.io/"
          ],
          "library": "socket.io-client",
          "type": "auxiliary",
          "motivation": "The `initSocket` function initializes a Socket.IO client (`Ya`) connecting to the `communicationServerUrl` (defaulting to `https://metamask-sdk.api.cx.metamask.io/`). Socket.IO uses WebSocket as one of its primary transports, which is included in the `y0` transport list (`['websocket']`)."
        }
      ]
    },
    {
      "file": "chunk-X5A6KIJB.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://kcbuycbhynlmsrvoegzp.supabase.co/rest/v1/"
          ],
          "library": "supabase-js",
          "type": "auxiliary",
          "motivation": "The Supabase client (`ph`) initializes a Postgrest client (`JA`) which uses `fetch` internally. The base URL `Re.supabaseUrl` (`https://kcbuycbhynlmsrvoegzp.supabase.co`) is combined with `/rest/v1/` for PostgREST API calls (e.g., in `wt.from(...)` calls within `fse`)."
        },
        {
          "method": "fetch",
          "urls": [
            "https://kcbuycbhynlmsrvoegzp.supabase.co/rpc/"
          ],
          "library": "supabase-js",
          "type": "auxiliary",
          "motivation": "The Supabase client (`ph`) initializes a Postgrest client (`JA`) which uses `fetch` internally. The base URL `Re.supabaseUrl` (`https://kcbuycbhynlmsrvoegzp.supabase.co`) is combined with `/rpc/` for calling database functions (e.g., in `wt.rpc(...)` calls within `fse`)."
        },
        {
          "method": "fetch",
          "urls": [
            "https://kcbuycbhynlmsrvoegzp.supabase.co/auth/v1/"
          ],
          "library": "supabase-js",
          "type": "auxiliary",
          "motivation": "The Supabase client (`ph`) initializes an Auth client (`hh`) which uses `fetch` internally for authentication operations (e.g., `signInWithPassword`, `signUp`, `signOut`). The base URL `Re.supabaseUrl` (`https://kcbuycbhynlmsrvoegzp.supabase.co`) is combined with `/auth/v1/`."
        },
        {
          "method": "fetch",
          "urls": [
            "https://kcbuycbhynlmsrvoegzp.supabase.co/storage/v1/"
          ],
          "library": "supabase-js",
          "type": "auxiliary",
          "motivation": "The Supabase client (`ph`) initializes a Storage client (`el`) which uses `fetch` internally for file operations (e.g., `upload`, `download`, `listBuckets`). The base URL `Re.supabaseUrl` (`https://kcbuycbhynlmsrvoegzp.supabase.co`) is combined with `/storage/v1/`."
        },
        {
          "method": "fetch",
          "urls": [
            "https://kcbuycbhynlmsrvoegzp.supabase.co/functions/v1/"
          ],
          "library": "supabase-js",
          "type": "auxiliary",
          "motivation": "The Supabase client (`ph`) initializes a Functions client (`zc`) which uses `fetch` internally to invoke edge functions. The base URL `Re.supabaseUrl` (`https://kcbuycbhynlmsrvoegzp.supabase.co`) is combined with `/functions/v1/`."
        },
        {
          "method": "fetch",
          "urls": [
            "https://min-api.cryptocompare.com/data/price"
          ],
          "library": "@angular/common/http",
          "type": "auxiliary",
          "motivation": "A direct HTTP GET call is made using Angular's HttpClient (`zu`) to this URL within the `fse` service (`fetchUSDPrice` method)."
        },
        {
          "method": "fetch",
          "urls": [
            "https://ethscriptions.com/api/ethscriptions/",
            "https://sepolia-api.ethscriptions.com/api/ethscriptions/"
          ],
          "library": "@angular/common/http",
          "type": "auxiliary",
          "motivation": "A direct HTTP GET call is made using Angular's HttpClient (`zu`) to construct URLs like `https://${r?r+\"-\":\"\"}api.ethscriptions.com/api/ethscriptions/${t}` within the `fse` service (`fetchUnsupportedTokenEvents` method). The prefix depends on the network (`suffix.replace('_', '')`)."
        },
        {
          "method": "fetch",
          "urls": [
            "https://ethscriptions-api.flooredape.io/ethscriptions/",
            "https://ethscriptions-api-sepolia.flooredape.io/ethscriptions/"
          ],
          "library": "@angular/common/http",
          "type": "auxiliary",
          "motivation": "Direct HTTP GET calls are made using Angular's HttpClient (`zu`) to construct URLs like `https://ethscriptions-api${r?\"-\"+r:\"\"}.flooredape.io/ethscriptions/${t}` and `https://ethscriptions-api${r?\"-\"+r:\"\"}.flooredape.io/ethscriptions` within the `fse` service (`fetchUnsupportedItem` and `checkConsensus` methods). The prefix depends on the network (`suffix.replace('_', '')`)."
        },
        {
          "method": "fetch",
          "urls": [
            "http://localhost:3000/merkle-proofs"
          ],
          "library": "@angular/common/http",
          "type": "auxiliary",
          "motivation": "A direct HTTP GET call is made using Angular's HttpClient (`zu`) to this URL within the `fse` service (`fetchProofs` method). This is likely a development or testing endpoint."
        },
        {
          "method": "fetch",
          "urls": [
            "https://eth-mainnet.g.alchemy.com/v2/"
          ],
          "library": "viem",
          "type": "rpc",
          "motivation": "The Wagmi config (`Am`) uses Viem clients (`Af`, `Af`). The L1 client (`l1Client`) is configured with an HTTP transport (`Os`) pointing to `Re.rpcHttpProvider`, which is set to an Alchemy URL for Ethereum mainnet. Viem's transport likely uses `fetch`."
        },
        {
          "method": "fetch",
          "urls": [
            "https://turbo.magma-rpc.com"
          ],
          "library": "viem",
          "type": "rpc",
          "motivation": "The Wagmi config (`Am`) uses Viem clients (`Af`, `Af`). The L2 client (`l2Client`) is configured with an HTTP transport (`Os`) pointing to `Re.magmaRpcHttpProvider`, which is set to `https://turbo.magma-rpc.com`. Viem's transport likely uses `fetch`."
        },
        {
          "method": "XMLHttpRequest",
          "urls": [
            "https://eth-mainnet.g.alchemy.com/v2/",
            "https://turbo.magma-rpc.com"
          ],
          "library": "@angular/common/http",
          "type": "rpc",
          "motivation": "Angular's HttpClient (`zu`) is used, which utilizes `HttpClientXhrBackend` (`Wf`) by default in browsers. This backend makes calls using `XMLHttpRequest`. The RPC URLs are passed to Viem clients which likely use Angular's HttpClient (or its underlying fetch/XHR mechanism) for transport when configured within an Angular app."
        },
        {
          "method": "XMLHttpRequest",
          "urls": [
            "https://min-api.cryptocompare.com/data/price",
            "https://ethscriptions.com/api/ethscriptions/",
            "https://sepolia-api.ethscriptions.com/api/ethscriptions/",
            "https://ethscriptions-api.flooredape.io/ethscriptions/",
            "https://ethscriptions-api-sepolia.flooredape.io/ethscriptions/",
            "http://localhost:3000/merkle-proofs"
          ],
          "library": "@angular/common/http",
          "type": "auxiliary",
          "motivation": "Angular's HttpClient (`zu`) uses `HttpClientXhrBackend` (`Wf`) by default in browsers. Calls within the `fse` service to these auxiliary endpoints are made using Angular's HttpClient."
        },
        {
          "method": "WebSocket",
          "urls": [
            "wss://kcbuycbhynlmsrvoegzp.supabase.co/realtime/v1/websocket"
          ],
          "library": "@supabase/realtime-js",
          "type": "auxiliary",
          "motivation": "The Supabase client (`ph`) initializes a Realtime client (`Xc`). This client establishes a WebSocket connection using `new WebSocket(this.endpointURL())`. The URL is constructed from the Supabase URL (`Re.supabaseUrl`) combined with `/realtime/v1/websocket`."
        }
      ]
    },
    {
      "file": "ngsw-worker.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "ngsw.json?ngsw-cache-bust=..."
          ],
          "library": "Angular Service Worker",
          "type": "self",
          "motivation": "The code explicitly calls `this.safeFetch(this.adapter.newRequest(\"ngsw.json?ngsw-cache-bust=\" + Math.random()))` within the `fetchLatestManifest` method to retrieve the service worker's configuration manifest file (`ngsw.json`) from the application's origin, using a cache-busting parameter."
        },
        {
          "method": "fetch",
          "urls": [
            "Application-defined asset/data URLs"
          ],
          "library": "Angular Service Worker",
          "type": "auxiliary",
          "motivation": "The service worker intercepts fetch events (`this.scope.fetch(req)` or wrappers like `safeFetch`). It fetches and caches resources based on configurations in `ngsw.json` (assetGroups, dataGroups). These URLs are not hardcoded in the worker script itself but defined by the application developer in the manifest. Calls like `assetGroup.fetchAndCacheOnce(req)` and `dataGroup.handleFetch(req, event)` initiate these network requests."
        },
        {
          "method": "fetch",
          "urls": [
            "URL from Push Notification Action"
          ],
          "library": "Angular Service Worker",
          "type": "auxiliary",
          "motivation": "In the `handleClick` method, which handles `notificationclick` events, the code may call `this.scope.fetch(urlToOpen)`. The `urlToOpen` is derived from the `onActionClick.url` property within the clicked notification's data payload, meaning the URL is determined by the content of the push notification, not hardcoded."
        }
      ]
    }
  ],
  "libraryUsage": [
    {
      "file": "chunk-3J5I6VDT.js",
      "occurences": [
        {
          "name": "buffer",
          "motivation": "```javascript\n// Code extensively implements Node.js Buffer API methods like:\nd.Buffer = u;\nu.alloc = function(...) { ... };\nu.from = function(...) { ... };\nu.isBuffer = function(...) { ... };\nu.compare = function(...) { ... };\nu.concat = function(...) { ... };\nu.byteLength = q;\nu.prototype.slice = function(...) { ... };\nu.prototype.readUIntLE = function(...) { ... };\nu.prototype.writeUIntLE = function(...) { ... };\n// ... and many others.\n// It also uses Uint8Array and manipulates it in ways consistent with the Buffer polyfill.\n```"
        },
        {
          "name": "base64-js",
          "motivation": "```javascript\n// The code imports a module aliased as 'R' (from './chunk-72CTK2RT.js').\nimport{a as Q,b as v}from\"./chunk-72CTK2RT.js\";\n// It then uses methods characteristic of the base64-js library:\nfunction sr(i,r,t){return r===0&&t===i.length?R.fromByteArray(i):R.fromByteArray(i.slice(r,t))}\nfunction Z(i){return R.toByteArray(gr(i))}\n```"
        },
        {
          "name": "ieee754",
          "motivation": "```javascript\n// The code imports a module aliased as 'g' (from './chunk-72CTK2RT.js').\nimport{a as Q,b as v}from\"./chunk-72CTK2RT.js\";\n// It uses 'g.read' and 'g.write' for floating-point number handling, which are the core exports of the ieee754 library.\nu.prototype.readFloatLE=function(r,t){return r=r>>>0,t||y(r,4,this.length),g.read(this,r,!0,23,4)};\nu.prototype.writeFloatLE=function(r,t,n){return H(this,r,t,!0,n)}; // H internally calls g.write\nfunction H(i,r,t,n,e){return r=+r,t=t>>>0,e||z(i,r,t,4,34028234663852886e22,-34028234663852886e22),g.write(i,r,t,n,23,4),t+4}\n// Similar calls exist for readFloatBE, readDoubleLE, readDoubleBE, writeFloatBE, writeDoubleLE, writeDoubleBE.\n```"
        },
        {
          "name": "inherits",
          "motivation": "```javascript\n// The code imports a module aliased as 'N' (from './chunk-USZTPXNT.js').\nimport{g as N}from\"./chunk-USZTPXNT.js\";\n// It then exports a function 'Rr' which wraps the functionality provided by 'N'.\nvar Rr=N((Sr,$)=>{ ... });\n// The implementation within the wrapper provided to N is characteristic of the 'inherits' utility function for prototypal inheritance.\n// typeof Object.create==\"function\"?$.exports=function(r,t){t&&(r.super_=t,r.prototype=Object.create(t.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}))}:$.exports=function(r,t){if(t){r.super_=t;var n=function(){};n.prototype=t.prototype,r.prototype=new n,r.prototype.constructor=r}}\nexport{Ar as a,Rr as b};\n```"
        }
      ]
    },
    {
      "file": "chunk-3MP3NF7U.js",
      "occurences": [
        {
          "name": "Cryptographic Utilities (SHA256, HMAC, secp256k1, BIP340 Schnorr, Hash-to-Curve)",
          "motivation": "* The code imports cryptographic functions and classes (`Rt`, `kt`, `Qt`, `Zt`, `h`).\n* It defines constants specific to SHA-256 (`fn`, `st`) and implements the SHA-256 algorithm (in `Qt`, exported as `Et`).\n* It implements HMAC (`Zt`, `Jt`).\n* It defines constants for the secp256k1 curve (`Lt` - field prime, `Kt` - group order, `Gx`, `Gy` - generator coordinates) and sets up the curve (`Gt`).\n* It includes functions for elliptic curve point operations (addition `add`, doubling `double`, multiplication `multiply`, `wNAF`, `msm`), signature generation/verification (`Ye` function setting up ECDSA-like structure, `Br` implementing BIP340 Schnorr signatures with functions like `sign`, `verify`, `lift_x`).\n* It implements hash-to-curve methods (SWU map `Rn`, isogeny map `Hn`, generic setup `Je`, specific exports `vr` and `Sr`).\n* Helper utilities for hex encoding/decoding (`vt`, `_t`), BigInt operations (`qe`, `J`, `re`), and cryptographic primitives like `expand_message_xmd` (`Nn`) and `expand_message_xof` (`qn`) are present."
        }
      ]
    },
    {
      "file": "chunk-3YBW5SNO.js",
      "occurences": [
        {
          "name": "Node.js events module polyfill/implementation",
          "motivation": "```javascript\np.exports=o;\np.exports.once=A;\no.EventEmitter=o;\no.prototype._events=void 0;\no.prototype._eventsCount=0;\no.prototype._maxListeners=void 0;\n// ... standard EventEmitter methods like:\no.prototype.setMaxListeners=function(e){ /* ... */ };\no.prototype.getMaxListeners=function(){ /* ... */ };\no.prototype.emit=function(e){ /* ... */ };\no.prototype.addListener=function(e,n){ /* ... */ };\no.prototype.on=o.prototype.addListener;\no.prototype.prependListener=function(e,n){ /* ... */ };\no.prototype.once=function(e,n){ /* ... */ };\no.prototype.prependOnceListener=function(e,n){ /* ... */ };\no.prototype.removeListener=function(e,n){ /* ... */ };\no.prototype.off=o.prototype.removeListener;\no.prototype.removeAllListeners=function(e){ /* ... */ };\no.prototype.listeners=function(e){ /* ... */ };\no.prototype.rawListeners=function(e){ /* ... */ };\no.listenerCount=function(t,e){ /* ... */ };\no.prototype.listenerCount=b;\no.prototype.eventNames=function(){ /* ... */ };\n```\nThe code defines a class/prototype `o` and assigns it to `p.exports`. This object implements the standard API of the Node.js `events` module, including methods like `on`, `emit`, `once`, `addListener`, `removeListener`, `setMaxListeners`, `listeners`, `eventNames`, and related properties like `_events`, `_maxListeners`. The structure `C((F,p)=> { ... p.exports = ... })` is a common pattern for bundling Node.js-style modules for the browser."
        }
      ]
    },
    {
      "file": "chunk-4EDCFSKP.js",
      "occurences": [
        {
          "name": "Safe{Core} Client SDK (or similar)",
          "motivation": "```javascript\n// Default base URL for the Safe API\nD.DEFAULT_BASE_URL=\"https://safe-client.safe.global\";\n\n// Function to set the base URL\nvar a=ye.DEFAULT_BASE_URL,Me=e=>{a=e};\nn.setBaseUrl=Me;\n\n// Numerous functions making calls to specific Safe API endpoints\nfunction Ge(e,i){return(0,r.getEndpoint)(a,\"/v1/chains/{chainId}/safes/{address}\",{path:{chainId:e,address:i}})}n.getSafeInfo=Ge;\nfunction He(e,i,t,s){return(0,r.getEndpoint)(a,\"/v1/chains/{chainId}/safes/{address}/multisig-transactions/\",{path:{chainId:e,address:i},query:t},s)}n.getMultisigTransactions=He;\n// ... and many others (getBalances, getOwnedSafes, proposeTransaction, etc.)\n```\nThe code defines a default base URL `https://safe-client.safe.global` and provides numerous functions (`getSafeInfo`, `getMultisigTransactions`, `getBalances`, `proposeTransaction`, etc.) that correspond to the documented endpoints of the Safe{Core} API (formerly Gnosis Safe API). It exports these functions for use in a larger application."
        }
      ]
    },
    {
      "file": "chunk-4LLAJJBA.js",
      "occurences": [
        {
          "name": "Noble Cryptography Utilities (or similar)",
          "motivation": "```markdown\nThe code defines low-level cryptographic helper functions and classes. It includes utilities for handling `Uint8Array`, `DataView`, `TextEncoder`, uses `crypto.getRandomValues` for secure random numbers, and provides wrapper functions (`L`, `m`) for hash algorithms (`update`, `digest`). The export structure (e.g., `export{p as a,l as b,...}`) and helper functions (`p`, `l`, `k`, `T`, `B` for validation) are characteristic of libraries like `@noble/hashes` or similar foundational crypto packages focusing on byte manipulation and cryptographic primitives.\n```"
        }
      ]
    },
    {
      "file": "chunk-5JMKXA2Q.js",
      "occurences": [
        {
          "name": "Angular",
          "motivation": "The code extensively uses Angular-specific patterns and features:\n*   **Decorators & Metadata:** While minified, the structure suggests use of decorators like `@Component`, `@Directive`, `@Injectable`, `@Input`, `@Output`.\n*   **Internal Properties:** Presence of numerous internal properties prefixed with `\\u0275` (e.g., `\\u0275prov`, `\\u0275cmp`, `\\u0275dir`, `\\u0275fac`, `\\u0275mod`, `\\u0275pipe`), which are characteristic of Angular's compiled output and metadata.\n*   **Core Concepts:** Usage of terms and concepts like `Injector`, `InjectionToken`, `ComponentFactoryResolver`, `NgModule`, `ChangeDetectionStrategy` (`Hg`), `RendererFactory`, `ViewContainerRef`, `ElementRef`, `TemplateRef`, `NgZone`, `ApplicationRef`, `signals` (`al`, `Hs`, `Ir`, `cl`, `Nh`, `rv`), `computed`, `effect` (`tS`, `oS`, `iS`), lifecycle hooks (`ngOnChanges`, `ngOnInit`, `ngDoCheck`, `ngOnDestroy`, etc.), and DI flags (`W`).\n*   **Error Codes:** Angular-specific error codes like `NG0{number}` are used (e.g., `Z(-200, ...)` which corresponds to `NG0200`).\n*   **Templates & Views:** Mentions of `TView`, `LView`, view manipulation functions (`mf`, `hf`, `Ur`, `Mf`, `Uo`, `EC`, `Gy`, `Wy`, `MM`, `Wo`, `Tv`, `Cv`, `AN`, `Dv`, `Mv`, `EH`), and template syntax elements (`#host`, `ng-template`).\n*   **Sanitization:** Includes code related to DOM sanitization (`za`, `Zm`, `LB`, `XT`, `eC`) which is part of Angular's security features."
        },
        {
          "name": "RxJS",
          "motivation": "The code heavily utilizes RxJS concepts and patterns:\n*   **Core Classes:** Clear presence of `Observable` (represented often as `$`), `Subject` (`Be`), `BehaviorSubject` (`go`), `ReplaySubject` (`xo`), `Subscription` (`ae`), `Subscriber` (`Mn`).\n*   **Operators:** Extensive use of pipeable operators (`pipe`, `map` (`He`), `filter` (`Kt`), `switchMap` (`am`), `mergeMap` / `flatMap` (`Ye`), `tap` (`cm`), `take` (`_n`), `first` (`sw`), `last` (`cw`), `catchError`, `combineLatest` (`QI`), `debounceTime` (`mm`), `throttleTime` (`XI`), `shareReplay` (`om`), `distinctUntilChanged` (`rm`), `withLatestFrom` (`xm`), `scan` (`vm`), `startWith`, `delay`, `timeout` (`HI`), `ignoreElements` (`Zu`), `materialize` (`uw`), `dematerialize` (`rw`), `defaultIfEmpty` (`Eo`), `throwIfEmpty` (`ks`, `ow`), etc.).\n*   **Creation Functions:** Use of functions like `of` (`Lu`), `from` (`U`, `pt`), `throwError` (`Gu`), `timer` (`Nn`), `interval` (`YI`), `NEVER` (`fm`), `EMPTY` (`yt`).\n*   **Schedulers:** References to different schedulers like `asyncScheduler` (`kI`), `asapScheduler` (`qu`), `queueScheduler` (`RI`), `animationFrameScheduler` (`PI`).\n*   **Observable Conversion:** Functions to convert various types (Promise, Array, Iterable, AsyncIterable, ReadableStream) to Observables (`U`, `hI`, `mI`, `gI`, `Zp`, `yI`)."
        },
        {
          "name": "ox / viem / ethers (Web3 Utility Library)",
          "motivation": "The code contains numerous functions commonly found in Web3 utility libraries for interacting with Ethereum:\n*   **ABI Encoding/Decoding:** Functions like `se` (likely `encodeFunctionData`), `Qe` (likely `decodeFunctionResult`), `Et` (likely `encodeEventTopics`), `Qr` (likely `decodeEventLog`), `du` (likely `encodeAbiParameters`), `Tu` (likely `decodeAbiParameters`), `lo` (`encodeAbiItem`).\n*   **Hashing:** Functions like `Kc` (likely `keccak256`), `$c` (likely `hashMessage`), `Wx` (likely `hashTypedData`).\n*   **Address Utilities:** Functions like `er` (likely `getAddress`), `nu` (likely `isAddress`), `uo` (`validateAddress`).\n*   **Hex/Bytes Utilities:** Functions like `ue` (`bytesToHex`), `De` (`hexToBytes`), `k` (`numberToHex`), `fe` (`hexToNumber`), `St` (`stringToHex`), `At` (`stringToBytes`), `pe` (`bytesToString`), `ie` (`keccak256`), `Ue` (`concatHex`), `qt` (`padHex`), `so` (`bytesToHex`), `ao` (`stringToHex`), `de` (`numberToHex`), `Xf` (`isHex`).\n*   **Transaction Formatting:** Functions like `dc` (likely `formatTransaction`), `fc` (likely `formatBlock`), `Ae` (likely `formatLog`), `Ex` (likely `formatTransactionReceipt`).\n*   **ENS Functions:** Functions like `Ax` (`getEnsAddress`), `Lx` (`getEnsAvatar`), `Bx` (`getEnsName`), `Hx` (`getEnsResolver`), `kc` (`getEnsText`), `ro` (`namehash`), `Sx` (`labelhash`).\n*   **Signing/Verification:** Functions like `ex` (`recoverPublicKey`), `sc` (`recoverAddress`), `fo` (`verifyHash`), `Rb` (`verifyMessage`), `Pb` (`verifyTypedData`), `Jb` (`signAuthorization`).\n*   **Error Handling:** Custom error classes that wrap standard RPC errors (`cc`, `Ap`, `Du`).\n*   **Constants:** Presence of `up` (`0xeeee...`, native token address) and `rt` (`0x0000...`, zero address).\n*   The presence of `ox@0.1.1` in error messages strongly suggests the library is `ox`."
        },
        {
          "name": "0xsequence (Sequence SDK/Wallet Utilities)",
          "motivation": "The code includes functions and patterns specific to the Sequence platform:\n*   **Wallet Actions:** Functions like `Qb` (`sendCalls`), `wc` (`getCallsStatus`), `Tx` (`waitForCallsStatus`), `Yb` (`showCallsStatus`), `pu` (`prepareAuthorization`), `Jb` (`signAuthorization`). These `wallet_*` and `*_Calls` methods are specific to EIP-5792, which Sequence implements.\n*   **Simulation:** Use of `eth_simulateV1` (`gi`, `Ab`) which is related to Sequence utils or similar advanced simulation tools.\n*   **Error Messages:** Error messages referencing `oxlib.sh` suggest a connection to the Sequence ecosystem."
        },
        {
          "name": "KZG Library (for EIP-4844)",
          "motivation": "The code includes functions specifically for handling EIP-4844 blobs and KZG commitments/proofs:\n*   **Functions:** `mc` (likely `blobToKzgCommitment`), `hc` (likely `computeBlobKzgProof`), `fx` (likely `blobsToSidecars` or similar), `ux` (`versionedCommitmentHash`), `lx` (`versionedCommitmentHashes`).\n*   **Constants/Types:** Handling of `blobs`, `commitments`, `proofs`, `sidecars`, `blobVersionedHashes`, `maxFeePerBlobGas` within transaction preparation and signing logic (`fn`, `Xr`)."
        }
      ]
    },
    {
      "file": "chunk-5TLIPVVH.js",
      "occurences": [
        {
          "name": "Anime.js",
          "motivation": "The code includes a version string `b.version=\"3.2.1\";` and exports an object `b` (aliased as `le`) which has properties and methods characteristic of Anime.js, such as `targets`, `duration`, `delay`, `easing`, `timeline`, `stagger`, `penner`, `play`, `pause`, `seek`, `reverse`, `remove`, etc. The overall structure and functionality align with the Anime.js animation library."
        }
      ]
    },
    {
      "file": "chunk-72CTK2RT.js",
      "occurences": [
        {
          "name": "base64-js",
          "motivation": "```markdown\nThe code includes functions `toByteArray` and `fromByteArray` (`yr` and `Br` respectively in the minified code) along with the standard Base64 character set (`k=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"`) and logic for Base64 padding handling. This pattern is characteristic of the `base64-js` library or a similar implementation often bundled with Buffer polyfills.\n```"
        },
        {
          "name": "ieee754",
          "motivation": "```markdown\nThe code contains functions named `read` and `write` that handle the conversion between binary representations (in a byte array) and IEEE 754 floating-point numbers (float and double). This is the core functionality provided by the `ieee754` library, commonly used alongside Buffer implementations.\n```"
        },
        {
          "name": "buffer",
          "motivation": "```markdown\nThe code implements the Node.js Buffer API for browsers. This is evidenced by the presence of `Buffer` and `SlowBuffer` identifiers, methods mimicking the Node.js Buffer class (e.g., `alloc`, `from`, `isBuffer`, `compare`, `concat`, `copy`, `slice`, `toString`, `write`, numerous `read/write` methods for different integer types and endianness like `readUInt32LE`, `writeBigInt64BE`), the use of `Uint8Array` as the underlying data structure, handling of Node.js specific error codes (e.g., `ERR_BUFFER_OUT_OF_BOUNDS`, `ERR_INVALID_ARG_TYPE`), and the reference to `Symbol.for(\"nodejs.util.inspect.custom\")`. It also imports and uses the base64 and ieee754 logic identified in the other modules.\n```"
        }
      ]
    },
    {
      "file": "chunk-ANAO7EXC.js",
      "occurences": [
        {
          "name": "pino",
          "motivation": "The code structure and exported functions within the module assigned to `A` (imported via `J` and `R`) strongly resemble the `pino` logging library. Key indicators include:\n*   The main setup function `d` takes configuration options like `level`, `serializers`, `browser` (with `transmit` and `write` sub-options), `enabled`, and `timestamp`.\n*   Defines standard levels (`fatal`, `error`, `warn`, `info`, `debug`, `trace`) in `d.levels` with associated numeric values.\n*   Includes standard serializers (`req`, `res`, `err`) in `d.stdSerializers` (`ee`).\n*   Provides a `child()` method for creating child loggers with inherited and overridden properties.\n*   Uses a string formatting function (`U` used via `X`) similar to `pino`'s internal formatter for substituting values (`%s`, `%d`, `%o`, etc.).\n*   The structure `var b = R(A())` and subsequent call `(0, b.default)(...)` suggests importing and calling the default export of the `pino` module (`A`).\n*   The code explicitly handles browser-specific options (`e.browser`) like `transmit` and `write`."
        }
      ]
    },
    {
      "file": "chunk-BGWZGCL3.js",
      "occurences": [
        {
          "name": "clsx",
          "motivation": "```javascript\nimport{f as z,h as G}from\"./chunk-USZTPXNT.js\";var V_={};G(V_,{clsx:()=>l_,default:()=>B_});function u_(e){var _,t,n=\"\";if(typeof e==\"string\"||typeof e==\"number\")n+=e;else if(typeof e==\"object\")if(Array.isArray(e))for(_=0;_<e.length;_++)e[_]&&(t=u_(e[_]))&&(n&&(n+=\" \"),n+=t);else for(_ in e)e[_]&&(n&&(n+=\" \"),n+=_);return n}function l_(){for(var e,_,t=0,n=\"\";t<arguments.length;)(e=arguments[t++])&&(_=u_(e))&&(n&&(n+=\" \"),n+=_);return n}var B_,$_=z(()=>{\"use strict\";B_=l_});\n```\nThe code explicitly defines and exports functions `l_` (aliased as `clsx`) and `B_` (default export) which implement the logic for conditionally joining class names, matching the functionality of the `clsx` library. The internal function `u_` is used for processing individual arguments."
        },
        {
          "name": "Preact",
          "motivation": "```javascript\nimport{f as z,h as G}from\"./chunk-USZTPXNT.js\";\n// ... (clsx code)\nvar Y_={};G(Y_,{Component:()=>M,Fragment:()=>U,cloneElement:()=>Q_,createContext:()=>X_,createElement:()=>y_,createRef:()=>O_,h:()=>y_,hydrate:()=>P_,isValidElement:()=>p_,options:()=>h,render:()=>H_,toChildArray:()=>w_});\n// ... (Preact core implementation)\nfunction y_(e,_,t){ /* ... */ }\nfunction M(e,_){this.props=e,this.context=_}\n// ... (Preact hooks implementation)\nvar ce={};G(ce,{useCallback:()=>te,useContext:()=>ne,useDebugValue:()=>re,useEffect:()=>Z_,useErrorBoundary:()=>oe,useId:()=>ie,useImperativeHandle:()=>ee,useLayoutEffect:()=>R_,useMemo:()=>r_,useReducer:()=>I_,useRef:()=>_e,useState:()=>W_});\nfunction W_(e){return N=1,I_(q_,e)}\nfunction Z_(e,_){var t=E(C++,3);!y.__s&&o_(t.__H,_)&&(t.__=e,t.i=_,d.__H.__h.push(t))}\n// ...\n```\nThe code exports core Preact APIs like `Component`, `Fragment`, `createElement` (aliased as `h`), `render`, `createContext`, `createRef`, etc. It also includes the implementation for Preact hooks such as `useState`, `useEffect`, `useContext`, `useRef`, `useMemo`, `useCallback`, etc. The internal variable names (`__k`, `__v`, `__c`, `__e`, `__h`) and the overall structure strongly indicate the presence of the Preact library's runtime."
        }
      ]
    },
    {
      "file": "chunk-BN6DHJVI.js",
      "occurences": [
        {
          "name": "Lit",
          "motivation": "The code includes class `U` extending `HTMLElement` with lifecycle methods (`connectedCallback`, `disconnectedCallback`, `attributeChangedCallback`), property declaration features (`createProperty`, `elementProperties`, `getPropertyDescriptor`), and update scheduling (`requestUpdate`, `performUpdate`, `shouldUpdate`, `updateComplete`). It uses functions like `Ve` (resembling `css`), `re` (resembling `unsafeCSS`), `Pt` (handling `adoptedStyleSheets` or creating `<style>` elements), `xi` (resembling `html`), `Si` (resembling `svg`), `Ei` (resembling `render`), `wi` (resembling the `@customElement` decorator), `$e` (resembling the `@property` decorator), and `Ri` (resembling the `@state` decorator). These patterns are characteristic of the Lit library (which includes lit-element and lit-html)."
        },
        {
          "name": "Motion One",
          "motivation": "The code defines a class `j` for animation logic, managing timing (`startTime`, `duration`, `totalDuration`, `delay`, `endDelay`), state (`playState`), easing, repeats, and uses `requestAnimationFrame`. It includes functions like `De` which calls `element.animate` (Web Animations API) or falls back to the custom `j` class. Helper functions like `xt`, `we`, `Ce`, `oi`, `ni`, `Et`, `P`, `lt`, `je`, `Qt`, `mi`, `vi` are present, dealing with CSS custom properties (like `--motion-x`), transforms (`translateX`, `rotate`, etc.), and managing animation instances. The presence of `CSS.registerProperty` usage and specific animation options points towards the Motion One animation library."
        }
      ]
    },
    {
      "file": "chunk-BPSYNGBE.js",
      "occurences": [
        {
          "name": "Angular",
          "motivation": "The code imports symbols like `_`, `Ne`, `On`, `_n`, `Nn`, `Ue`, `Un`, `ve`, `Pn`, `Ln`, `xn`, `cr`, `jn`, `kn` from a chunk likely containing Angular core functionalities. It uses decorators like `ɵfac` (factory), `ɵprov` (provider), `ɵdir` (directive), `ɵcmp` (component), `ɵpipe` (pipe) which are characteristic of Angular's compiler output. Dependency injection functions (`v`, `f`, `ge`, `ut`) and lifecycle hooks (`ngOnDestroy`, `ngOnInit`, `ngOnChanges`) are also present. Classes like `K` (likely `NgZone`), `ar` (likely `ChangeDetectorRef`), `fe` (likely `EnvironmentInjector`), `Zn` (likely `Title`), `ht` (likely `Compiler`) further confirm the use of the Angular framework."
        },
        {
          "name": "Angular Router",
          "motivation": "The code extensively uses classes and concepts related to routing, such as `V` (likely `Router`), `B` (likely `ActivatedRoute`), `Lr` (likely `RouterOutlet`), `H` (likely `UrlTree`), `g` (likely `UrlSegmentGroup`), `X` (likely `UrlSegment`), `xi` (likely `RouterLink`), `te` (likely `NavigationStart`), `L` (likely `NavigationEnd`), `z` (likely `NavigationCancel`), `Ce` (likely `NavigationError`), `Ve` (likely `RoutesRecognized`), `F` (likely `NavigationSkipped`), `It` (likely `GuardsCheckStart`), `Mt` (likely `GuardsCheckEnd`), `At` (likely `ResolveStart`), `Dt` (likely `ResolveEnd`), `Ot` (likely `RouteConfigLoadStart`), `_t` (likely `RouteConfigLoadEnd`), `Nt` (likely `ChildActivationStart`), `Ut` (likely `ChildActivationEnd`), `Pt` (likely `ActivationStart`), `Lt` (likely `ActivationEnd`), `Ee` (likely `Scroll`), `se` (likely `ActivatedRouteSnapshot`), `We` (likely `RouterStateSnapshot`), `jt` (likely `Tree`), `N` (likely `TreeNode`), `ce` (likely `UrlSerializer`), `ve` (likely `Location`), `Ue` (likely `LocationStrategy`), `Vt` (likely `UrlHandlingStrategy`), `Pi` (likely `RouteReuseStrategy`), `jr` (likely `TitleStrategy`), `Bt` (likely `NgModuleFactoryLoader` / ComponentLoader), `ji` (likely `RouterPreloader`). Functions like `qs` (likely `provideRouter`) and constants like `p` ('primary' outlet) are also strong indicators."
        },
        {
          "name": "RxJS",
          "motivation": "The code utilizes multiple RxJS patterns and operators. Imports include `G` (likely `Subject` or `Observable`), `P` (likely `BehaviorSubject`), `E` (likely `InjectionToken`), `Yt` (likely `ReplaySubject`), `qr` (likely `Subscription`). Operators used include `y` (map), `D` (switchMap/mergeMap), `Q` (filter), `T` (tap), `h` (of), `A` (from), `ne` (catchError), `ie` (mergeMap/concatMap), `Kr` (reduce), `Xt` (defaultIfEmpty), `Qr` (takeLast), `Jt` (skip), `W` (EMPTY), `Yr` (forkJoin), `k` (defer), `re` (fromPromise/scheduled), `he` (take), `ot` (finalize), `Zt` (share), `x` (scan), `it` (combineLatest), `Jr` (takeUntil), `Ae` (throwError), `Qt` (ignoreElements), `Gr` (finalize)."
        },
        {
          "name": "Ethers.js (or similar web3 utility)",
          "motivation": "The import `import{W as $n}from\"./chunk-JT53YVAZ.js\";` and its usage within the `Ic` pipe (`$n(BigInt(e))`) strongly suggests a function for handling large numbers or converting units, likely `formatUnits` or a similar function from a library like Ethers.js, used here to convert Wei to Ether."
        }
      ]
    },
    {
      "file": "chunk-EHJU4KF2.js",
      "occurences": [
        {
          "name": "qrcode",
          "motivation": "The code includes extensive logic for QR code generation, including modules for data encoding (Numeric, Alphanumeric, Byte, Kanji modes), error correction (Reed-Solomon, Galois Field arithmetic), version selection, masking, penalty calculation, and rendering (Canvas, SVG, Data URL). The exported object `Pn` with methods `create`, `toCanvas`, `toDataURL`, and `toString` matches the API of the popular `qrcode` library (https://github.com/soldair/node-qrcode)."
        }
      ]
    },
    {
      "file": "chunk-FDXPYCFZ.js",
      "occurences": [
        {
          "name": "WalletConnect Web3Modal",
          "motivation": "The code extensively uses constants like `WALLETCONNECT_DEEPLINK_CHOICE`, references `walletConnectUri`, makes API calls to `explorer-api.walletconnect.com` with paths like `/w3m/v1/...`, includes SDK type `wcm` (Web3Modal), and version `js-2.7.0`. Functions like `setWalletConnectDeepLink`, `getDesktopListings`, `getMobileListings`, and overall logic related to connecting wallets, fetching wallet lists, and managing modal state (`j`, `m`, `w`, `p`, `ne` state objects) strongly indicate the use of WalletConnect's Web3Modal library."
        }
      ]
    },
    {
      "file": "chunk-GOTOT7WQ.js",
      "occurences": [
        {
          "name": "Cryptographic Utilities (Noble-like)",
          "motivation": "The code defines low-level cryptographic helper functions and classes (e.g., `c`, `f`, `g`, `w`, `x`, `L`, `E`, `B`, `O`, `p`, `T`, `s`, `k`, `S`, `V`) dealing with `Uint8Array`, hashing concepts (`outputLen`, `blockLen`, `digest`), and endianness conversions. The structure and function names resemble patterns often found in the `@noble/hashes` library or similar cryptographic primitive libraries. It specifically checks for and uses `globalThis.crypto` (Web Crypto API) for random number generation (`V`)."
        },
        {
          "name": "Web Crypto API",
          "motivation": "The code explicitly checks for `globalThis.crypto` and its methods `getRandomValues` and `randomBytes` within the `V` function to generate random byte arrays (`new Uint8Array(t)`)."
        }
      ]
    },
    {
      "file": "chunk-HCRE7WVA.js",
      "occurences": [
        {
          "name": "Noble Cryptographic Libraries (secp256k1, schnorr, hashing)",
          "motivation": "The code imports cryptographic primitives and functions related to hashing (SHA-256 via `Ot` derived from `ee` which implements SHA-256 logic), elliptic curve cryptography specifically secp256k1 (defined in `Wt` using `Me` and parameters like `Tt`, `Kt`, `Gx`, `Gy`), and Schnorr signatures (exported as `xr`). It includes classes like `ProjectivePoint`, field arithmetic (`zt`, `at`), point operations (`add`, `multiply`), signature generation (`_n` in `xr`) and verification (`Qe` in `xr`), and hash-to-curve/encode-to-curve mechanisms (`Je`, `qn`, `Ln`, `Ze`). The structure and naming conventions (e.g., `Wt`, `xr`, `Je`, `Me`, `Pe`, `Ve`, `bn`, `Vt`, `Et`) are characteristic of the Noble family of cryptographic libraries (@noble/curves, @noble/hashes, etc.). The exports `secp256k1` and `schnorr` confirm the usage of these specific modules."
        }
      ]
    },
    {
      "file": "chunk-JDKI25G2.js",
      "occurences": [
        {
          "name": "Coinbase Wallet SDK",
          "motivation": "The code includes classes like `CoinbaseWalletSDK`, `SCWStateManager`, `WalletLinkRelay`, UI components (`Ee` - Snackbar, `Z` - RedirectDialog), and specific constants like `de=\"@coinbase/wallet-sdk\"`, `E=\"4.3.0\"`, `Ht=\"https://keys.coinbase.com/connect\"`, `We=\"https://www.walletlink.org\"`. It manages connections, requests (`eth_requestAccounts`, `signEthereumTransaction`, etc.), and interactions with either a Coinbase Wallet extension, mobile app via WalletLink, or an embedded Smart Contract Wallet (SCW)."
        },
        {
          "name": "ABI Encoding/EIP-712 Utils",
          "motivation": "The code contains functions like `rawEncode`, `solidityPack`, `soliditySHA3` (in module `Mt`) and `TypedDataUtils` (in module `Lt`) which are used for encoding data according to Ethereum ABI specifications and handling EIP-712 typed data structures. This functionality is often found in libraries like ethers.js or viem, but appears to be bundled or implemented directly here."
        },
        {
          "name": "Preact/React",
          "motivation": "The UI components (e.g., `Ue`, `On`, `jn` functions within classes `ve` and `ke`) utilize functions aliased as `u` (likely `createElement`), `K` (likely `render`), `_e` (likely `useState`), and `ze` (likely `useEffect`). This pattern is characteristic of JSX compilation output from frameworks like Preact or React, used here for rendering UI elements like snackbars and dialogs."
        },
        {
          "name": "EventEmitter",
          "motivation": "The class `xe` extends `He.default`. `He` is imported from another chunk (`./chunk-U4P4PQEI.js`). The main SDK class `H` extends `xe`. This pattern suggests the use of an EventEmitter implementation for handling asynchronous events and callbacks, similar to the Node.js `events` module."
        },
        {
          "name": "Buffer",
          "motivation": "The code frequently uses `Buffer.from()`, `Buffer.allocUnsafe()`, `Buffer.isBuffer()`, indicating the use of the Node.js Buffer API, likely via a polyfill or bundled implementation for browser compatibility."
        },
        {
          "name": "Web Crypto API (SubtleCrypto)",
          "motivation": "The code makes numerous calls to `crypto.subtle` for cryptographic operations like `generateKey`, `deriveKey`, `encrypt`, `decrypt`, `exportKey`, and `importKey`, particularly for handling ECDH key exchange and AES-GCM encryption/decryption within the `ce` (SCWKeyManager) and `pe` (Cipher) classes."
        }
      ]
    },
    {
      "file": "chunk-JLNLMZ6Z.js",
      "occurences": [
        {
          "name": "Safe Apps SDK",
          "motivation": "The code includes imports from modules with names like `chunk-MSD3ZN2O.js` which contain classes like `MessageFormatter` and method definitions like `getSafeInfo`, `getTxBySafeTxHash`, `sendTransactions`, `signMessage`. It uses `window.parent.postMessage` to communicate with a parent window, specifically sending structured messages with `id`, `method`, `params`, and `env.sdkVersion`. It also defines classes like `SafeAppProvider` and methods like `connect`, `request`, `getChainInfo`, `getInfo` within a `Safe` class (`fc`), typical of the Safe Apps SDK pattern for dapps interacting within the Safe{Wallet} environment."
        },
        {
          "name": "viem / abitype",
          "motivation": "The code contains extensive functionality related to Ethereum ABI handling (e.g., `parseAbi`, `formatAbiItem`, `encodeAbiParameters`, `decodeAbiParameters`, `encodeFunctionData`, `decodeFunctionResult`, `decodeEventLog`, `hashTypedData`), cryptographic hashing (`keccak256`, `sha256`, `ripemd160`), address manipulation (`getAddress`, `isAddress`, `checksumAddress`, `publicKeyToAddress`), RLP encoding (`toRlp`), transaction processing (`parseTransaction`, `serializeTransaction`, `recoverAddress`), and contract interaction utilities (`readContract`, `simulateContract`, `estimateContractGas`, `call`, `getContract`). It includes error classes like `BaseError`, `ContractFunctionExecutionError`, `CallExecutionError`, `AbiDecodingZeroDataError`, and uses specific helper functions like `defineFormatter`, `formatBlock`, `formatTransaction`. These features, structures, and naming conventions strongly align with the `viem` library and its dependency `abitype`."
        }
      ]
    },
    {
      "file": "chunk-JT5M5CHD.js",
      "occurences": [
        {
          "name": "viem",
          "motivation": "The code includes a version string `viem@2.21.54`. It utilizes numerous functions, error classes, and patterns characteristic of the `viem` library, such as `BaseError`, `encodeAbiParameters`, `decodeAbiParameters`, `encodeFunctionData`, `decodeFunctionResult`, `call` (`Mn` function calling `e.request({method:\"eth_call\"...})`), CCIP-Read handling (`Rc`, `mr` functions), and utility functions like `isAddress` (`w`), `getAddress` (`He`), `parseEther` (`an`), `formatGwei` (`R`), `hexToBytes` (`De`), `bytesToHex` (`P`). The `getDocsUrl` function references `https://viem.sh`."
        }
      ]
    },
    {
      "file": "chunk-K2IO763T.js",
      "occurences": [
        {
          "name": "Custom Reactive Proxy State Library",
          "motivation": "The code defines a system for creating reactive state objects using JavaScript `Proxy`. It utilizes `WeakMap`, `WeakSet`, `Set`, `Map`, `Symbol`, and `Reflect` APIs to track object properties, manage listeners, and handle updates (including asynchronous updates via `Promise`). Functions like `A` (likely creates the proxy), `Y` (likely subscribes to changes), `Z` (likely gets a snapshot), and `X` (likely initializes state) manage this custom reactivity system. It doesn't match the signature of common state management libraries like Redux, Zustand, or Vuex, nor does it appear to be a standard framework component, suggesting a bespoke implementation."
        }
      ]
    },
    {
      "file": "chunk-KIZ2JL2X.js",
      "occurences": [
        {
          "name": "Angular",
          "motivation": "The code uses Angular decorators (`Zt` likely corresponds to `@Component`, `Se` to `@Input`, `Cr` to `@Output`, `xr`/`Er`/`Ar` to `@ViewChild`), dependency injection (`wt` likely corresponds to `inject`), lifecycle hooks (`ngOnDestroy`), template syntax (implied by `Be` and `gt`), property binding (`it`), event binding (`oe`), routing (`Lr`, `Dn`), and RxJS integration (`He` for `Store`, `store.select`)."
        },
        {
          "name": "NgRx/Store",
          "motivation": "The code uses `this.store.select(...)` (e.g., `Hn`, `ta`, `Wr`, `Gr`, `Vn`, `jr`, `Kr`, `Qr`, `Zr`, `Yr`, `ea`) and `this.store.dispatch(...)` (e.g., `pi`, `di`, `pn`), which are core functions of the NgRx/Store library for state management within Angular."
        },
        {
          "name": "RxJS",
          "motivation": "The code extensively uses the `.pipe()` method with operators like `an` (likely `map` or `switchMap`), `dr` (likely `tap`), `vr` (likely `tap` or `subscribe`), `gr` (likely `catchError` or `startWith`), `mr` (likely `distinctUntilChanged`), and observable creation functions like `ci` (likely `of`), `pr` (likely `from` or `forkJoin`), `An` (likely `firstValueFrom`). These are fundamental parts of the RxJS library."
        },
        {
          "name": "GSAP (GreenSock Animation Platform)",
          "motivation": "The code imports and uses functions and objects commonly associated with GSAP, such as `kt` (likely `gsap` itself), `vt` (likely `Tween`), `Pt` (likely `Timeline`), `ur.to` (likely `gsap.to`). Variable names like `qs` (Power0), `js` (Power1), `Ks` (Power2) correspond to GSAP easing functions. The animation logic in `animateMint` confirms its usage (`ur.to(...)`)."
        },
        {
          "name": "svgson",
          "motivation": "The code imports from a chunk (`./chunk-USZTPXNT.js`) which exports a function aliased as `Co` and later invoked as `Bo(Co(),1)`. This module defines `svgson`. The code uses `Ao.stringify` (where `Ao` is derived from the `svgson` module) to stringify an SVG structure in the `convertToBase64` function."
        },
        {
          "name": "tinycolor2",
          "motivation": "The code imports a function aliased as `T` from a chunk (`./chunk-QQTWIPDE.js`) which matches the primary export of the `tinycolor2` library. This `T` function is used in the `stripColors` method for color manipulation (`T(l.attributes.fill)`, `T(u).getBrightness()`, `T({r:0,g:0,b:0,a:1-h})`, `f.toString(\"hex8\")`)."
        },
        {
          "name": "@ng-select/ng-select",
          "motivation": "The template explicitly uses the `<ng-select>` HTML tag (`D(5,\"ng-select\",4)`), which is the primary component provided by the `@ng-select/ng-select` library for dropdown/select functionality in Angular."
        },
        {
          "name": "ngx-scrollbar",
          "motivation": "The template uses a template reference variable `#scroller` (`Or(Xo,5)` where `Xo = [\"scroller\"]`) on a `div` element. This is a common pattern for accessing the `NgScrollbar` component/directive from the `ngx-scrollbar` library to control scrolling programmatically (e.g., `this.scroller?.nativeElement?.scrollTo`)."
        },
        {
          "name": "ngx-lazy-load-image",
          "motivation": "The template uses the `[lazyLoad]` attribute directive on `<img>` tags (e.g., `it(\"lazyLoad\", ...)`). This directive is the core feature of the `ngx-lazy-load-image` library for deferring image loading."
        },
        {
          "name": "ngx-timeago",
          "motivation": "The template applies a pipe named `timeago` (`Y(14,\"timeago\")`) to format timestamps. This is the primary pipe provided by the `ngx-timeago` library."
        }
      ]
    },
    {
      "file": "chunk-KR2GNOUA.js",
      "occurences": [
        {
          "name": "debug",
          "motivation": "The code structure, specifically within the `j = x((X, M) => { ... })` block, mirrors the popular `debug` library. It includes functions like `enable`, `disable`, `enabled`, `save`, `load`, `selectColor`, `formatArgs`, and uses concepts like namespaces, formatters (`%O`, `%c`), diff calculation, and localStorage for persistence, all characteristic features of the `debug` library.\n```javascript\ne.debug=e,e.default=e,e.coerce=L,e.disable=O,e.enable=d,e.enabled=S,e.humanize=E(),e.destroy=z\n...\ne.selectColor=n\n...\ne.enable(e.load())\n```"
        },
        {
          "name": "ms",
          "motivation": "The code within the `E = x((V, I) => { ... })` block implements functionality for parsing human-readable time strings (like `'2 days'`, `'1h'`, `'10s'`) into milliseconds and formatting millisecond values back into human-readable strings. This is the exact functionality provided by the `ms` library. The result of this module (`E`) is later used as `e.humanize` within the `debug` library implementation.\n```javascript\nfunction B(r){ // Parses string like '1d', '2h' \n  ...\n}\nfunction T(r){ // Formats number to short string like '1d'\n  ...\n}\nfunction U(r){ // Formats number to long string like '1 day'\n  ...\n}\n// In the other module:\ne.humanize=E()\n```"
        }
      ]
    },
    {
      "file": "chunk-N67JWVAP.js",
      "occurences": [
        {
          "name": "Cryptography Utility (SHA-256)",
          "motivation": "The code imports helper functions (`c`, `d`, `f`, `g`, `k`, `l`, `m`) from another local module (`./chunk-PGA54FNZ.js`). It then defines classes (`w`, `y`) and constants (`E`, `u`) that implement the SHA-256 hashing algorithm. The class `y` extends a base class `w` (imported as `_`) and uses bitwise operations, specific constants, and padding logic characteristic of SHA-256. The export `W` wraps the creation of a `y` instance, providing SHA-256 hashing capabilities."
        }
      ]
    },
    {
      "file": "chunk-O4WEKO4R.js",
      "occurences": [
        {
          "name": "Angular",
          "motivation": "The code heavily uses Angular's characteristic structure and features. This includes:\n*   Compiled template functions (e.g., `c` for elementStart, `_` for text, `l` for elementEnd, `g` for element, `m` for property binding, `f` for event listener, `p` for template container, `h` for pipe). These are typical outputs of the Angular compiler.\n*   Static properties like `ɵfac` (factory) and `ɵcmp` (component definition), `ɵpipe` (pipe definition) added by the Angular compiler.\n*   Dependency Injection pattern (`T(K)` likely corresponds to `inject(Store)`).\n*   Imports and usage of common Angular features like `AsyncPipe` (inferred from `U(1,1,e.collections$)`), `RouterLink` (inferred from `m(\"routerLink\", ...)`), pipes (`TimeagoPipe` imported as `Z`, used as `h(2,\"timeago\")`), and directives (`NgIf`, `NgForOf` inferred from usage context and common chunk imports)."
        },
        {
          "name": "NgRx",
          "motivation": "The component interacts with a state management store, characteristic of NgRx:\n*   Injects a store service (`T(K)` likely injects `Store` from `@ngrx/store`).\n*   Dispatches actions using `this.store.dispatch()` with imported variables (`w`, `k`, `et`) that represent NgRx actions.\n*   Selects state slices using `this.store.select(Q)` where `Q` is an imported selector."
        }
      ]
    },
    {
      "file": "chunk-OE5MH5QI.js",
      "occurences": [
        {
          "name": "Cryptographic Utilities",
          "motivation": "The code defines and exports multiple functions (`a` through `p`) related to cryptographic operations (hashing checks, digest checks, random number generation via `globalThis.crypto`), byte array manipulation (checking types, lengths, concatenating, converting endianness, converting strings), and class structures potentially for hash implementations (`s`, `H`, `S`). It utilizes built-in APIs like `globalThis.crypto` and `TextEncoder` but doesn't appear to import external, named libraries within this snippet."
        }
      ]
    },
    {
      "file": "chunk-OW6O257R.js",
      "occurences": [
        {
          "name": "noble-curves/secp256k1",
          "motivation": "The code implements cryptographic operations specifically for the secp256k1 elliptic curve. This includes:\n*   Field arithmetic over the curve's prime field (`dt = Gt(Rt, ...)` where `Rt` is the secp256k1 prime field order).\n*   Point arithmetic on the curve (`Ft = Ge(...)`, `ve = Ft.ProjectivePoint`).\n*   Elliptic Curve Diffie-Hellman (`getSharedSecret:v`).\n*   Schnorr signatures (`Ir = {getPublicKey:Mn, sign:zn, verify:rn, ...}`).\n*   Hashing to the curve (`on = Qe(Ft.ProjectivePoint, ...)` using SSWU method).\n*   Utility functions common in the `noble-curves` library (`Gt`, `Nn`, `De`, `Qe`, `Ye`).\n*   Specific constants for secp256k1 (`Rt`, `Qt`, `Gx`, `Gy`).\n*   Exports named `schnorr` and `secp256k1`."
        },
        {
          "name": "noble-hashes",
          "motivation": "The code contains implementations for:\n*   SHA256 (`ne` class extending `Zt`, `Ot = qe(()=>new ne)`).\n*   HMAC (`Vt` class, `re=(t,n,e)=>new Vt(t,n).update(e).digest()`).\n*   HMAC-based DRBG (`fe` function).\nThese are characteristic components of the `noble-hashes` library often used alongside `noble-curves`."
        }
      ]
    },
    {
      "file": "chunk-PGV2D432.js",
      "occurences": [
        {
          "name": "WalletConnect SDK/Core functionality",
          "motivation": "```javascript\nconst E = \"https://explorer-api.walletconnect.com\";\n// ...\nasync function L(e, t) {\n  // ...\n  let o = new URL(e, E);\n  o.searchParams.append(\"projectId\", f.state.projectId);\n  // ...\n  return (await fetch(o)).json();\n}\nvar h = {\n  // ...\n  getWalletImageUrl(e) {\n    return `${E}/w3m/v1/getWalletImage/${e}?projectId=${f.state.projectId}&sdkType=${O}&sdkVersion=${A}`;\n  },\n  getAssetImageUrl(e) {\n    return `${E}/w3m/v1/getAssetImage/${e}?projectId=${f.state.projectId}&sdkType=${O}&sdkVersion=${A}`;\n  }\n};\n// ...\nconst r = {\n  WALLETCONNECT_DEEPLINK_CHOICE: \"WALLETCONNECT_DEEPLINK_CHOICE\",\n  // ...\n  setWalletConnectDeepLink(e, t) {\n    try {\n      localStorage.setItem(r.WALLETCONNECT_DEEPLINK_CHOICE, JSON.stringify({ href: e, name: t }));\n    } catch {\n      console.info(\"Unable to set WalletConnect deep link\");\n    }\n  },\n  removeWalletConnectDeepLink() {\n    // ...\n  }\n  // ...\n};\n// ...\nconst u = {\n  // ...\n  setWalletConnectUri(e) {\n    d.walletConnectUri = e;\n  },\n  // ...\n};\n```\n*   The code defines constants and functions related to WalletConnect deeplinking (`WALLETCONNECT_DEEPLINK_CHOICE`, `setWalletConnectDeepLink`).\n*   It makes calls to the WalletConnect Explorer API (`https://explorer-api.walletconnect.com`).\n*   It manages WalletConnect state like `walletConnectUri`."
        },
        {
          "name": "Custom Reactive State Management",
          "motivation": "```javascript\nimport { a as m, b as g, c as M } from \"./chunk-K2IO763T.js\";\n\nvar n = m({ history: [\"ConnectWallet\"], view: \"ConnectWallet\", data: void 0 });\nvar _ = {\n  state: n,\n  subscribe(e) {\n    return g(n, () => e(n));\n  },\n  // ... methods modifying state 'n'\n};\n\nvar a = m({ enabled: R, userSessionId: \"\", events: [], connectedWalletId: void 0 });\nvar V = {\n  state: a,\n  subscribe(e) {\n    return g(a.events, () => e(M(a.events[a.events.length - 1])));\n  },\n  // ... methods modifying state 'a'\n};\n// ... similar patterns for d, w, p, v, y, b using m() and g()\n```\n*   The code consistently uses imported functions `m` and `g` to create state objects (`n`, `a`, `d`, `w`, `p`, `v`, `y`, `b`) and subscribe to their changes. This pattern indicates a shared mechanism for state management, likely a small custom library or utility functions provided by the bundler/framework."
        },
        {
          "name": "Async Helper",
          "motivation": "```javascript\nimport { m as c } from \"./chunk-USZTPXNT.js\";\n\nconst r = {\n    // ...\n    wait(e) {\n        return c(this, null, function* () {\n            return new Promise(t => {\n                setTimeout(t, e);\n            });\n        });\n    },\n    // ...\n};\n// ... other async functions using c()\nasync function L(e, t) {\n    return c(this, null, function* () {\n        // ... uses yield\n        return (yield fetch(o)).json();\n    });\n}\n```\n*   The imported function `c` is used to wrap generator functions (`function*`) which contain `yield` expressions, a pattern commonly seen when transpiling async/await syntax or implementing asynchronous operations with generators."
        }
      ]
    },
    {
      "file": "chunk-QQTWIPDE.js",
      "occurences": [
        {
          "name": "Internal Utility Functions",
          "motivation": "```javascript\nimport{h as _}from\"./chunk-USZTPXNT.js\";var Y={};_(Y,{aInRange:()=>z,abool:()=>k,abytes:()=>w,bitGet:()=>G,bitLen:()=>D,bitMask:()=>W,bitSet:()=>P,bytesToHex:()=>m,bytesToNumberBE:()=>O,bytesToNumberLE:()=>V,concatBytes:()=>T,createHmacDrbg:()=>q,ensureBytes:()=>M,equalBytes:()=>R,hexToBytes:()=>x,hexToNumber:()=>E,inRange:()=>S,isBytes:()=>y,memoized:()=>X,notImplemented:()=>Q,numberToBytesBE:()=>I,numberToBytesLE:()=>H,numberToHexUnpadded:()=>U,numberToVarBytesBE:()=>C,utf8ToBytes:()=>j,validateObject:()=>K});\n```\n\nThe code defines and exports a large number of low-level helper functions related to byte manipulation (`bytesToHex`, `hexToBytes`, `concatBytes`, `ensureBytes`), number conversions (`bytesToNumberBE`, `numberToBytesBE`, `hexToNumber`), bitwise operations (`bitGet`, `bitLen`, `bitSet`), and basic cryptographic primitives (`createHmacDrbg`). There are no imports from recognizable third-party libraries like ethers, web3, axios, etc. The `import {h as _} from \"./chunk-USZTPXNT.js\";` indicates an internal dependency within a larger bundled project, suggesting this file provides utility functions for other parts of the application rather than being a standard, named library itself."
        }
      ]
    },
    {
      "file": "chunk-RWGDYE3D.js",
      "occurences": [
        {
          "name": "Angular",
          "motivation": "The code utilizes Angular's characteristic features like dependency injection (`a`, `v`, `c` which are likely minified versions of Angular DI functions like `inject`), decorators (`\\u0275fac`, `\\u0275dir`, `\\u0275prov`, `\\u0275mod`, `\\u0275inj`), lifecycle hooks (`ngOnDestroy`), and the overall structure involving directives and providers (like `N`, `M`, `V`). The `import { ... } from \"./chunk-5JMKXA2Q.js\";` suggests it's part of a larger Angular application bundle."
        },
        {
          "name": "RxJS",
          "motivation": "The code extends a class `f` (likely `Observable` or a related base class from RxJS via Angular's imports) using `super(i => { ... i.next(s) ... })`, and uses `.pipe(I())` where `I` (imported as `da`) is likely an RxJS operator (e.g., `shareReplay`) commonly used in Angular for managing observables. RxJS is a core dependency of Angular."
        }
      ]
    },
    {
      "file": "chunk-UAOJMTAB.js",
      "occurences": [
        {
          "name": "viem",
          "motivation": "```markdown\nThe code includes a version string `\"2.7.15\"` (`var It=\"2.7.15\";`) and a function `Ct` that returns `\"viem@2.7.15\"`. It defines custom error classes like `ViemError` (`Object.defineProperty(this,\"name\",{... value:\"ViemError\"})`) which includes this version. Numerous functions and constants related to Ethereum ABI encoding/decoding (`qe` for encodeAbiParameters, `Ye` for decodeAbiParameters, `Ar` for encodeFunctionData, `Pr` for decodeFunctionResult, `fr` for decodeErrorResult, `Y` for function selector, `D` for formatAbiItem), hashing (`Ne` for keccak256), address manipulation (`x` for isAddress, `he` for getAddress checksum, `wi`), formatting (`gr` for formatGwei, `k` for formatEther), contract interaction simulation (`zr` which wraps `eth_call`), and specific Ethereum error types (`P` as InvalidAddressError, `N` as ChainDoesNotSupportContract, `pe` as ClientChainNotConfiguredError, `S` as ExecutionRevertedError, `F` as FeeCapTooHigh, `K` as FeeCapTooLow, `Q` as NonceTooHighError, `ee` as NonceTooLowError, `te` as NonceMaxValueError, `re` as InsufficientFundsError, `ne` as IntrinsicGasTooHighError, `oe` as IntrinsicGasTooLowError, `ie` as TransactionTypeNotSupportedError, `U` as TipAboveFeeCapError, `et` as FeeConflictError, `tt` as CallExecutionError) are present, strongly matching the `viem` library's API and internal structure. It also includes specific logic for handling EIP-3668 OffchainLookup (CCIP Read) via the `An` ABI definition, the `au` function calling `On`, and the `su` selector (`\"0x556f1830\"`).\n```"
        }
      ]
    },
    {
      "file": "chunk-UB6PLLYC.js",
      "occurences": [
        {
          "name": "fetch polyfill/ponyfill",
          "motivation": "The code includes a module (`Xa`) that checks for the native `fetch` API (`Gr.fetch`) and provides an `XMLHttpRequest`-based implementation if it's missing. This implementation is then assigned to `Dn.fetch` and potentially used throughout the codebase via the `aa` variable."
        },
        {
          "name": "EventEmitter2",
          "motivation": "The code includes a module (`tc`) that defines the `EventEmitter2` class, identifiable by `M.EventEmitter2=M` and the presence of common EventEmitter patterns like `.on()`, `.emit()`, `.off()`, `_events`, and `_maxListeners`."
        },
        {
          "name": "uuid",
          "motivation": "The code contains functions (`To`, `bf`, `rc`) for generating UUIDs, specifically using `crypto.getRandomValues`, performing bitwise operations characteristic of UUID v4 generation (`r[6]=r[6]&15|64`, `r[8]=r[8]&63|128`), and validating the UUID format against a regex (`nc`)."
        },
        {
          "name": "Buffer polyfill",
          "motivation": "A module defines a `Buffer` object (`Y`) that mimics the Node.js Buffer API, including methods like `alloc`, `from`, `isBuffer`, `copy`, `slice`, various integer/float read/write methods, and checks for `TYPED_ARRAY_SUPPORT`."
        },
        {
          "name": "Cryptography Utilities (@noble/hashes, @noble/curves)",
          "motivation": "Multiple modules handle various cryptographic operations:\n*   Hashing (SHA256, SHA512, SHA384) with structures typical of `@noble/hashes` (`HashMD`, internal state management).\n*   Elliptic Curve Cryptography (secp256k1, ed25519, Curve25519) including field arithmetic (`Fp`), point operations (`add`, `double`, `multiply`), wNAF, hashing to curve, characteristic of `@noble/curves`.\n*   Symmetric encryption (AES-GCM, AES-CBC, ChaCha20Poly1305, XChaCha20Poly1305) using WebCrypto (`crypto.subtle`) where available.\n*   Key derivation (HKDF) and message authentication (HMAC, Poly1305).\n*   Hex/byte manipulation utilities."
        },
        {
          "name": "eciesjs",
          "motivation": "The code defines `encrypt` and `decrypt` functions (`Hn`) utilizing the identified cryptography utilities (ECC, AES, HKDF) and imports `PrivateKey` and `PublicKey` classes, matching the structure and purpose of the `eciesjs` library."
        },
        {
          "name": "debug",
          "motivation": "Uses the common `debug` library pattern with namespaced logs like `(0,qe.default)(\"KeyExchange:Layer\")`, `(0,qe.default)(\"SocketService:Layer\")`, etc., which can be enabled/disabled via environment variables or `debug.enable()`."
        },
        {
          "name": "socket.io-client",
          "motivation": "The `Ya` import is used to initialize a connection (`Ya(s,o)`) where `s` is a URL and `o` contains typical Socket.IO options like `autoConnect`, `transports`. The resulting object is used with methods like `.connect()`, `.emit()`, `.on()`, characteristic of the Socket.IO client library."
        },
        {
          "name": "@metamask/providers",
          "motivation": "Contains classes (`g1`, `X1`, `Q1`, `Ws`, `Ct`) that extend a base EventEmitter class (`Fs`, `lh`) and implement the EIP-1193 provider interface (`request`, `on`, `emit`) and MetaMask-specific methods (`metamask_getProviderState`). It handles state like `isConnected`, `chainId`, `selectedAddress`, and events like `connect`, `disconnect`, `chainChanged`, `accountsChanged`."
        },
        {
          "name": "obj-multiplex",
          "motivation": "Imports and uses `ObjectMultiplex` (`Y1`) to create substreams over a base stream (`or.pipeline(e,o,e,...)`)."
        },
        {
          "name": "readable-stream",
          "motivation": "The code imports and uses stream-related functionalities like `Duplex`, `pipeline`, `finished` from the `or` variable, which is derived from `zs.exports`. This indicates the use of the `readable-stream` library or a polyfill providing the Node.js Streams API."
        },
        {
          "name": "bowser",
          "motivation": "The code includes a module (`jh`) that parses the user agent string (`jh.parse(window.navigator.userAgent)`) and provides methods to identify browser, OS, and platform details, matching the functionality of the Bowser library."
        },
        {
          "name": "@metamask/onboarding",
          "motivation": "A module (`vp`) defines a class handling MetaMask installation checks (`isMetaMaskInstalled`), browser detection (`_detectBrowser`), opening download pages (`_openDownloadPage`), and managing a forwarder (`_openForwarder`, `_injectForwarder`, `FORWARDER_MODE`), consistent with `@metamask/onboarding`."
        },
        {
          "name": "@metamask/sdk-install-modal-web",
          "motivation": "A module (`go`) uses Stencil's `defineCustomElements` (`Jp`) to define and manage web components like `mm-install-modal`, `mm-pending-modal`, `mm-select-modal`. It includes logic for rendering these modals, updating QR codes (`updateQRCode`), and handling modal events."
        },
        {
          "name": "Internal QR Code Generator",
          "motivation": "The code contains a function `sf` which implements QR code generation logic internally, including version/ECC level calculations (`ze`), polynomial math (`oe`), Reed-Solomon encoding (`a2`), masking (`sa`), and rendering to SVG (`toSVG`). It does not import an external QR library."
        }
      ]
    },
    {
      "file": "chunk-UQKVHCEI.js",
      "occurences": [
        {
          "name": "EventEmitter",
          "motivation": "The code implements a classic event emitter pattern, defining methods like `on`, `once`, `emit`, `removeListener`, `removeAllListeners`, `listeners`, `listenerCount`, and `eventNames`, along with internal properties `_events` and `_eventsCount`. This pattern is characteristic of Node.js's `EventEmitter` or similar standalone libraries."
        }
      ]
    },
    {
      "file": "chunk-USZTPXNT.js",
      "occurences": [
        {
          "name": "Bundler Runtime Helpers",
          "motivation": "The code consists of utility functions (`E`, `F`, `G`, `H`, `I`, `J`, `K`, `L`, `M`, `N`, `O`, `P`, `Q`, `v`, `R`, `S`, `T`) commonly injected by JavaScript bundlers like esbuild or similar tools. These functions handle tasks such as module loading (`G`, `H`, `K`), interoperability between module systems (`M`, `N`, `O`), object manipulation (`E`, `F`, `I`), and asynchronous operations/transpilation (`Q`, `R`, `S`, `T`). It doesn't appear to be a user-facing library like React or ethers, but rather infrastructure code generated during a build process."
        }
      ]
    },
    {
      "file": "chunk-WHWSKV43.js",
      "occurences": [
        {
          "name": "noble-hashes (sha3/keccak)",
          "motivation": "The code defines and exports functions specific to SHA-3 and Keccak hashing algorithms (`sha3_224`, `sha3_256`, `sha3_384`, `sha3_512`, `keccak_224`, `keccak_256`, `keccak_384`, `keccak_512`, `shake128`, `shake256`). It includes internal helper functions for bit manipulation (`rotrSH`, `rotlSH`, etc.) and big integer operations (`fromBig`, `toBig`, `add`), characteristic of cryptographic libraries. The structure and function names resemble those found in the `noble-hashes` library suite."
        },
        {
          "name": "Web Crypto API",
          "motivation": "The code explicitly checks for `globalThis.crypto` and accesses `crypto.getRandomValues` or `crypto.randomBytes` for generating random bytes (`qt` function). This indicates the use of the browser's built-in cryptographic capabilities."
        }
      ]
    },
    {
      "file": "chunk-X5A6KIJB.js",
      "occurences": [
        {
          "name": "@angular/core",
          "motivation": "The code imports numerous symbols typical of Angular's minified output (e.g., `Oe`, `dt`, `et`, `He`, `ks`, `Is`, `wu`, `Cr`, `Ss`, `Ni`, `gv`, `sf`, `bv`, `go`) and uses Angular-specific static properties like `ɵfac`, `ɵprov`, `ɵdir`, `ɵpipe`."
        },
        {
          "name": "@angular/common",
          "motivation": "Imports related to common directives like `h1` (NgClass) and `p1` (NgIf), `f1` (NgTemplateOutlet), and pipes like `w1` (async), `y1` (lowercase), `b1` (titlecase), `C1` (date), `A1` (number), `E1` (percent), `_1` (currency) are present, originating from `@angular/common`."
        },
        {
          "name": "rxjs",
          "motivation": "Symbols like `ks` (Subject), `fu` (BehaviorSubject), `bv` (EventEmitter), `Yt` (Observable), `St` (of), `fo` (filter), `ov` (finalize), `Nt` (switchMap), `ev` (shareReplay), `fv` (scan), `dv` (withLatestFrom), `Ze` (map), `av` (distinctUntilChanged), `hv` (share), `rv` (timer), `pv` (retry), `sv` (throttleTime), `mu` (startWith), `iv` (reduce), `cv` (catchError), `lv` (tap) are imported and used, which are core operators and classes from the RxJS library, often used with Angular."
        },
        {
          "name": "localforage",
          "motivation": "The code contains a large block (`jE`) that wraps and exports the `localforage` library (`e.localforage=n()`), providing asynchronous storage capabilities."
        },
        {
          "name": "supabase-js",
          "motivation": "The code imports and uses classes like `PostgrestClient`, `PostgrestQueryBuilder`, `PostgrestFilterBuilder`, `PostgrestBuilder`, `PostgrestError` (`YA` and related imports). It also instantiates a `SupabaseClient` (`ph`) which internally uses clients for `Realtime`, `Auth`, `Storage`, and `Functions`. Specific Supabase URLs (`Re.supabaseUrl`) and keys (`Re.supabaseKey`) are configured and used."
        },
        {
          "name": "@wagmi/core",
          "motivation": "Imports and usage patterns strongly suggest `@wagmi/core`. This includes:\n*   Error classes extending a base error (`rn`, `oc`, `Ao`, `sc`, `ac`, `cc`, `Fr`, `hc`, `pr`).\n*   Core actions like `Yu` (connect), `lc` (disconnect), `dc` (reconnect), `gm` (signMessage), `mm` (sendTransaction), `Ju` (getBalance), `fr` (getAccount), `Un` (getChainId), `Zu` (getEnsAddress), `uc` (getEnsAvatar), `ed` (getEnsName), `rd` (switchChain), `nd` (waitForTransactionReceipt), `vm` (writeContract), `T0` (readContract), `k0` (readContracts), `pc` (watchAccount), `ym` (watchConnectors).\n*   The `Am` function resembles `createConfig` used to set up the Wagmi configuration."
        },
        {
          "name": "viem",
          "motivation": "Wagmi relies heavily on Viem. Imports like `Eu` (createClient), `Ps` (http), `Af` (createPublicClient), `Cf` (fallback), `Os` (http), `Dv` (getAddress), `Jt` (getAddress), `jv` (walletActionsL1), `$v` (walletActionsL2), `hf` (readContract), `wf` (multicall), `pf` (getEnsAddress), `ff` (getEnsAvatar), `mf` (getEnsName), `cf` (estimateGas), `af` (getBalance), `lf` (prepareTransactionRequest), `uf` (sendTransaction), `vf` (signMessage), `bf` (signTypedData), `xf` (writeContract), `yf` (waitForTransactionReceipt), `gf` (getTransaction), `df` (call), `_v` (hexToString), `xu` (bytesToString), `vn` (numberToHex), `Wa` (formatUnits), `Mv` (parseEther), `Rv` (formatEther), `Pv` (BaseError), `Lt` (UserRejectedRequestError), `Au` (ResourceUnavailableRpcError), `Ln` (SwitchChainError), `Tv` (stringToHex), `kv` (stringToHex), `Sv` (stringToHex) are indicative of Viem's functions and utilities being used, likely via Wagmi."
        },
        {
          "name": "@ngrx/store",
          "motivation": "The code imports symbols and follows patterns characteristic of NgRx Store, including:\n*   `Se` (createAction), `Be` (props).\n*   `ht` (createSelector), `SF` (createFeatureSelector).\n*   Mentions of `@ngrx/store/init` (`o0`).\n*   Usage of `Store`, `ReducerManager`, `ActionsSubject` (represented by minified names like `Co`, `Ku`, `js`, `om`).\n*   Store feature setup (`DF`, `IF`).\n*   Runtime checks configuration (`KP`, `GP`)."
        },
        {
          "name": "@web3modal/html",
          "motivation": "The code imports and utilizes components and controllers from `@web3modal/core` and `@web3modal/ui` (represented by minified imports like `mc`, `fe`, `k`, `B`, `se`, `ie`, `Ce`, `ci`, `ve`, `Pe`, `mt`, `oe`, `we`, `be`, `qe`, `he`, `Ke`, `tt`, `en`, `or`, `$t`, `or`, `en`, `J`, `je`, `ai`, `_t`, `Ve`, `Ut`, `Ns`). Specific Web3Modal components like `w3m-button`, `w3m-connect-button`, `w3m-account-button`, `w3m-network-button`, `w3m-modal`, `w3m-router`, etc., are defined and used."
        },
        {
          "name": "ngx-lazy-load-image",
          "motivation": "Imports like `oF` (LazyLoadImageDirective), `sF` (LazyLoadImageModule), `Vb` (HOOKS_TOKEN), `qf` (IntersectionObserverHooks), `Vf` (ScrollHooks), and related helper functions (`tP`, `rP`, `nP`) point to the use of a lazy loading image library, likely `ngx-lazy-load-image` within the Angular context."
        }
      ]
    },
    {
      "file": "chunk-XI5D35CZ.js",
      "occurences": [
        {
          "name": "Angular",
          "motivation": "The code uses Angular's dependency injection mechanism, indicated by the import `I from \"./chunk-5JMKXA2Q.js\"` and its usage in `static {this.\\u0275prov=I({token:r,factory:r.\\u0275fac,providedIn:\"root\"})}`. `\\u0275prov` typically represents `ɵprov` in minified Angular code, and `providedIn: \"root\"` is a standard Angular pattern for registering services."
        },
        {
          "name": "UUID Generation/Handling (v5)",
          "motivation": "The code includes functions for UUID validation (`T`, `w`, `U`), parsing (`D`, `A`), stringifying (`y`), and specifically for generating version 5 UUIDs using SHA-1 (`h`, `N`, `g`, `b`, `R`, `C`, `u`). The class `Z` exposes a method `createIdFromString` that utilizes this v5 generation logic (`u(t, u.URL)`)."
        }
      ]
    },
    {
      "file": "chunk-Y5ANX67C.js",
      "occurences": [
        {
          "name": "tslib",
          "motivation": "```javascript\nfunction P(e,t){ ... }\nfunction S(e,t){ ... }\nfunction E(e,t,r,n){ ... }\nfunction F(e,t,r,n){ ... }\nfunction M(e,t){ ... }\n// ... and many other functions like __extends, __assign, __rest, __decorate, __awaiter, __generator etc.\n```\nThis code defines numerous helper functions (like `__extends`, `__assign`, `__rest`, `__decorate`, `__awaiter`, `__generator`, `__classPrivateFieldGet`, `__classPrivateFieldSet`, etc.) that are characteristic of the TypeScript runtime library (`tslib`). These functions are automatically generated by the TypeScript compiler to provide compatibility for features like classes, decorators, async/await, and private fields in older JavaScript environments."
        }
      ]
    },
    {
      "file": "chunk-Y75X2ER2.js",
      "occurences": [
        {
          "name": "Popper.js",
          "motivation": "The code includes functions like `U` (getSide), `Z` (getBoundingClientRect), `De` (getLayoutRect), `ne` (getOffsetParent), `rt` (computeOffsets), `oe` (detectOverflow), and the core instance creation logic (`br`, likely a minified `createPopper`) which are characteristic of Popper.js v2 used for positioning tooltips and popovers."
        },
        {
          "name": "Tippy.js",
          "motivation": "The code explicitly references 'tippy' in variable names (`Tn=\"tippy-box\"`, `Sr=\"tippy-content\"`), data attributes (`data-tippy-*` parsing in `Xn`, setting `data-tippy-root` in `E`), CSS class names, and uses a structure (`ot` function, likely minified `tippy`) consistent with the Tippy.js library for creating tooltips. The default props (`ie`) and setup (`ot.setDefaultProps`) align with Tippy.js initialization."
        },
        {
          "name": "Angular",
          "motivation": "The final class definition (`Gs`) uses Angular's characteristic syntax and lifecycle hooks (`ngOnInit`, `ngOnDestroy`, `ngOnChanges`). It includes minified Angular functions for directive definition (`Qt`, likely `ɵɵdefineDirective`), factory creation (`ɵfac`), and dependency injection (`Dt`, likely `inject`, getting `Jt`/`Zt`, likely `ElementRef`/`Renderer2`). The directive selector is `[\"\",\"tippy\",\"\"]`, indicating it's an Angular directive wrapping the Tippy.js functionality."
        }
      ]
    },
    {
      "file": "ngsw-worker.js",
      "occurences": [
        {
          "name": "Angular Service Worker",
          "motivation": "The filename `ngsw-worker.js`, the presence of classes like `Driver`, `AppVersion`, `AssetGroup`, `DataGroup`, `Adapter`, `CacheDatabase`, and comments referencing `packages/service-worker/worker` strongly indicate the use of the Angular Service Worker library for enabling Progressive Web App (PWA) capabilities like offline caching and push notifications."
        }
      ]
    }
  ],
  "urls": [],
  "ethereum": [
    {
      "file": "chunk-DXUDSOUR.js",
      "occurences": [
        {
          "count": 1
        }
      ]
    },
    {
      "file": "chunk-UB6PLLYC.js",
      "occurences": [
        {
          "count": 16
        }
      ]
    },
    {
      "file": "chunk-X5A6KIJB.js",
      "occurences": [
        {
          "count": 6
        }
      ]
    },
    {
      "file": "main-3KJFAVCD.js",
      "occurences": [
        {
          "count": 2
        }
      ]
    }
  ],
  "fallbacks": []
}