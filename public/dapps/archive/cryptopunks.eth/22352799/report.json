{
  "version": 2,
  "contentHash": "bafybeif2xfwvlrpnjujjc3d6qtuddw4fe22bcm55tt5ufhh62w4kiyx4fm",
  "timestamp": 1745666821,
  "blockNumber": 22352799,
  "rootMimeType": "inode/directory",
  "totalSize": 4677747,
  "favicon": "favicon.ico",
  "title": "CryptoPunks.eth.limo - The NFT marketplace to buy and sell CryptoPunks on Ethereum",
  "distributionPurity": {
    "externalScripts": [
      {
        "file": "index.html",
        "occurences": [
          {
            "type": "script",
            "url": "https://plausible.io/js/script.js"
          },
          {
            "type": "link",
            "url": "https://fonts.googleapis.com"
          }
        ]
      }
    ],
    "externalMedia": []
  },
  "networkingPurity": [
    {
      "file": "223.d16e997fada6cedd.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://explorer-api.walletconnect.com/v3/wallets",
            "https://explorer-api.walletconnect.com/v3/wallets/images",
            "https://explorer-api.walletconnect.com/v3/featured",
            "https://explorer-api.walletconnect.com/v3/wallets/{id}/logo/lg"
          ],
          "library": "@web3modal/core",
          "type": "auxiliary",
          "motivation": "The code contains functions like `ExplorerCtrl.getWallets`, `ExplorerApiCtrl.fetchWalletListings`, `fetchWalletImages`, `fetchFeaturedWallets`, and `getWalletImageUrl`. These construct URLs using `ExplorerApiCtrl.explorerApiUrl` (which defaults to `https://explorer-api.walletconnect.com`) and specific API paths (`/v3/wallets`, `/v3/wallets/images`, `/v3/featured`, `/v3/wallets/{id}/logo/lg`) along with a `projectId` query parameter to fetch wallet metadata and images from the WalletConnect Explorer API via `fetch`."
        },
        {
          "method": "fetch",
          "urls": [],
          "library": "@web3modal/ethereum-provider",
          "type": "auxiliary",
          "motivation": "The code includes a call to `ClientCtrl.ethereum().getEnsAvatar(t)`. This function likely uses the underlying Ethereum provider's `getAvatar` method. ENS avatar resolution often involves fetching data based on the resolver's configuration, which can result in `fetch` calls to external HTTP or IPFS gateways specified in ENS records. The exact URL cannot be determined from the static code as it depends on the specific ENS name being resolved at runtime."
        },
        {
          "method": "WebSocket",
          "urls": [
            "wss://relay.walletconnect.com"
          ],
          "library": "@walletconnect/sign-client",
          "type": "auxiliary",
          "motivation": "The code references WalletConnect connection logic, such as `ClientCtrl.ethereum().connectWalletConnect(...)`. The WalletConnect v2 protocol, used by Web3Modal v2, establishes a session by opening a WebSocket connection to a WalletConnect relay server. The default URL for this relay is `wss://relay.walletconnect.com`, though this can be configured via `ConfigCtrl`."
        }
      ]
    },
    {
      "file": "413.3ce364813d44d5b6.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://explorer-api.walletconnect.com/w3m/v1/getDesktopListings",
            "https://explorer-api.walletconnect.com/w3m/v1/getMobileListings",
            "https://explorer-api.walletconnect.com/w3m/v1/getAllListings"
          ],
          "library": "WalletConnect Web3Modal",
          "type": "auxiliary",
          "motivation": "The code defines a base URL `O = \"https://explorer-api.walletconnect.com\"` and uses it within the `E` function to construct URLs for API calls using `fetch`. Specific functions (`h_getDesktopListings`, `h_getMobileListings`, `h_getAllListings`) call `E` with paths like `/w3m/v1/getDesktopListings`, `/w3m/v1/getMobileListings`, and `/w3m/v1/getAllListings`. Query parameters like `projectId`, `sdkType`, `sdkVersion`, `page`, `entries`, `chains`, `excludedIds`, `recommendedIds` are appended dynamically based on configuration and context. These calls fetch wallet metadata for the modal."
        }
      ]
    },
    {
      "file": "48.f513c50f23320262.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [],
          "library": "Web3 Interaction Library (Abstracted)",
          "type": "rpc",
          "motivation": "The call `s.web3Svc.getEnsOwner(r)` needs to resolve an ENS name, which requires making a JSON-RPC request (likely using `fetch` or `XMLHttpRequest` internally via libraries like ethers.js) to an Ethereum RPC endpoint. The specific URL is determined by the user's wallet provider or internal configuration, not hardcoded here."
        },
        {
          "method": "fetch",
          "urls": [],
          "library": "Angular HttpClient / DataService",
          "type": "self",
          "motivation": "Calls like `s.dataSvc.fetchTopSales(...)` and `s.dataSvc.fetchEvents(...)` indicate network requests to fetch application-specific data. These are likely made using Angular's HttpClient (which wraps `fetch` or `XMLHttpRequest`) to relative URLs on the same domain (e.g., `/api/topsales`, `/api/events`). The exact URLs are encapsulated within the `dataSvc`."
        }
      ]
    },
    {
      "file": "60.176a004e05d27395.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "/assets/logo.svg"
          ],
          "library": "Angular HttpClient",
          "type": "self",
          "motivation": "The code calls `this.http.get(\"/assets/logo.svg\", ...)` likely using Angular's HttpClient (mapped from `mn.Qq`) to fetch a static SVG asset relative to the current domain."
        },
        {
          "method": "fetch",
          "urls": [
            "/assets/cryptophunks-dark.svg"
          ],
          "library": "Angular HttpClient",
          "type": "self",
          "motivation": "The code calls `this.http.get(\"/assets/cryptophunks-dark.svg\", ...)` likely using Angular's HttpClient to fetch a static SVG asset relative to the current domain, conditionally based on the collection name."
        },
        {
          "method": "fetch",
          "urls": [
            "/icons/logo.svg"
          ],
          "library": "Angular HttpClient",
          "type": "self",
          "motivation": "The code calls `this.http.get(s.dataSvc.staticUrl + \"/icons/logo.svg\", ...)` likely using Angular's HttpClient to fetch a static SVG asset. Assuming `staticUrl` is relative or empty, this fetches from the current domain."
        },
        {
          "method": "fetch",
          "urls": [
            "<TOKEN_SVG_PATH>"
          ],
          "library": "Angular HttpClient",
          "type": "self",
          "motivation": "The code calls `this.http.get(e, ...)` where `e` is constructed dynamically as `t.dataSvc.staticUrl + t.dataSvc.tokenImagePath + ... + \".svg\"`. This fetches a token's SVG image from a path relative to the current domain, determined by configuration (`staticUrl`, `tokenImagePath`) and the token ID."
        },
        {
          "method": "fetch",
          "urls": [
            "<GRAPHQL_ENDPOINT>"
          ],
          "library": "Apollo Angular",
          "type": "auxiliary",
          "motivation": "Calls like `this.apollo.query({query: M, ...})` (where `M` is `GetEvents`), and inferred calls within `dataSvc` (`fetchSinglePunk`, `fetchSinglePunkListing`, `fetchCigClaim`) execute GraphQL queries. Apollo Client sends these queries (usually via fetch POST) to a configured GraphQL endpoint (likely a subgraph URL) to retrieve blockchain data."
        },
        {
          "method": "fetch",
          "urls": [
            "<RPC_ENDPOINT>"
          ],
          "library": "ethers.js (via web3Svc)",
          "type": "rpc",
          "motivation": "Calls to `web3Svc` such as `waitForTransaction`, contract interactions (`buyPunk`, `enterBidForPunk`, `offerPunkForSale`, `claimCig`, etc.), `verifyAddressOrEns`, `getCurrentBlock`, and `getCigBalance` interact with the Ethereum blockchain. These actions require sending JSON-RPC requests (via fetch or XMLHttpRequest, typically handled by ethers.js) to the configured RPC endpoint URL."
        }
      ]
    },
    {
      "file": "698.d6bd2b89a9b1d409.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "{url}"
          ],
          "library": "otherwise",
          "type": "auxiliary",
          "motivation": "The code defines a function `x` (aliased as `h`) which iterates through a list of URLs (`r`). Inside the loop, it calls `fetch(i.replace(\"{sender}\",e).replace(\"{data}\",a), {...})`. The variable `i` holds the current URL from the `r` array. The URL string contains placeholders `{sender}` and `{data}` which are replaced dynamically. The exact URL depends on the `urls` argument passed to the `ccipRequest` function (aliased as `x` or `h`). Since the URL structure is dynamic and meant for off-chain data retrieval based on contract calls (CCIP-Read/EIP-3668), it's classified as auxiliary. The method is determined by checking if the URL includes `{data}`: 'GET' if it does, 'POST' otherwise. Data is passed either in the URL ('GET') or as JSON in the request body ('POST')."
        }
      ]
    },
    {
      "file": "710.b21f877162ad3d6e.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "/floorpunks"
          ],
          "library": "DataService (custom)",
          "type": "self",
          "motivation": "The call originates from `this.dataSvc.fetchFloorPunksCard(l)` within the `share` function. The name implies fetching data. The function is called immediately before generating a share link pointing to `${F.c.siteUrl}/floorpunks?=<timestamp>`, suggesting the fetch retrieves data for this relative path `/floorpunks`. The actual network method (`fetch` or `XMLHttpRequest`) is assumed based on modern practices within the abstracted `DataService`."
        },
        {
          "method": "fetch",
          "urls": [
            "/sales"
          ],
          "library": "DataService (custom)",
          "type": "self",
          "motivation": "The call originates from `this.dataSvc.getSalesData()` within the `setSort` and `loadMoreSales` methods. The name implies fetching sales data. This data is likely fetched from an API endpoint relative to the application's domain (e.g., `/api/sales` or similar, represented here as `/sales` placeholder as the exact endpoint isn't visible). The actual network method (`fetch` or `XMLHttpRequest`) is assumed based on modern practices within the abstracted `DataService`."
        }
      ]
    },
    {
      "file": "862.47356340150f888a.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://verify.walletconnect.com/attestation/",
            "https://verify.walletconnect.org/attestation/"
          ],
          "library": "@walletconnect/core",
          "type": "auxiliary",
          "motivation": "The code makes a call `fetch(`${f}/attestation/${c}`, ...)` inside the `fetchAttestation` function within the `X3` class (Verify API client). The base URL `f` is dynamically determined but defaults to `https://verify.walletconnect.com` or the failover `https://verify.walletconnect.org`. This call retrieves attestation data for domain verification."
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.com/v1/"
          ],
          "library": "@walletconnect/universal-provider",
          "type": "rpc",
          "motivation": "The code utilizes a generic HTTP RPC provider (`kd`/`Li`) instantiated within chain-specific providers (e.g., `NE` for eip155). The URL is constructed using the `mi` function, which defaults to `https://rpc.walletconnect.com/v1/?chainId=...&projectId=...` if no specific RPC URL is provided in the configuration (`rpcMap`). This is used to send standard JSON-RPC requests to Ethereum (and potentially other) chains."
        },
        {
          "method": "fetch",
          "urls": [
            "https://echo.walletconnect.com/"
          ],
          "library": "@walletconnect/core",
          "type": "auxiliary",
          "motivation": "The code makes a POST request in the `registerDeviceToken` function within the `Z3` class (Echo client). The URL is constructed as `https://echo.walletconnect.com/${o.projectId}/clients`. This is used to register a device token for push notifications via the WalletConnect Echo service."
        },
        {
          "method": "WebSocket",
          "urls": [
            "wss://relay.walletconnect.com",
            "wss://relay.walletconnect.org"
          ],
          "library": "@walletconnect/core",
          "type": "auxiliary",
          "motivation": "The code establishes a WebSocket connection (`new A1(e, [], c)`) inside the `S1` class. The URL `e` is constructed dynamically by the Relayer (`q3`) using the `Oy` function. This function takes the `relayUrl` (defaulting to `wss://relay.walletconnect.com` with a failover of `wss://relay.walletconnect.org`) and appends query parameters including authentication (`auth`) and the project ID. This connection is essential for the WalletConnect relay protocol."
        }
      ]
    },
    {
      "file": "901.071c9e101cdd4aae.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "Ethereum RPC Endpoint (URL not specified in code)"
          ],
          "library": "Viem / Ethers.js (via web3Svc)",
          "type": "rpc",
          "motivation": "The call `web3Svc.getEnsFromAddress(e)` needs to resolve an ENS name, which requires querying the Ethereum blockchain via an RPC method (`eth_call` to ENS registry/resolver). This is inferred to use `fetch` or `XMLHttpRequest` internally."
        },
        {
          "method": "fetch",
          "urls": [
            "Ethereum RPC Endpoint (URL not specified in code)"
          ],
          "library": "Viem / Ethers.js (via web3Svc)",
          "type": "rpc",
          "motivation": "The call `web3Svc.getBid(e)` reads data from a smart contract, likely using the `eth_call` RPC method. This is inferred to use `fetch` or `XMLHttpRequest` internally."
        },
        {
          "method": "fetch",
          "urls": [
            "Ethereum RPC Endpoint (URL not specified in code)"
          ],
          "library": "Viem / Ethers.js (via web3Svc)",
          "type": "rpc",
          "motivation": "The call `web3Svc.enterBidForPunk(e,i)` submits a transaction to the blockchain, requiring an RPC call like `eth_sendRawTransaction` or `eth_sendTransaction`. This is inferred to use `fetch` or `XMLHttpRequest` internally."
        },
        {
          "method": "fetch",
          "urls": [
            "Ethereum RPC Endpoint (URL not specified in code)"
          ],
          "library": "Viem / Ethers.js (via web3Svc)",
          "type": "rpc",
          "motivation": "The call `web3Svc.waitForTransaction(s)` polls the blockchain for a transaction receipt using the `eth_getTransactionReceipt` RPC method. This polling mechanism is inferred to use repeated `fetch` or `XMLHttpRequest` calls internally."
        },
        {
          "method": "fetch",
          "urls": [
            "Ethereum RPC Endpoint (URL not specified in code)"
          ],
          "library": "Viem / Ethers.js (via web3Svc)",
          "type": "rpc",
          "motivation": "The call `web3Svc.getPunkAttributes(e)` reads data from a smart contract, likely using the `eth_call` RPC method. This is inferred to use `fetch` or `XMLHttpRequest` internally."
        },
        {
          "method": "fetch",
          "urls": [
            "Ethereum RPC Endpoint (URL not specified in code)"
          ],
          "library": "Viem / Ethers.js (via web3Svc)",
          "type": "rpc",
          "motivation": "The call `web3Svc.getPunkImage(e)` reads data (potentially image data or a URI) from a smart contract, likely using the `eth_call` RPC method. This is inferred to use `fetch` or `XMLHttpRequest` internally."
        },
        {
          "method": "fetch",
          "urls": [
            "Ethereum RPC Endpoint (URL not specified in code)"
          ],
          "library": "Viem / Ethers.js (via web3Svc)",
          "type": "rpc",
          "motivation": "The setup using `watchBlockNumber` (`(0,da.T)(l,pa.q,\"watchBlockNumber\")`) involves monitoring for new blocks. While this could use `WebSocket` (`eth_subscribe`), it commonly falls back to polling (`eth_getBlockByNumber`) via repeated `fetch` or `XMLHttpRequest` calls, especially given the `poll: !0` config hint. We list `fetch` as the likely underlying mechanism."
        }
      ]
    },
    {
      "file": "main.4fe578886b7cd609.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://gateway.thegraph.com/api/05526565cefccb810fd7dee06f6b6e34/subgraphs/id/CWCx5K9VPUCgvUCNnY2jX73VTuKy47kRdZ3VVbPKdSvj"
          ],
          "library": "Apollo Client",
          "type": "auxiliary",
          "motivation": "The code configures Apollo Client with `As.c.graphURI` and uses `this.apollo.query` and `this.apollo.watchQuery` to fetch data from this GraphQL endpoint."
        },
        {
          "method": "fetch",
          "urls": [
            "https://gateway-arbitrum.network.thegraph.com/api/05526565cefccb810fd7dee06f6b6e34/subgraphs/id/Epp6gJotEJKAsJYdk7bDEURtGWWeZVXwZds2Pgw8eG51"
          ],
          "library": "Apollo Client",
          "type": "auxiliary",
          "motivation": "The code configures an Apollo Client instance named 'nftx' with `As.c.nftxGraphURI` (using `this.apollo.use(\"nftx\")`) to fetch data from this GraphQL endpoint, specifically for NFTX vault information."
        },
        {
          "method": "fetch",
          "urls": [
            "https://gondiproxy.chickenkiller.com/lending/graphql"
          ],
          "library": "Apollo Client",
          "type": "auxiliary",
          "motivation": "The code configures an Apollo Client instance named 'gondi' with `As.c.gondiUrl` (using `this.apollo.use(\"gondi\")`) to fetch data from this GraphQL endpoint, specifically for Gondi listings."
        },
        {
          "method": "fetch",
          "urls": [
            "https://gateway-arbitrum.network.thegraph.com/api/05526565cefccb810fd7dee06f6b6e34/subgraphs/id/FQJe5L2quB6CGaGv3yyTGUV5ATnEgHcau3Q2nFm7UWAe"
          ],
          "library": "Apollo Client",
          "type": "auxiliary",
          "motivation": "The code configures an Apollo Client instance named 'cig' with `As.c.cigGraphURI` (using `this.apollo.use(\"cig\")`) to fetch data from this GraphQL endpoint, related to $CIG claims."
        },
        {
          "method": "fetch",
          "urls": [
            "https://cloudflare-eth.com",
            "https://eth-mainnet.g.alchemy.com/v2/",
            "https://rpc.walletconnect.org/v1/",
            "https://rpc.mevblocker.io"
          ],
          "library": "wagmi/viem",
          "type": "rpc",
          "motivation": "The code configures wagmi/viem with multiple RPC endpoints. `https://cloudflare-eth.com` is set as the default for chain 1. `As.c.rpcHttpProvider` ('https://eth-mainnet.g.alchemy.com/v2/...') is explicitly used in the Web3Service (`_1`). `https://rpc.walletconnect.org/v1/` is used in the Web3Modal email connector (`gd` class). `https://rpc.mevblocker.io` is used when adding the MEV Blocker network (`addMevBlockerNetwork` function)."
        },
        {
          "method": "fetch",
          "urls": [
            "https://punkcdn.com/data/_attributes.json"
          ],
          "library": "Angular HttpClient",
          "type": "auxiliary",
          "motivation": "The code uses `this.http.get` to fetch attributes data from a hardcoded URL on `punkcdn.com`."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.reservoir.tools/users/",
            "https://api.reservoir.tools/orders/asks/v5",
            "https://api.reservoir.tools/orders/bids/v5",
            "https://api.reservoir.tools/tokens/v6"
          ],
          "library": "Angular HttpClient",
          "type": "auxiliary",
          "motivation": "The code uses `this.http.get` to fetch data from multiple Reservoir API endpoints for user tokens, order asks, order bids, and token details."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.geckoterminal.com/api/v2/networks/eth/tokens/0xcb56b52316041a62b6b5d0583dce4a8ae7a3c629"
          ],
          "library": "Angular HttpClient",
          "type": "auxiliary",
          "motivation": "The code uses `this.http.get` to fetch the $CIG token price from the GeckoTerminal API."
        },
        {
          "method": "fetch",
          "urls": [
            "https://punkcdn.com/data/coin-price"
          ],
          "library": "Angular HttpClient",
          "type": "auxiliary",
          "motivation": "The code uses `this.http.get` to fetch the USD price of Ethereum from `punkcdn.com`."
        },
        {
          "method": "fetch",
          "urls": [
            "https://pro-api.coingecko.com/api/v3/simple/price"
          ],
          "library": "Angular HttpClient",
          "type": "auxiliary",
          "motivation": "The code uses `this.http.get` to fetch token prices (specifically for NFTX vaults) from the CoinGecko Pro API, passing an API key in the headers."
        },
        {
          "method": "fetch",
          "urls": [
            "https://punks.limo/"
          ],
          "library": "Angular HttpClient",
          "type": "self",
          "motivation": "The code uses `this.http.get` with dynamic paths based on the `p.c.siteUrl` configuration (`https://punks.limo`) to fetch data, likely for generating preview cards (`fetchPunkCard`, `fetchUserCard`). The `cryptopunks: true` header suggests a specific internal or related service."
        },
        {
          "method": "fetch",
          "urls": [
            "https://punks.limo/floorpunks"
          ],
          "library": "Angular HttpClient",
          "type": "auxiliary",
          "motivation": "The code uses `this.http.get` to fetch floor punks data from `punks.limo` (`fetchFloorPunksCard`), again with the `cryptopunks: true` header."
        },
        {
          "method": "fetch",
          "urls": [
            "https://punkcdn.com/data/_states.json",
            "/assets/_phunks_states.json"
          ],
          "library": "Angular HttpClient",
          "type": "auxiliary",
          "motivation": "The code uses `this.http.get` to fetch state data, either from a CDN (`p.c.staticUrl` -> `punkcdn.com`) or a relative path (`/assets/_phunks_states.json`), depending on the collection type."
        },
        {
          "method": "fetch",
          "urls": [],
          "library": "viem/Internal",
          "type": "auxiliary",
          "motivation": "The code contains functions `He()` and `On()` which use `fetch` internally, likely for resolving ENS avatar URIs or NFT metadata URIs. The specific URLs are dynamic and passed as arguments (`f` or `s`), making it impossible to list static URLs. These calls check resource headers or fetch JSON data based on the URI provided."
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/identity/{address}",
            "https://rpc.walletconnect.com/v1/identity/{address}"
          ],
          "library": "@web3modal/common",
          "type": "auxiliary",
          "motivation": "The `fetchIdentity` function in the `ae` (BlockchainApiController) class constructs this URL using `x.getBlockchainApiUrl()` and `/v1/identity/` path, then calls `ne.get` (which uses `fetch`). The base URL depends on `x.isRestrictedRegion()`."
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/account/{account}/history",
            "https://rpc.walletconnect.com/v1/account/{account}/history"
          ],
          "library": "@web3modal/common",
          "type": "auxiliary",
          "motivation": "The `fetchTransactions` function in the `ae` (BlockchainApiController) class constructs this URL using `x.getBlockchainApiUrl()` and `/v1/account/.../history` path, then calls `ne.get` (which uses `fetch`)."
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/account/{address}/balance",
            "https://rpc.walletconnect.com/v1/account/{address}/balance"
          ],
          "library": "@web3modal/common",
          "type": "auxiliary",
          "motivation": "The `getBalance` function in the `ae` (BlockchainApiController) class constructs this URL using `x.getBlockchainApiUrl()` and `/v1/account/.../balance` path, then calls `ne.get` (which uses `fetch`)."
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/generators/onrampurl",
            "https://rpc.walletconnect.com/v1/generators/onrampurl"
          ],
          "library": "@web3modal/common",
          "type": "auxiliary",
          "motivation": "The `generateOnRampURL` function in the `ae` (BlockchainApiController) class constructs this URL using `x.getBlockchainApiUrl()` and `/v1/generators/onrampurl` path, then calls `ne.post` (which uses `fetch`)."
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/onramp/options",
            "https://rpc.walletconnect.com/v1/onramp/options"
          ],
          "library": "@web3modal/common",
          "type": "auxiliary",
          "motivation": "The `getOnrampOptions` function in the `ae` (BlockchainApiController) class constructs this URL using `x.getBlockchainApiUrl()` and `/v1/onramp/options` path, then calls `ne.get` (which uses `fetch`)."
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/onramp/quote",
            "https://rpc.walletconnect.com/v1/onramp/quote"
          ],
          "library": "@web3modal/common",
          "type": "auxiliary",
          "motivation": "The `getOnrampQuote` function in the `ae` (BlockchainApiController) class constructs this URL using `x.getBlockchainApiUrl()` and `/v1/onramp/quote` path, then calls `ne.post` (which uses `fetch`)."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.web3modal.org/getWalletImage/{imageId}",
            "https://api.web3modal.com/getWalletImage/{imageId}"
          ],
          "library": "@web3modal/common",
          "type": "auxiliary",
          "motivation": "The `_fetchWalletImage` function in the `Ht` (W3mApi) class constructs this URL using `x.getApiUrl()` and `/getWalletImage/` path, then calls `Vt.getBlob` (which uses `fetch`)."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.web3modal.org/public/getAssetImage/{imageId}",
            "https://api.web3modal.com/public/getAssetImage/{imageId}"
          ],
          "library": "@web3modal/common",
          "type": "auxiliary",
          "motivation": "The `_fetchNetworkImage` and `_fetchConnectorImage` functions in the `Ht` (W3mApi) class construct this URL using `x.getApiUrl()` and `/public/getAssetImage/` path, then call `Vt.getBlob` (which uses `fetch`)."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.web3modal.org/public/getCurrencyImage/{imageId}",
            "https://api.web3modal.com/public/getCurrencyImage/{imageId}"
          ],
          "library": "@web3modal/common",
          "type": "auxiliary",
          "motivation": "The `fetchCurrencyImages` function in the `Ht` (W3mApi) class constructs this URL using `x.getApiUrl()` and `/public/getCurrencyImage/` path, then calls `Vt.getBlob` (which uses `fetch`)."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.web3modal.org/public/getTokenImage/{imageId}",
            "https://api.web3modal.com/public/getTokenImage/{imageId}"
          ],
          "library": "@web3modal/common",
          "type": "auxiliary",
          "motivation": "The `fetchTokenImages` function in the `Ht` (W3mApi) class constructs this URL using `x.getApiUrl()` and `/public/getTokenImage/` path, then calls `Vt.getBlob` (which uses `fetch`)."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.web3modal.org/getWallets",
            "https://api.web3modal.com/getWallets"
          ],
          "library": "@web3modal/common",
          "type": "auxiliary",
          "motivation": "The `fetchFeaturedWallets`, `fetchRecommendedWallets`, `fetchWallets`, and `searchWallet` functions in the `Ht` (W3mApi) class use the `/getWallets` path with `x.getApiUrl()` and call `Vt.get` (which uses `fetch`). Query parameters vary based on the function."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.web3modal.org/getAnalyticsConfig",
            "https://api.web3modal.com/getAnalyticsConfig"
          ],
          "library": "@web3modal/common",
          "type": "auxiliary",
          "motivation": "The `fetchAnalyticsConfig` function in the `Ht` (W3mApi) class uses the `/getAnalyticsConfig` path with `x.getApiUrl()` and calls `Vt.get` (which uses `fetch`)."
        },
        {
          "method": "fetch",
          "urls": [
            "https://pulse.walletconnect.org/e",
            "https://pulse.walletconnect.com/e"
          ],
          "library": "@web3modal/common",
          "type": "auxiliary",
          "motivation": "The `_sendAnalyticsEvent` function in the `lt` (AnalyticsCtrl) class uses the `/e` path with `x.getAnalyticsUrl()` and calls `Qe.post` (which uses `fetch`) to send analytics data."
        }
      ]
    },
    {
      "file": "polyfills.aa0d9bd37968f15b.js",
      "occurences": [
        {
          "method": "XMLHttpRequest",
          "urls": [],
          "library": "Zone.js",
          "type": "auxiliary",
          "motivation": "The code patches `XMLHttpRequest.prototype.open` and `XMLHttpRequest.prototype.send` using `Zone.js`'s `ue` utility function. The `open` patch captures the URL (`x[1]`) and stores it. The `send` patch uses `Zone.current.scheduleMacroTask` (`Xe`) to wrap the XHR lifecycle. No specific URLs are hardcoded in this polyfill; they are passed dynamically by the application code when it calls `open`."
        },
        {
          "method": "fetch",
          "urls": [],
          "library": "Zone.js",
          "type": "auxiliary",
          "motivation": "The code contains `ue(e,\"fetch\",d=>function ee(d){...})`, which patches the global `fetch` function using Zone.js utilities to likely wrap the Promise returned by `fetch` in a ZoneAwarePromise. No specific URLs are hardcoded in this polyfill; they are passed dynamically by the application code when it calls `fetch`."
        }
      ]
    }
  ],
  "libraryUsage": [
    {
      "file": "115.0e9d14ef203371b7.js",
      "occurences": [
        {
          "name": "@web3modal/core",
          "motivation": "Presence of multiple controllers like `AccountController`, `NetworkController`, `ConnectionController`, `OptionsController`, `SIWEController`, `RouterController`, `SnackController`, `En` (event controller), and state management utilities (`(0,S.BX)`, `(0,S.B1)`) suggests the use of Web3Modal's core logic library."
        },
        {
          "name": "lit",
          "motivation": "The code defines custom elements (`(0,p.customElement)('w3m-connecting-siwe')`), uses base classes (`extends h.WF`), template literals (`h.qy`), tagged template literals for styles (`h.AH`), and decorators (`(0,W.wk)()`), all characteristic features of the Lit library for building web components."
        },
        {
          "name": "@web3modal/common or @walletconnect/utils",
          "motivation": "The use of `E.LX.caipNetworkIdToNumber` indicates a utility function for handling CAIP (Chain Agnostic Improvement Proposals) standards, likely originating from a common utility package within the Web3Modal or WalletConnect ecosystem."
        }
      ]
    },
    {
      "file": "223.d16e997fada6cedd.js",
      "occurences": [
        {
          "name": "Lit",
          "motivation": "`LitElement` and `lit-html` are used extensively. Evidence includes:\n* Class definitions extending `LitElement` (e.g., `class K extends b{`, where `b` is identified as `LitElement`'s base class `ce`).\n* Usage of `html` (aliased as `p`) and `css` (aliased as `E`) tagged template literals.\n* Use of Lit directives like `classMap` (imported as `z`).\n* Decorator patterns used for property definitions (e.g., `ge([w({type:Boolean})],K.prototype,\"disabled\",2)` where `w` is a property decorator factory).\n* Standard Lit lifecycle methods like `render()`, `firstUpdated()`, `connectedCallback()`, `disconnectedCallback()`.\n* Explicit tracking of Lit versions (`litElementVersions`, `litHtmlVersions`)."
        },
        {
          "name": "Motion One",
          "motivation": "The code utilizes animation functionalities characteristic of Motion One:\n* Imports and usage of animation functions like `animate` (e.g., `ie(this.routerEl,{opacity:[1,0]...`) which corresponds to the imported `ie` function wrapping `Zo` and `zo`, ultimately using `Cr` (a custom animation class similar to Motion One's internal implementation) or potentially the native `animate`.\n* Presence of easing functions (`Ie`, `Ar`) and timing constants (`U={duration:.3...}`).\n* Checks for Web Animations API (WAAPI) support (`ue.waapi`, `Pr.waapi`).\n* Handling of CSS variables for transforms (`wt=i=>`--motion-${i}`, `Ve_set`, `Ve_get`)."
        },
        {
          "name": "@web3modal/* (Core, UI, Utils, etc.)",
          "motivation": "The code implements a Web3 connection modal, heavily utilizing components and logic likely from the Web3Modal v2 library suite (@web3modal/core, @web3modal/ui, @web3modal/common, potentially including parts previously in @walletconnect/modal-*):\n* Extensive use of custom elements prefixed with `wcm-` (e.g., `<wcm-modal>`, `<wcm-qrcode>`, `<wcm-connect-wallet-view>`, `<wcm-wallet-button>`).\n* References to controllers like `ThemeCtrl` (d.lH), `ModalCtrl` (d.D8), `RouterCtrl` (d.jL), `ExplorerCtrl` (d.pV), `ClientCtrl` (d.IN), `ConfigCtrl` (d.mb), `ToastCtrl` (d.dC), `OptionsCtrl` (d.vZ), `CoreHelperUtil` (d.Ao). These controllers manage state and logic for the modal.\n* Logic for fetching wallet data from the WalletConnect Explorer API (`ExplorerCtrl.getWallets`, `ExplorerApiCtrl.fetchWalletListings`, `ExplorerApiCtrl.getWalletImageUrl`).\n* Handling of WalletConnect URIs (`walletConnectUri`).\n* Specific UI components for different connection flows and states (e.g., `wcm-desktop-connecting-view`, `wcm-qrcode-view`, `wcm-wallet-explorer-view`).\n* Usage of WalletConnect-specific icons and branding (`O.WALLET_CONNECT_LOGO`, etc.).\n* References to `explorer.walletconnect.com` for fetching wallet data."
        }
      ]
    },
    {
      "file": "323.8ed513cecc55d395.js",
      "occurences": [
        {
          "name": "tinycolor",
          "motivation": "The code implements a color parsing and manipulation library. Function names like `toHsv`, `toHsl`, `toHex`, `toRgb`, `lighten`, `darken`, `desaturate`, `saturate`, `spin`, `mix`, `readability`, `mostReadable`, and the structure involving `s.prototype` and methods like `_applyModification` closely resemble the API and internal structure of the `tinycolor2` library (or a derivative/fork). The presence of specific strings like `progid:DXImageTransform.Microsoft.gradient` and the extensive color name map (`s.names`) further support this identification."
        }
      ]
    },
    {
      "file": "413.3ce364813d44d5b6.js",
      "occurences": [
        {
          "name": "WalletConnect Web3Modal",
          "motivation": "The code explicitly uses constants like `WALLETCONNECT_DEEPLINK_CHOICE`, `WCM_VERSION`, mentions `WalletConnectModal`, interacts with URLs under `https://explorer-api.walletconnect.com`, and dynamically loads a web component named `wcm-modal`. Functions like `setWalletConnectDeepLink`, `setWalletConnectAndroidDeepLink`, `removeWalletConnectDeepLink`, and state management related to wallet connection (`ConnectWallet` view, `walletConnectUri`) are characteristic of Web3Modal v2."
        },
        {
          "name": "Proxy State Management Library (Likely Valtio/similar)",
          "motivation": "The code uses patterns like `(0,o.BX)({...})` to create reactive state objects (e.g., `i`, `a`, `m`, `L`, `g`, `I`, `y`, `b`) and `(0,o.B1)(...)` to subscribe to changes. This pattern is common with proxy-based state management libraries like Valtio, which Web3Modal is known to use internally."
        }
      ]
    },
    {
      "file": "48.f513c50f23320262.js",
      "occurences": [
        {
          "name": "Angular",
          "motivation": "The code utilizes Angular's component structure (`@Component`, `ngOnInit`, `ngAfterViewInit`, `ngOnChanges`, `ngOnDestroy`), dependency injection (`constructor(private ...)`), template syntax (`*ngIf`, `*ngFor`, `{{...}}`, `[input]`, `(event)`), and minified Angular runtime functions (like `t.rXU`, `t.VBU`, `t.j41`, `t.EFF`)."
        },
        {
          "name": "Chart.js",
          "motivation": "The code imports and uses Chart.js core features (`N.t1` likely refers to `Chart`), registers plugins (`N.t1.register(...)`), configures charts with scales (`options.scales`), datasets (`config.data.datasets`), and chart types (`type: 'bar'`, `type: 'line'`). Methods like `chart.update()`, `chart.destroy()`, `chart.zoomScale()` are called."
        },
        {
          "name": "Hammer.js",
          "motivation": "The code imports Hammer.js (`L = O.n(ge)` where `ge` is likely Hammer.js, referenced later as `L()`). It creates a `Hammer.Manager` (`new (L().Manager)(s)`) and adds recognizers like `Pan` (`new (L().Pan)`) and `Pinch` (`new (L().Pinch)`). Event listeners for Hammer gestures (`pinchstart`, `pinch`, `pinchend`, `panstart`, `panmove`, `panend`) are set up."
        },
        {
          "name": "chartjs-plugin-zoom",
          "motivation": "The code registers a Chart.js plugin referenced by the variable `Yt`. This object has `id: \"zoom\"`, configuration options under `defaults.zoom` (like `wheel`, `drag`, `pinch`, `mode`) and `defaults.pan`. It implements Chart.js plugin hooks like `start`, `beforeUpdate`, `beforeDraw`, `afterDraw`, `stop`. Functions like `it()` (likely `zoom`), `z()` (likely `zoomRect`), `Ce()` (likely `pan`) are defined within its scope."
        },
        {
          "name": "chartjs-plugin-crosshair",
          "motivation": "The code registers a Chart.js plugin referenced by the variable `ce`. This object has `id: \"crosshair\"`, configuration options under `le` (like `line`, `sync`, `zoom`), and implements Chart.js plugin hooks like `afterInit`, `destroy`, `afterEvent`, `afterDraw`, `beforeTooltipDraw`. Functions specific to crosshair functionality like `resetZoom`, `doZoom`, `drawZoombox`, `drawTraceLine`, `interpolateValues` are present."
        },
        {
          "name": "RxJS",
          "motivation": "The code extensively uses RxJS operators and observables. Patterns like `.pipe(...)`, `.subscribe()`, operators like `(0,Bt.B)` (likely `debounceTime`), `(0,ft.Q)` (likely `takeUntil`), `(0,k.n)` (likely `switchMap`), `(0,Y.M)` (likely `map`), `(0,j.T)` (likely `filter`), and observable sources like `jt.B` (likely `Subject`) and `Ht.t` (likely `BehaviorSubject`) are used throughout the component logic."
        },
        {
          "name": "ng-select",
          "motivation": "The code includes `<ng-select>` elements in the Angular templates (`t.j41(33,\"ng-select\",11)`, `t.j41(5,\"ng-select\",7)`, `t.j41(4,\"ng-select\",26)`). Attributes like `[items]`, `bindValue`, `bindLabel`, `[(ngModel)]`, `(change)` are used, which are characteristic of the ng-select library."
        },
        {
          "name": "ngx-timeago",
          "motivation": "The code uses a timeago pipe/component, indicated by `t.nI1(16,\"timeago\")` in the template function `nn`."
        },
        {
          "name": "ngx-lazyload-image",
          "motivation": "The code uses a directive for lazy loading images, evidenced by the `[lazyLoad]` binding in multiple image tags (`t.Y8G(\"lazyLoad\", ...)`)."
        },
        {
          "name": "Web3 Interaction Library (Abstracted)",
          "motivation": "The code calls methods like `s.web3Svc.verifyAddress(r)` and `s.web3Svc.getEnsOwner(r)`. This indicates the use of a library (likely ethers.js or web3.js wrapped in an Angular service `web3Svc`) to interact with Ethereum, specifically for address validation and ENS resolution."
        }
      ]
    },
    {
      "file": "60.176a004e05d27395.js",
      "occurences": [
        {
          "name": "Angular",
          "motivation": "The code uses Angular-specific syntax (`n.VBU`, `n.rXU`, `n.RV6`), template directives (`*ngIf`, `[formControl]`, `(click)`), dependency injection patterns (`n.rXU`), lifecycle hooks (`ngOnChanges`, `ngOnDestroy`), and imports minified Angular modules (`f.MD`, `I.YN`, `W.iI`, `W.Wk`)."
        },
        {
          "name": "RxJS",
          "motivation": "The code extensively uses RxJS patterns: `Observable`, `Subject` (`hn.B`), the `.pipe()` method, and various operators (evident from minified calls like `Q.n` -> `switchMap`, `G.M` -> `tap`, `Pn.Q` -> `takeUntil`, `K.E` -> `withLatestFrom`, `Nn.p` -> `filter`, `An.of` -> `of`)."
        },
        {
          "name": "Apollo Angular",
          "motivation": "The code uses `this.apollo.query` to execute GraphQL queries (`M=an.J1\\`` defines a GraphQL query). Dependency injection likely provides Apollo services (`an.Ic`). This library is used for data fetching via GraphQL."
        },
        {
          "name": "ethers.js",
          "motivation": "The code interacts heavily with the Ethereum blockchain through an abstraction layer (`web3Svc`). Functions like `waitForTransaction`, `ethToWei`, `verifyAddressOrEns`, `getCurrentBlock`, and contract interaction methods (`buyPunk`, `enterBidForPunk`, `claimCig`, etc.) strongly indicate the use of a Web3 library like ethers.js underneath `web3Svc` to handle RPC communication and transaction signing."
        },
        {
          "name": "ng-lazyload-image",
          "motivation": "The code includes logic for lazy loading images, specifically using the `lazyLoad` directive attribute in templates (`Y8G(\"lazyLoad\", ...)`), managing state via CSS classes (`ng-lazyloading`, `ng-lazyloaded`), and importing related modules/functions (`c(17388)`, `_n.Un`, `_n.Je`)."
        },
        {
          "name": "Tippy.js",
          "motivation": "HTML templates contain attributes like `tippy` and `data-tippy-content` (`BMQ(\"data-tippy-content\", ...)`), which are specific to the Tippy.js library for tooltips."
        },
        {
          "name": "TinyColor",
          "motivation": "The code uses color manipulation functions like `(0,D.A)(...).toHex()`, `(0,D.A)(...).toHsl()`, `(0,D.A)(...).setAlpha(...).toRgbString()`. `D.A` likely maps to the `tinycolor` function for parsing and manipulating colors."
        }
      ]
    },
    {
      "file": "710.b21f877162ad3d6e.js",
      "occurences": [
        {
          "name": "Angular",
          "motivation": "The code uses Angular's component structure (`@Component`), lifecycle hooks (`ngAfterViewInit`, `ngOnChanges`, `ngOnDestroy`), template syntax (`*ngIf`, `*ngFor`, `{{...}}`, `[input]`, `(output)`), dependency injection (`constructor`), pipes (`async`, `date`, `number`, `titlecase`), and minified framework functions (e.g., `e.VBU`, `e.rXU`, `e.pXf`, `e.PLo`, `e.DNE`). Specific modules like `@angular/common` (for `Location`, pipes, common directives), `@angular/core`, and `@angular/router` (`ActivatedRoute`, `Router`) are implied or used."
        },
        {
          "name": "RxJS",
          "motivation": "The code utilizes RxJS extensively for asynchronous operations and state management. Observables (`Observable`), Subjects (`Subject`, `BehaviorSubject` like `G.t`), operators (`pipe`, `filter`, `map`, `switchMap`, `take`, `catchError`, `of`) and related patterns are present (e.g., `asObservable()`, `subscribe()`, `unsubscribe()`). Minified operator functions are visible (e.g., `f.p`, `x.M`, `q.n`, `V.s`, `Q.W`)."
        },
        {
          "name": "@ng-select/ng-select",
          "motivation": "The component's template explicitly uses the `<ng-select>` element (`e.j41(3,\"ng-select\",33)`, `e.j41(1,\"ng-select\",41)`, `e.j41(5,\"ng-select\",39)`) for dropdown/select functionality, which is the primary component provided by this library."
        },
        {
          "name": "ngx-lazy-load-image",
          "motivation": "The code includes a directive with the selector `lazyLoad` (`M.Mj6.None,\"lazyLoad\",\"lazyImage\"`) and implements lazy loading logic using `IntersectionObserver` (seen in class `X` and related code imported via `g(17388)`). This pattern is characteristic of the `ngx-lazy-load-image` library or a similar custom implementation."
        },
        {
          "name": "ngx-timeago",
          "motivation": "The template uses the `timeago` pipe (`e.nI1(10,\"timeago\")`) to format timestamps into relative time representations (e.g., '2 hours ago'), which is the function provided by this library."
        },
        {
          "name": "Custom Pagination Service",
          "motivation": "The code defines a custom pagination service class `te` with methods like `register`, `setCurrentPage`, `setTotalItems`, etc., and uses an `EventEmitter` (`change`) for state updates. This manages pagination state within the application, potentially interacting with UI components elsewhere."
        }
      ]
    },
    {
      "file": "809.b882c058ad588a67.js",
      "occurences": [
        {
          "name": "Angular",
          "motivation": "The code uses Angular's component structure (`class n { ... }`), dependency injection (`t.rXU(c.nX)`, `t.rXU(c.Ix)`, etc.), template syntax (`template: function(r,e){...}`), decorators (`@Component` implicitly via `t.VBU`), and lifecycle hooks/features (`standalone:!0`, `features:[t.aNF]`). Imports from `@angular/common` (`l = a(60177)`) and `@angular/router` (`c = a(49458)`) are also suggested by the minified variable usage."
        },
        {
          "name": "RxJS",
          "motivation": "The code extensively uses RxJS patterns for handling asynchronous data streams. This includes creating BehaviorSubjects (`new p.t(...)`), exposing observables (`asObservable()`), and using pipeable operators (`pipe(...)`, `(0,h.T)`, `(0,E.M)`, `(0,D.n)`, `(0,v.of)`). The minified variables `p`, `v`, `h`, `E`, `D` likely correspond to imports from the RxJS library."
        }
      ]
    },
    {
      "file": "862.47356340150f888a.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code begins with `(self.webpackChunkcryptopunks_eth=self.webpackChunkcryptopunks_eth||[]).push(...)`, which is the standard boilerplate for code bundled by Webpack."
        },
        {
          "name": "@walletconnect/universal-provider",
          "motivation": "The main export `EthereumProvider` (`r2`) and its initialization pattern (`xa.init(...)`) are characteristic of `@walletconnect/universal-provider`. It orchestrates various WalletConnect components."
        },
        {
          "name": "@walletconnect/sign-client",
          "motivation": "The code includes classes like `SignClient` (`Vc`) and `Engine` (`pE`), responsible for handling WalletConnect v2 session logic (proposals, settlements, requests, events, etc.), which are core components of `@walletconnect/sign-client`."
        },
        {
          "name": "@walletconnect/core",
          "motivation": "Core functionalities like `Core` (`Bc`), `Relayer` (`q3`), `Crypto` (`T3`), `Expirer` (`Q3`), `History` (`Y3`), `KeyChain` (`P3`), `Verify` (`X3`), and `Echo` (`Z3`) are present, indicating the use of `@walletconnect/core`."
        },
        {
          "name": "@walletconnect/utils",
          "motivation": "Utility functions for environment detection (`ns`, `ts`, `rs`), JSON-RPC payload checking (`Tc`, `ga`), constants, and error handling (`Me`, `Jt`) are used, aligning with the utilities provided by `@walletconnect/utils`."
        },
        {
          "name": "@walletconnect/time",
          "motivation": "Time constants like `FIVE_MINUTES`, `THIRTY_SECONDS`, `ONE_DAY`, `SEVEN_DAYS` (`Xe`) are used throughout the code, matching those exported by `@walletconnect/time`."
        },
        {
          "name": "@walletconnect/environment",
          "motivation": "The code imports and uses environment detection functions (`ns`, `ts`, `rs` imported from `P(23601)`) to determine if the runtime is Node.js, Browser, or React Native, which is the purpose of `@walletconnect/environment`."
        },
        {
          "name": "@walletconnect/modal",
          "motivation": "The code conditionally imports and instantiates `WalletConnectModal` (`P.e(413).then(P.bind(P, 52413))`) based on the `showQrModal` option, indicating optional use of the `@walletconnect/modal` package."
        },
        {
          "name": "Noble Crypto Libraries (or similar)",
          "motivation": "The code includes implementations or imports (`P(...)`) for various cryptographic primitives like `Ed25519` (`uh`, `P(40597)`), `X25519` (`Ze`, `P(96863)`), `SHA256` (`je`, `P(21001)`), `SHA512` (`be`, `P(88411)`), `ChaCha20Poly1305` (`te`, `P(25945)`), `HMAC` (`P(48921)`), `HKDF` (`g`, `P(80877)`), `Poly1305` (`P(95905)`). These are often provided by libraries like `@noble/curves`, `@noble/hashes`, `@noble/ciphers`, or similar high-quality crypto libraries."
        },
        {
          "name": "Multiformats",
          "motivation": "The code contains extensive sections (`P(62862)`) dedicated to multibase encoding/decoding (e.g., `base16`, `base58btc`, `base64url`), multihash implementations (`sha256`, `sha512`), and CID concepts, suggesting the use of the `multiformats` library or its constituent parts (`multibase`, `multihash`, `cids`)."
        },
        {
          "name": "Lodash",
          "motivation": "The code includes a bundled version of Lodash (`P(35667)`), indicated by the presence of its internal functions and structures (`__lodash_hash_undefined__`, `xs`, `vn`, `St`, etc.) and the export pattern `Pr._ = bs`."
        },
        {
          "name": "query-string",
          "motivation": "The code imports (`P(98570)`) and uses functions like `parse` (`Ie`) and `stringify` (`m.stringify`) for handling URL query parameters, which is characteristic of the `query-string` library."
        },
        {
          "name": "pino",
          "motivation": "The code imports (`P(91105)`) and uses a logger setup consistent with `pino`, specifically its browser version (`pino/browser`). The setup involves configuration for serialization and transmission in a browser context."
        },
        {
          "name": "idb-keyval",
          "motivation": "The code defines a storage class (`av`) that wraps an IndexedDB implementation (`iv`) using patterns (`dbName`, `storeName`, `keyval-store`) typical of the `idb-keyval` library for simple key-value storage in IndexedDB."
        },
        {
          "name": "whatwg-fetch (or ponyfill)",
          "motivation": "The code explicitly includes a fetch ponyfill (`P(27886)`) and checks for native fetch support (`P(48901)`), ensuring fetch functionality is available, a common pattern when using `whatwg-fetch` or similar ponyfills."
        }
      ]
    },
    {
      "file": "901.071c9e101cdd4aae.js",
      "occurences": [
        {
          "name": "Angular",
          "motivation": "The code uses Angular-specific syntax like `o.VBU` (component definition), `o.FsC` (directive definition), lifecycle hooks (`ngOnInit`, `ngOnChanges`, `ngOnDestroy`), dependency injection (`o.rXU`), template syntax helpers (`o.j41`, `o.EFF`, `o.k0s`, `o.SpI`, `o.Y8G`, `o.DNE`, `o.vxM`), and decorators implicitly (`@Component`, `@Directive`, `@Input`, `@Output`). The file structure (`self.webpackChunkcryptopunks_eth`) also suggests a framework build."
        },
        {
          "name": "NgRx",
          "motivation": "The code uses `this.store.select(F0.yk)` and `this.store.dispatch((0,ha.Td)({currentBlock:Number(s)}))`, which are characteristic APIs of the NgRx library for state management in Angular applications."
        },
        {
          "name": "Tippy.js",
          "motivation": "The code explicitly calls `(0,re.Ay)(e, { ... })` within a directive selected by `[tippy]`. The options passed (`content`, `zIndex`, `theme`, `arrow`, `placement`, `appendTo`) are configuration options for Tippy.js, a tooltip/popover library. The code also references `_tippy` property and `destroy()` method."
        },
        {
          "name": "D3.js",
          "motivation": "The code includes functions and patterns typical of D3.js for SVG manipulation and visualization: `Mt.prototype.select`, `Mt.prototype.selectAll`, `.append(\"svg\")`, `.attr`, `.style`, `.data`, `.join`, `.transition`, `.delay`, `.call`. Specific D3 modules/functions seem to be used, such as axis generation (`Rt` likely corresponds to `d3.axisBottom` or similar), scales (`r0` likely `d3.scaleBand`), and potentially zoom/transform (`wt` resembling `d3.zoomIdentity`)."
        },
        {
          "name": "Viem / Ethers.js (Web3 Interaction Library)",
          "motivation": "The code heavily interacts with an abstraction layer `this.web3Svc` which performs Ethereum blockchain operations: `getEnsFromAddress`, `connect`, `checkNetwork`, `getBid`, `enterBidForPunk`, `waitForTransaction`, `getPunkAttributes`, `getPunkImage`, `watchBlockNumber`. These operations necessitate calls to an Ethereum RPC endpoint, typically handled by libraries like Viem or Ethers.js. The usage of `watchBlockNumber` and potential Viem client references (`pa.q`) suggest a modern library like Viem is used underneath the `web3Svc`."
        }
      ]
    },
    {
      "file": "common.9d65e9897e881c0f.js",
      "occurences": [
        {
          "name": "events (Node.js polyfill/implementation)",
          "motivation": "The code explicitly defines and exports an `EventEmitter` class (`o.EventEmitter=o`, `p.exports=o`) with methods like `on`, `emit`, `once`, `removeListener`, `setMaxListeners`, etc. This API mirrors the Node.js `events` module, suggesting it's either a direct port, a polyfill, or a compatible implementation for a browser environment, potentially bundled by Webpack (`self.webpackChunkcryptopunks_eth`)."
        }
      ]
    },
    {
      "file": "main.4fe578886b7cd609.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code starts with `(self.webpackChunkcryptopunks_eth=self.webpackChunkcryptopunks_eth||[])`, which is the standard bootstrapping mechanism for Webpack-bundled JavaScript applications."
        },
        {
          "name": "@angular/core",
          "motivation": "The code uses Angular's component decorators (`selectors:[[\"app-loader\"]]`), lifecycle hooks (`ngOnInit`, `ngOnDestroy`), dependency injection patterns (`t.rXU`, `t.KVO`, `t.jDH`), and minified runtime function calls (e.g., `t.VBU`, `t.j41`, `t.EFF`, `t.k0s`, `t.nrm`) characteristic of an Angular application compiled in production mode."
        },
        {
          "name": "Apollo Client",
          "motivation": "The code explicitly uses `this.apollo.query`, `this.apollo.watchQuery`, and `this.apollo.use(\"...\").query` methods. It also defines GraphQL queries using a template literal tag (`Ne.J1`, likely minified from `gql` or similar) often associated with Apollo Client."
        },
        {
          "name": "viem / ethers",
          "motivation": "Numerous utility function calls suggest the use of a library like viem or ethers.js for blockchain interactions and data formatting. Examples include potential mappings to `getAddress`, `encodeFunctionData`, `decodeFunctionResult`, `hexToBytes`, `numberToHex`, `keccak256`, `concat`, `bytesToHex`, `stringToBytes`, `stringToHex`, `hexToNumber`, `hexToBigInt`, `parseAccount`, `formatTransactionRequest`, `getTransactionError`, `formatUnits`, `parseUnits`, `isAddress`. The presence of ABIs (e.g., `F=JSON.parse('[...]')` for the main contract, `U=JSON.parse('[...]')` likely for Phunks) further supports this."
        },
        {
          "name": "@wagmi/core",
          "motivation": "The code includes references to `wagmi.sh/core` in error messages. It utilizes patterns consistent with wagmi's connector management (`Tt` likely being the injected connector factory), configuration (`d1`), client retrieval (`xt`), and actions (`sr` for autoConnect, `$t` for disconnect, `mr` for connect, `rn` for switchChain). The `e1` class seems to wrap wagmi's configuration and state management."
        },
        {
          "name": "@web3modal/core",
          "motivation": "The code defines numerous custom elements with the `w3m-` prefix (e.g., `w3m-account-button`, `w3m-connect-button`, `w3m-modal`, `w3m-router`). It also uses controllers prefixed with `ge.` (likely minified Web3Modal controllers like `AccountController`, `NetworkController`, `W3` for the modal, `aG` for Onramp) for managing wallet connections, network state, and modal UI."
        },
        {
          "name": "RxJS",
          "motivation": "The code extensively uses RxJS patterns, including `Observable` (`new x.c`), `Subject` (`new t.B`), `BehaviorSubject` (`new w.t`), operators like `pipe`, `map` (`ne.T`), `filter` (`ae.p`), `switchMap` (`re.n`), `tap` (`pe.M`, `g.M`), `catchError` (`x.W`, `ne.W`), `take` (`Ae.s`), `first` (`re.p`), `combineLatest` (`ps.z`), `timer` (`Bn.Y`), `interval` (`Kt.O`), `of` (`A.of`), `throwError` (`T.$`), `EMPTY` (`Ga.w`), and subscription management."
        },
        {
          "name": "Angular",
          "motivation": "The code extensively uses Angular's decorators (`@Component`, `@NgModule`, `@Injectable`), dependency injection patterns (`t.KVO`, `t.rXU`, `t.\\u0275prov`, `t.\\u0275fac`), component lifecycle hooks (`ngOnInit`, `ngOnDestroy`, `ngOnChanges`), and modules related to common Angular features like routing (`RouterOutlet`, `RouterLink`), forms (`FormControl`, `FormGroup`, `ngModel`), and HTTP (`HttpClient`). Specific Angular internal symbols like `t.FsC` (defineComponent), `t.EJ8` (definePipe), `t.c1b` (ViewContainerRef), `t.gRc` (ChangeDetectorRef) are present throughout the code."
        },
        {
          "name": "@angular/common/http",
          "motivation": "Module `21626` contains classes and functions that closely mirror the structure and naming conventions of `@angular/common/http`. This includes implementations for `HttpClient` (`Nt`), `HttpRequest` (`he`), `HttpResponse` (`Wt`), `HttpHeaders` (`ae`), `HttpParams` (`ot`), `HttpHandler` (`U`), `HttpInterceptor` (`Jn`, `xr`), `HttpXhrBackend` (`_r`), and `HttpErrorResponse` (`Kt`)."
        },
        {
          "name": "RxJS",
          "motivation": "The code utilizes RxJS patterns and potentially minified operators/classes. Evidence includes:\n*   `t.bkB` which appears to be `EventEmitter` (often used similarly to Subjects).\n*   Usage of `.pipe()` method (e.g., `(0,T.H)(...)`, `pipe((0,T.H)(...)` in module `21626`).\n*   Presence of operator-like functions such as `(0,x.p)` (filter?), `(0,A.T)` (map?), `(0,O.j)` (finalize?), `(0,Y.n)` (switchMap?).\n*   `v.c` in module `21626` resembling `Observable` creation.\n*   `t.O8t` possibly being `subscribe` or `unsubscribe`.\n*   Usage in Angular's async pipe (`At`).\nAngular heavily relies on RxJS, making its presence highly likely."
        },
        {
          "name": "Tippy.js / Popper.js",
          "motivation": "The initial part of the code defines a function `ps` that sets up event listeners (`touchstart`, `touchend`, `mouseenter`, `mouseleave`, `focus`, `blur`) for triggering behavior, manages state like `isVisible`, and uses a `popperInstance` (`Et.popperInstance`). The function `Io` explicitly calls `_t` (likely a minified `createPopper` from Popper.js) with typical Popper options like `placement`, `modifiers`, `onFirstUpdate`. This structure strongly suggests the presence of Tippy.js, which uses Popper.js for positioning tooltips or popovers."
        },
        {
          "name": "@web3modal/common (or similar W3M SDK component)",
          "motivation": "Module `75134` defines controllers (`AccountController`, `ApiController`, `ConnectionController`, `ConnectorController`, `NetworkController`, `OptionsController`, `RouterController`, `SnackController`, `ThemeController`) and makes specific API calls to WalletConnect/Web3Modal backend services (e.g., `rpc.walletconnect.org`, `api.web3modal.com`, `pulse.walletconnect.org`). It references `projectId`, `sdkType: \"w3m\"`, and handles wallet/network state management, indicating a core component of the Web3Modal SDK."
        }
      ]
    },
    {
      "file": "polyfills.aa0d9bd37968f15b.js",
      "occurences": [
        {
          "name": "Zone.js",
          "motivation": "The code explicitly uses `Zone`, `ZoneAwarePromise`, `Zone.__symbol__`, patches browser APIs (`setTimeout`, `Promise`, `XMLHttpRequest`, `fetch`, event listeners) using Zone.js patterns (`scheduleMacroTask`, `scheduleMicroTask`, `runTask`), and includes checks like `e.Zone`. The purpose of the file seems to be polyfilling/patching APIs for change detection, which is the core function of Zone.js, often used with Angular."
        },
        {
          "name": "Webpack",
          "motivation": "The code starts with the characteristic Webpack chunk loading wrapper `(self.webpackChunkcryptopunks_eth=self.webpackChunkcryptopunks_eth||[]).push([[461],{...}])`, indicating it's part of a Webpack build process."
        },
        {
          "name": "Angular Localize",
          "motivation": "The code defines and uses a `Fe` function assigned to `globalThis.$localize` and uses a specific syntax with colons (`:`) within template literals (`Pe` function), which matches the behavior and setup of `@angular/localize` for internationalization."
        }
      ]
    },
    {
      "file": "runtime.af7253acc724d775.js",
      "occurences": [
        {
          "name": "Angular",
          "motivation": "The code includes `trustedTypes.createPolicy(\"angular#bundler\", ...)` which is a characteristic signature used by the Angular framework's build process to handle trusted types for script URLs generated by the bundler (likely Webpack in this case)."
        },
        {
          "name": "Webpack",
          "motivation": "The code structure is characteristic of a Webpack runtime bootstrap. It includes functions like `r` (internal require), `r.m` (modules), `r.o` (hasOwnProperty), `r.e` (ensure chunk), `r.u` (chunk URL), `r.l` (load script), `r.p` (public path), and logic for managing and loading chunks (`webpackChunkcryptopunks_eth`)."
        }
      ]
    }
  ],
  "urls": [],
  "ethereum": [
    {
      "file": "726.1f838bd3690e05c9.js",
      "occurences": [
        {
          "count": 1
        }
      ]
    },
    {
      "file": "main.4fe578886b7cd609.js",
      "occurences": [
        {
          "count": 2
        }
      ]
    }
  ],
  "fallbacks": []
}