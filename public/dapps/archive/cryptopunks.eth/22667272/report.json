{
  "version": 2,
  "contentHash": "bafybeibgaqfaiy3hsyisqniur3x765xr2tuvewnohdfle6oq3hm2jbhpxu",
  "timestamp": 1749475681,
  "blockNumber": 22667272,
  "rootMimeType": "inode/directory",
  "totalSize": 5064168,
  "favicon": "icon.png",
  "title": "CryptoPunks.eth.limo - The NFT marketplace to buy and sell CryptoPunks on Ethereum",
  "distributionPurity": {
    "externalScripts": [
      {
        "file": "index.html",
        "occurences": [
          {
            "type": "script",
            "url": "https://plausible.io/js/script.js"
          },
          {
            "type": "link",
            "url": "https://fonts.googleapis.com"
          }
        ]
      }
    ],
    "externalMedia": []
  },
  "networkingPurity": [
    {
      "file": "223.d16e997fada6cedd.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://explorer-api.walletconnect.com/v3/wallets",
            "https://explorer-api.walletconnect.com/v3/wallets/images",
            "https://explorer-api.walletconnect.com/v3/featured",
            "https://explorer-api.walletconnect.com/v3/wallets/{id}/logo/lg"
          ],
          "library": "@web3modal/core",
          "type": "auxiliary",
          "motivation": "The code contains functions like `ExplorerCtrl.getWallets`, `ExplorerApiCtrl.fetchWalletListings`, `fetchWalletImages`, `fetchFeaturedWallets`, and `getWalletImageUrl`. These construct URLs using `ExplorerApiCtrl.explorerApiUrl` (which defaults to `https://explorer-api.walletconnect.com`) and specific API paths (`/v3/wallets`, `/v3/wallets/images`, `/v3/featured`, `/v3/wallets/{id}/logo/lg`) along with a `projectId` query parameter to fetch wallet metadata and images from the WalletConnect Explorer API via `fetch`."
        },
        {
          "method": "fetch",
          "urls": [],
          "library": "@web3modal/ethereum-provider",
          "type": "auxiliary",
          "motivation": "The code includes a call to `ClientCtrl.ethereum().getEnsAvatar(t)`. This function likely uses the underlying Ethereum provider's `getAvatar` method. ENS avatar resolution often involves fetching data based on the resolver's configuration, which can result in `fetch` calls to external HTTP or IPFS gateways specified in ENS records. The exact URL cannot be determined from the static code as it depends on the specific ENS name being resolved at runtime."
        },
        {
          "method": "WebSocket",
          "urls": [
            "wss://relay.walletconnect.com"
          ],
          "library": "@walletconnect/sign-client",
          "type": "auxiliary",
          "motivation": "The code references WalletConnect connection logic, such as `ClientCtrl.ethereum().connectWalletConnect(...)`. The WalletConnect v2 protocol, used by Web3Modal v2, establishes a session by opening a WebSocket connection to a WalletConnect relay server. The default URL for this relay is `wss://relay.walletconnect.com`, though this can be configured via `ConfigCtrl`."
        }
      ]
    },
    {
      "file": "413.3ce364813d44d5b6.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://explorer-api.walletconnect.com/w3m/v1/getDesktopListings",
            "https://explorer-api.walletconnect.com/w3m/v1/getMobileListings",
            "https://explorer-api.walletconnect.com/w3m/v1/getAllListings"
          ],
          "library": "WalletConnect Web3Modal",
          "type": "auxiliary",
          "motivation": "The code defines a base URL `O = \"https://explorer-api.walletconnect.com\"` and uses it within the `E` function to construct URLs for API calls using `fetch`. Specific functions (`h_getDesktopListings`, `h_getMobileListings`, `h_getAllListings`) call `E` with paths like `/w3m/v1/getDesktopListings`, `/w3m/v1/getMobileListings`, and `/w3m/v1/getAllListings`. Query parameters like `projectId`, `sdkType`, `sdkVersion`, `page`, `entries`, `chains`, `excludedIds`, `recommendedIds` are appended dynamically based on configuration and context. These calls fetch wallet metadata for the modal."
        }
      ]
    },
    {
      "file": "568.2243308e45f7d2ae.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [],
          "library": "web3Svc (application-specific service)",
          "type": "rpc",
          "motivation": "The call `this.web3Svc.getEnsFromAddress(...)` in `Un` class (eth-address component) initiates an Ethereum RPC request to resolve an ENS name. This is assumed to use `fetch` as an underlying mechanism if a direct RPC provider is configured by `web3Svc`. The specific RPC endpoint URL is determined by `web3Svc`'s external configuration (not present in this snippet) or via a wallet provider like `window.ethereum` (in which case the URL 'window.ethereum' is excluded as per instructions, leading to an empty `urls` array)."
        },
        {
          "method": "fetch",
          "urls": [],
          "library": "web3Svc (application-specific service)",
          "type": "rpc",
          "motivation": "The call `this.web3Svc.checkNetwork()` in `le` class (app-bid component) likely performs an RPC call such as `eth_chainId` to verify the connected network. This is assumed to use `fetch` as an underlying mechanism if a direct RPC provider is configured. The specific RPC endpoint URL is determined by `web3Svc`'s external configuration or a wallet provider, and is not present in this snippet or is `window.ethereum` (excluded URL)."
        },
        {
          "method": "fetch",
          "urls": [],
          "library": "web3Svc (application-specific service)",
          "type": "rpc",
          "motivation": "Calls like `this.web3Svc.getBid(...)`, `this.web3Svc.getPunkAttributes(...)`, and `this.web3Svc.getPunkImage(...)` in various components (`le`, `we`, `la`) perform Ethereum RPC `eth_call` requests to read data from smart contracts. These are assumed to use `fetch` as an underlying mechanism if a direct RPC provider is configured. Specific RPC endpoint URLs are externally configured or come from a wallet provider (`window.ethereum` URLs are excluded)."
        },
        {
          "method": "fetch",
          "urls": [],
          "library": "web3Svc (application-specific service)",
          "type": "rpc",
          "motivation": "The call `this.web3Svc.enterBidForPunk(...)` in `le` class (app-bid component) initiates an `eth_sendTransaction` RPC call to submit a bid. If `web3Svc` uses a direct RPC node that relays transactions or a wallet provider that uses `fetch` for this, `fetch` would be the underlying method. Specific RPC endpoint URLs are externally configured or come from a wallet provider (`window.ethereum` URLs are excluded)."
        },
        {
          "method": "fetch",
          "urls": [],
          "library": "web3Svc (application-specific service)",
          "type": "rpc",
          "motivation": "The call `this.web3Svc.waitForTransaction(...)` in `le` class (app-bid component) likely polls for a transaction receipt using RPC calls like `eth_getTransactionReceipt`. This polling is assumed to use `fetch` as an underlying mechanism if a direct RPC provider is configured. Specific RPC endpoint URLs are externally configured or come from a wallet provider (`window.ethereum` URLs are excluded)."
        },
        {
          "method": "fetch",
          "urls": [],
          "library": "viem/wagmi (inferred)",
          "type": "rpc",
          "motivation": "The `da` function in `va` class (AuctionComponent) sets up a `watchBlockNumber` process with `poll:!0`. This pattern, using `t.getClient` (where `t` is `this.web3Svc.config`) and `(0,pa.T)(l,ha.q,\"watchBlockNumber\")`, strongly suggests usage of `wagmi` and `viem` for polling `eth_blockNumber`. This polling would use `fetch` (or a similar HTTP request mechanism) if the `viem` client is configured with an HTTP RPC transport. The RPC URL is determined by the client's configuration, not present in this snippet, or could be `window.ethereum` (excluded URL)."
        }
      ]
    },
    {
      "file": "60.5989e3d06bd10ebe.js",
      "occurences": [
        {
          "method": "XMLHttpRequest",
          "urls": [
            "/assets/logo.svg"
          ],
          "library": "Angular HttpClient",
          "type": "self",
          "motivation": "A call `l.http.get(\"/assets/logo.svg\", {responseType:\"text\"})` is made using Angular's HttpClient (`l.http` instance of `sn.Qq`). This fetches a local asset from the same domain."
        },
        {
          "method": "XMLHttpRequest",
          "urls": [
            "[CONFIG.staticDownloadUrl]/[TOKEN_ID].svg"
          ],
          "library": "Angular HttpClient",
          "type": "auxiliary",
          "motivation": "A call `t.http.get(e, {responseType:\"text\"})` is made, where `e` is constructed as `F.c.staticDownloadUrl + [TOKEN_ID] + \".svg\"`. `F.c.staticDownloadUrl` is a configuration value (likely from an environment file) pointing to a base URL for token images. This is assumed to be an external or CDN URL for assets."
        },
        {
          "method": "XMLHttpRequest",
          "urls": [
            "/assets/cryptophunks-dark.svg"
          ],
          "library": "Angular HttpClient",
          "type": "self",
          "motivation": "A call `a.http.get(H, {responseType:\"text\"})` is made where `H` can be `\"/assets/cryptophunks-dark.svg\"`. This fetches a local asset if the collection is 'cryptophunks'."
        },
        {
          "method": "XMLHttpRequest",
          "urls": [
            "[CONFIG.dataSvcStaticUrl]/icons/logo.svg"
          ],
          "library": "Angular HttpClient",
          "type": "auxiliary",
          "motivation": "A call `a.http.get(H, {responseType:\"text\"})` is made where `H` can be `a.dataSvc.staticUrl+\"/icons/logo.svg\"`. `a.dataSvc.staticUrl` is a configuration value from the DataService. This is assumed to be an external or CDN URL for assets."
        },
        {
          "method": "XMLHttpRequest",
          "urls": [
            "[CONFIG.dataSvcStaticUrl]/[CONFIG.dataSvcTokenImagePath]/[TOKEN_ID].svg"
          ],
          "library": "Angular (LazyLoad Directive)",
          "type": "auxiliary",
          "motivation": "An image is loaded using Angular's `lazyLoad` directive: `n.Y8G(\"lazyLoad\",t.dataSvc.staticUrl+t.dataSvc.tokenImagePath+n.bMT(22,19,t.data.id)+\".svg\")`. This directive will trigger an HTTP GET request for the image URL. The URL components `dataSvc.staticUrl` and `dataSvc.tokenImagePath` are configurations. Assumed to be an external/CDN URL."
        },
        {
          "method": "fetch",
          "urls": [
            "Configured GraphQL Endpoint"
          ],
          "library": "Apollo Client",
          "type": "auxiliary",
          "motivation": "Calls to `this.apollo.query({query:_t,...})` execute GraphQL queries. Apollo Client uses `fetch` (or `XMLHttpRequest`) internally to send these queries to a configured GraphQL server endpoint. The specific URL is part of Apollo Client's setup and not directly in this call, but it's an external data source."
        },
        {
          "method": "fetch",
          "urls": [
            "MEV Blocker Builder Endpoint"
          ],
          "library": "Ethereum Interaction Library (e.g., Ethers.js/Web3.js)",
          "type": "rpc",
          "motivation": "The `acceptBidForPunk` flow explicitly mentions sending transactions to the \"MEV Blocker builder\" and includes UI/logic for adding the MEV Blocker RPC. This strongly suggests that `web3Svc.acceptBidForPunk` might use a specific MEV Blocker builder submission endpoint (e.g., `https://builder.mevblocker.io` or similar) via an underlying `fetch` call made by the Ethereum interaction library (like Ethers.js) for specialized transaction handling."
        }
      ]
    },
    {
      "file": "698.d6bd2b89a9b1d409.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "{url}"
          ],
          "library": "otherwise",
          "type": "auxiliary",
          "motivation": "The code defines a function `x` (aliased as `h`) which iterates through a list of URLs (`r`). Inside the loop, it calls `fetch(i.replace(\"{sender}\",e).replace(\"{data}\",a), {...})`. The variable `i` holds the current URL from the `r` array. The URL string contains placeholders `{sender}` and `{data}` which are replaced dynamically. The exact URL depends on the `urls` argument passed to the `ccipRequest` function (aliased as `x` or `h`). Since the URL structure is dynamic and meant for off-chain data retrieval based on contract calls (CCIP-Read/EIP-3668), it's classified as auxiliary. The method is determined by checking if the URL includes `{data}`: 'GET' if it does, 'POST' otherwise. Data is passed either in the URL ('GET') or as JSON in the request body ('POST')."
        }
      ]
    },
    {
      "file": "862.47356340150f888a.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://verify.walletconnect.com/attestation/",
            "https://verify.walletconnect.org/attestation/"
          ],
          "library": "@walletconnect/core",
          "type": "auxiliary",
          "motivation": "The code makes a call `fetch(`${f}/attestation/${c}`, ...)` inside the `fetchAttestation` function within the `X3` class (Verify API client). The base URL `f` is dynamically determined but defaults to `https://verify.walletconnect.com` or the failover `https://verify.walletconnect.org`. This call retrieves attestation data for domain verification."
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.com/v1/"
          ],
          "library": "@walletconnect/universal-provider",
          "type": "rpc",
          "motivation": "The code utilizes a generic HTTP RPC provider (`kd`/`Li`) instantiated within chain-specific providers (e.g., `NE` for eip155). The URL is constructed using the `mi` function, which defaults to `https://rpc.walletconnect.com/v1/?chainId=...&projectId=...` if no specific RPC URL is provided in the configuration (`rpcMap`). This is used to send standard JSON-RPC requests to Ethereum (and potentially other) chains."
        },
        {
          "method": "fetch",
          "urls": [
            "https://echo.walletconnect.com/"
          ],
          "library": "@walletconnect/core",
          "type": "auxiliary",
          "motivation": "The code makes a POST request in the `registerDeviceToken` function within the `Z3` class (Echo client). The URL is constructed as `https://echo.walletconnect.com/${o.projectId}/clients`. This is used to register a device token for push notifications via the WalletConnect Echo service."
        },
        {
          "method": "WebSocket",
          "urls": [
            "wss://relay.walletconnect.com",
            "wss://relay.walletconnect.org"
          ],
          "library": "@walletconnect/core",
          "type": "auxiliary",
          "motivation": "The code establishes a WebSocket connection (`new A1(e, [], c)`) inside the `S1` class. The URL `e` is constructed dynamically by the Relayer (`q3`) using the `Oy` function. This function takes the `relayUrl` (defaulting to `wss://relay.walletconnect.com` with a failover of `wss://relay.walletconnect.org`) and appends query parameters including authentication (`auth`) and the project ID. This connection is essential for the WalletConnect relay protocol."
        }
      ]
    },
    {
      "file": "866.ed9c107a30a38538.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [],
          "library": "web3Svc (custom service)",
          "type": "rpc",
          "motivation": "The component calls `this.web3Svc.getENSMetadata(this.address)`. This method is designed to retrieve Ethereum Name Service (ENS) data, which necessitates communication with an Ethereum RPC endpoint. `fetch` (or `XMLHttpRequest`) is the standard underlying mechanism for such HTTP-based RPC calls. No specific URL is present in this code snippet; it would be configured within the `web3Svc`."
        },
        {
          "method": "fetch",
          "urls": [],
          "library": "dataSvc (custom service)",
          "type": "auxiliary",
          "motivation": "The component calls `this.dataSvc.getEthFollowStatsFor(this.address)` to obtain 'Ethereum Follow Protocol' statistics. This indicates a network request to a custom backend API, typically made using `fetch` (or `XMLHttpRequest`, possibly via Angular's `HttpClient`). The specific API URL is not discernible from this snippet and would be part of the `dataSvc` configuration."
        }
      ]
    },
    {
      "file": "main.3423dfa67ed0cba9.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://punkcdn.com/data/_attributes.json"
          ],
          "library": "Angular HttpClient",
          "type": "auxiliary",
          "motivation": "Angular's `HttpClient.get` (which wraps `fetch` or `XMLHttpRequest`) is used to retrieve attribute data for the Punks collection from a CDN."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.reservoir.tools/users/"
          ],
          "library": "Angular HttpClient",
          "type": "auxiliary",
          "motivation": "Angular's `HttpClient.get` is used to fetch token data for a specific user from the Reservoir API. The full URL includes a dynamic user address path parameter (e.g., `https://api.reservoir.tools/users/{address}/tokens/v7`)."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.reservoir.tools/orders/asks/v5"
          ],
          "library": "Angular HttpClient",
          "type": "auxiliary",
          "motivation": "Angular's `HttpClient.get` is used to fetch ask orders from the Reservoir API."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.reservoir.tools/orders/bids/v5"
          ],
          "library": "Angular HttpClient",
          "type": "auxiliary",
          "motivation": "Angular's `HttpClient.get` is used to fetch bid orders from the Reservoir API."
        },
        {
          "method": "fetch",
          "urls": [
            "https://punkcdn.com/data/_states.json"
          ],
          "library": "Angular HttpClient",
          "type": "auxiliary",
          "motivation": "Angular's `HttpClient.get` is used to fetch state data. The URL is constructed dynamically, `p.c.staticUrl` is likely `https://punkcdn.com/data`."
        },
        {
          "method": "fetch",
          "urls": [
            "/assets/_punksv1_states.json"
          ],
          "library": "Angular HttpClient",
          "type": "self",
          "motivation": "Angular's `HttpClient.get` is used to fetch state data for 'cryptopunks-v1' collection from a relative path."
        },
        {
          "method": "fetch",
          "urls": [
            "/assets/_phunks_states.json"
          ],
          "library": "Angular HttpClient",
          "type": "self",
          "motivation": "Angular's `HttpClient.get` is used to fetch state data for other collections (e.g., Phunks) from a relative path."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.ethfollow.xyz/api/v1/users/"
          ],
          "library": "Angular HttpClient",
          "type": "auxiliary",
          "motivation": "Angular's `HttpClient.get` is used to fetch user statistics from the EthFollow API. The full URL includes a dynamic user address path parameter."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.reservoir.tools/tokens/v6"
          ],
          "library": "Angular HttpClient",
          "type": "auxiliary",
          "motivation": "Angular's `HttpClient.get` is used to fetch token details from the Reservoir API."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.geckoterminal.com/api/v2/networks/eth/tokens/0xcb56b52316041a62b6b5d0583dce4a8ae7a3c629"
          ],
          "library": "Angular HttpClient",
          "type": "auxiliary",
          "motivation": "Angular's `HttpClient.get` is used to fetch CIG token price data from the GeckoTerminal API."
        },
        {
          "method": "fetch",
          "urls": [
            "https://punkcdn.com/data/coin-price"
          ],
          "library": "Angular HttpClient",
          "type": "auxiliary",
          "motivation": "Angular's `HttpClient.get` is used to fetch Ethereum price data from punkcdn."
        },
        {
          "method": "fetch",
          "urls": [
            "https://pro-api.coingecko.com/api/v3/simple/price"
          ],
          "library": "Angular HttpClient",
          "type": "auxiliary",
          "motivation": "Angular's `HttpClient.get` is used to fetch NFTX vault token prices from the CoinGecko API. An API key is used but excluded from this report."
        },
        {
          "method": "fetch",
          "urls": [
            "https://punks.limo/"
          ],
          "library": "Angular HttpClient",
          "type": "auxiliary",
          "motivation": "Angular's `HttpClient.get` is used to fetch data, likely for generating social media cards, from `punks.limo`. The full URL includes dynamic path parameters."
        },
        {
          "method": "fetch",
          "urls": [
            "https://punks.limo/floorpunks"
          ],
          "library": "Angular HttpClient",
          "type": "auxiliary",
          "motivation": "Angular's `HttpClient.get` is used to fetch floor punks data from `punks.limo`."
        },
        {
          "method": "fetch",
          "urls": [
            "https://cloudflare-eth.com",
            "https://eth-mainnet.g.alchemy.com/v2/"
          ],
          "library": "wagmi",
          "type": "rpc",
          "motivation": "Wagmi's HTTP transport (`Lt` function) makes POST requests to Ethereum RPC endpoints. The URLs are derived from chain configurations (`q?.rpcUrls.default.http[0]`) or directly passed. `https://cloudflare-eth.com` is a default in wagmi's `mainnet` chain config. `https://eth-mainnet.g.alchemy.com/v2/...` (API key part omitted) is also configured as an RPC provider."
        },
        {
          "method": "fetch",
          "urls": [
            "https://secure.walletconnect.com/sdk"
          ],
          "library": "Web3Modal",
          "type": "auxiliary",
          "motivation": "Web3Modal's email connector (`Pm` class) loads an iframe with its `src` set to `vi.SECURE_SITE_SDK`, which is `https://secure.walletconnect.com/sdk`. This is to load the WalletConnect Email SDK."
        },
        {
          "method": "fetch",
          "urls": [
            "https://gateway.thegraph.com/api/697844908bda79b5c5c11bdfde65ef5e/subgraphs/id/CWCx5K9VPUCgvUCNnY2jX73VTuKy47kRdZ3VVbPKdSvj"
          ],
          "library": "Apollo Client",
          "type": "auxiliary",
          "motivation": "Apollo Client is used to query TheGraph subgraph for CryptoPunks market data. The URL is specified in `Ms.c.graphURI`."
        },
        {
          "method": "fetch",
          "urls": [
            "https://gateway-arbitrum.network.thegraph.com/api/697844908bda79b5c5c11bdfde65ef5e/subgraphs/id/Epp6gJotEJKAsJYdk7bDEURtGWWeZVXwZds2Pgw8eG51"
          ],
          "library": "Apollo Client",
          "type": "auxiliary",
          "motivation": "Apollo Client (via `this.apollo.use(\"nftx\")`) queries TheGraph subgraph for NFTX data. The URL is specified in `Ms.c.nftxGraphURI`."
        },
        {
          "method": "fetch",
          "urls": [
            "https://gondiproxy.chickenkiller.com/lending/graphql"
          ],
          "library": "Apollo Client",
          "type": "auxiliary",
          "motivation": "Apollo Client (via `this.apollo.use(\"gondi\")`) queries the Gondi protocol's GraphQL endpoint. The URL is specified in `Ms.c.gondiUrl`."
        },
        {
          "method": "fetch",
          "urls": [
            "https://gateway-arbitrum.network.thegraph.com/api/697844908bda79b5c5c11bdfde65ef5e/subgraphs/id/FQJe5L2quB6CGaGv3yyTGUV5ATnEgHcau3Q2nFm7UWAe"
          ],
          "library": "Apollo Client",
          "type": "auxiliary",
          "motivation": "Apollo Client (via `this.apollo.use(\"cig\")`) queries TheGraph subgraph for CIG token data. The URL is specified in `Ms.c.cigGraphURI`."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.web3modal.com/getWallets",
            "https://api.web3modal.org/getWallets"
          ],
          "library": "otherwise",
          "type": "auxiliary",
          "motivation": "This call is made using a custom HTTP client class `O` (defined in module `72732`) which internally uses `fetch`. The base URL is determined by `T.getApiUrl()` which returns `https://api.web3modal.com` or `https://api.web3modal.org` based on `T.isRestrictedRegion()`. The path `/getWallets` is appended to this base URL. Query parameters for pagination, inclusion/exclusion are passed via an options object."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.web3modal.com/getWalletImage/{imageId}",
            "https://api.web3modal.org/getWalletImage/{imageId}"
          ],
          "library": "otherwise",
          "type": "auxiliary",
          "motivation": "This call is made using a custom HTTP client class `O` (defined in module `72732`) which internally uses `fetch` (specifically `xn.getBlob` which calls `this.getBlob` in class `O`). The base URL is determined by `T.getApiUrl()` and the path is dynamically constructed as `/getWalletImage/{imageId}` where `{imageId}` is a variable. This endpoint fetches wallet images."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.web3modal.com/public/getAssetImage/{assetId}",
            "https://api.web3modal.org/public/getAssetImage/{assetId}"
          ],
          "library": "otherwise",
          "type": "auxiliary",
          "motivation": "This call is made using a custom HTTP client class `O` (defined in module `72732`) which internally uses `fetch` (specifically `xn.getBlob`). The base URL is determined by `T.getApiUrl()` and the path is dynamically constructed as `/public/getAssetImage/{assetId}` where `{assetId}` is a variable. This endpoint fetches general asset images (like network or connector images)."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.web3modal.com/public/getCurrencyImage/{currencyId}",
            "https://api.web3modal.org/public/getCurrencyImage/{currencyId}"
          ],
          "library": "otherwise",
          "type": "auxiliary",
          "motivation": "This call is made using a custom HTTP client class `O` (defined in module `72732`) which internally uses `fetch` (specifically `xn.getBlob`). The base URL is determined by `T.getApiUrl()` and the path is dynamically constructed as `/public/getCurrencyImage/{currencyId}` where `{currencyId}` is a variable. This endpoint fetches currency images."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.web3modal.com/public/getTokenImage/{tokenId}",
            "https://api.web3modal.org/public/getTokenImage/{tokenId}"
          ],
          "library": "otherwise",
          "type": "auxiliary",
          "motivation": "This call is made using a custom HTTP client class `O` (defined in module `72732`) which internally uses `fetch` (specifically `xn.getBlob`). The base URL is determined by `T.getApiUrl()` and the path is dynamically constructed as `/public/getTokenImage/{tokenId}` where `{tokenId}` is a variable. This endpoint fetches token images."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.web3modal.com/getAnalyticsConfig",
            "https://api.web3modal.org/getAnalyticsConfig"
          ],
          "library": "otherwise",
          "type": "auxiliary",
          "motivation": "This call is made using a custom HTTP client class `O` (defined in module `72732`) which internally uses `fetch`. The base URL is determined by `T.getApiUrl()` and the path `/getAnalyticsConfig` is appended. This endpoint fetches analytics configuration."
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.com/v1/identity/{address}",
            "https://rpc.walletconnect.org/v1/identity/{address}"
          ],
          "library": "otherwise",
          "type": "auxiliary",
          "motivation": "This call is made using a custom HTTP client class `O` (defined in module `72732`) which internally uses `fetch`. The base URL is determined by `T.getBlockchainApiUrl()` which returns `https://rpc.walletconnect.com` or `https://rpc.walletconnect.org`. The path is `/v1/identity/{address}` where `{address}` is a variable. Query parameters include `chainId` and `projectId`. This endpoint is for an identity service, not a standard Ethereum JSON-RPC method."
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.com/v1/account/{accountAddress}/history",
            "https://rpc.walletconnect.org/v1/account/{accountAddress}/history"
          ],
          "library": "otherwise",
          "type": "auxiliary",
          "motivation": "This call is made using a custom HTTP client class `O` (defined in module `72732`) which internally uses `fetch`. The base URL is determined by `T.getBlockchainApiUrl()`. The path is `/v1/account/{accountAddress}/history` where `{accountAddress}` is a variable. Query parameters include `projectId`, `cursor`, and `onramp`. This retrieves account transaction history."
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.com/v1/account/{accountAddress}/balance",
            "https://rpc.walletconnect.org/v1/account/{accountAddress}/balance"
          ],
          "library": "otherwise",
          "type": "auxiliary",
          "motivation": "This call is made using a custom HTTP client class `O` (defined in module `72732`) which internally uses `fetch`. The base URL is determined by `T.getBlockchainApiUrl()`. The path is `/v1/account/{accountAddress}/balance` where `{accountAddress}` is a variable. Query parameters include `currency` and `projectId`. This retrieves account balance information."
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.com/v1/generators/onrampurl",
            "https://rpc.walletconnect.org/v1/generators/onrampurl"
          ],
          "library": "otherwise",
          "type": "auxiliary",
          "motivation": "This is a POST call made using a custom HTTP client class `O` (defined in module `72732`) which internally uses `fetch`. The base URL is determined by `T.getBlockchainApiUrl()`. The path is `/v1/generators/onrampurl`. The body includes `destinationWallets`, `defaultNetwork`, `partnerUserId`, etc. This is for generating an onramp URL."
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.com/v1/onramp/options",
            "https://rpc.walletconnect.org/v1/onramp/options"
          ],
          "library": "otherwise",
          "type": "auxiliary",
          "motivation": "This call is made using a custom HTTP client class `O` (defined in module `72732`) which internally uses `fetch`. The base URL is determined by `T.getBlockchainApiUrl()`. The path is `/v1/onramp/options`. Query parameters include `projectId`. This fetches onramp options."
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.com/v1/onramp/quote",
            "https://rpc.walletconnect.org/v1/onramp/quote"
          ],
          "library": "otherwise",
          "type": "auxiliary",
          "motivation": "This is a POST call made using a custom HTTP client class `O` (defined in module `72732`) which internally uses `fetch`. The base URL is determined by `T.getBlockchainApiUrl()`. The path is `/v1/onramp/quote`. The body includes `purchaseCurrency`, `paymentCurrency`, `amount`, `network`. This fetches an onramp quote."
        },
        {
          "method": "fetch",
          "urls": [
            "https://pulse.walletconnect.com/e",
            "https://pulse.walletconnect.org/e"
          ],
          "library": "otherwise",
          "type": "auxiliary",
          "motivation": "This is a POST call made using a custom HTTP client class `O` (defined in module `72732`) which internally uses `fetch`. The base URL is determined by `T.getAnalyticsUrl()` which returns `https://pulse.walletconnect.com` or `https://pulse.walletconnect.org`. The path is `/e`. The body includes analytics event data. This is for sending analytics events."
        }
      ]
    },
    {
      "file": "polyfills.aa0d9bd37968f15b.js",
      "occurences": [
        {
          "method": "XMLHttpRequest",
          "urls": [],
          "library": "Zone.js",
          "type": "auxiliary",
          "motivation": "The code patches `XMLHttpRequest.prototype.open` and `XMLHttpRequest.prototype.send` using `Zone.js`'s `ue` utility function. The `open` patch captures the URL (`x[1]`) and stores it. The `send` patch uses `Zone.current.scheduleMacroTask` (`Xe`) to wrap the XHR lifecycle. No specific URLs are hardcoded in this polyfill; they are passed dynamically by the application code when it calls `open`."
        },
        {
          "method": "fetch",
          "urls": [],
          "library": "Zone.js",
          "type": "auxiliary",
          "motivation": "The code contains `ue(e,\"fetch\",d=>function ee(d){...})`, which patches the global `fetch` function using Zone.js utilities to likely wrap the Promise returned by `fetch` in a ZoneAwarePromise. No specific URLs are hardcoded in this polyfill; they are passed dynamically by the application code when it calls `fetch`."
        }
      ]
    }
  ],
  "libraryUsage": [
    {
      "file": "115.0e9d14ef203371b7.js",
      "occurences": [
        {
          "name": "@web3modal/core",
          "motivation": "Presence of multiple controllers like `AccountController`, `NetworkController`, `ConnectionController`, `OptionsController`, `SIWEController`, `RouterController`, `SnackController`, `En` (event controller), and state management utilities (`(0,S.BX)`, `(0,S.B1)`) suggests the use of Web3Modal's core logic library."
        },
        {
          "name": "lit",
          "motivation": "The code defines custom elements (`(0,p.customElement)('w3m-connecting-siwe')`), uses base classes (`extends h.WF`), template literals (`h.qy`), tagged template literals for styles (`h.AH`), and decorators (`(0,W.wk)()`), all characteristic features of the Lit library for building web components."
        },
        {
          "name": "@web3modal/common or @walletconnect/utils",
          "motivation": "The use of `E.LX.caipNetworkIdToNumber` indicates a utility function for handling CAIP (Chain Agnostic Improvement Proposals) standards, likely originating from a common utility package within the Web3Modal or WalletConnect ecosystem."
        }
      ]
    },
    {
      "file": "223.d16e997fada6cedd.js",
      "occurences": [
        {
          "name": "Lit",
          "motivation": "`LitElement` and `lit-html` are used extensively. Evidence includes:\n* Class definitions extending `LitElement` (e.g., `class K extends b{`, where `b` is identified as `LitElement`'s base class `ce`).\n* Usage of `html` (aliased as `p`) and `css` (aliased as `E`) tagged template literals.\n* Use of Lit directives like `classMap` (imported as `z`).\n* Decorator patterns used for property definitions (e.g., `ge([w({type:Boolean})],K.prototype,\"disabled\",2)` where `w` is a property decorator factory).\n* Standard Lit lifecycle methods like `render()`, `firstUpdated()`, `connectedCallback()`, `disconnectedCallback()`.\n* Explicit tracking of Lit versions (`litElementVersions`, `litHtmlVersions`)."
        },
        {
          "name": "Motion One",
          "motivation": "The code utilizes animation functionalities characteristic of Motion One:\n* Imports and usage of animation functions like `animate` (e.g., `ie(this.routerEl,{opacity:[1,0]...`) which corresponds to the imported `ie` function wrapping `Zo` and `zo`, ultimately using `Cr` (a custom animation class similar to Motion One's internal implementation) or potentially the native `animate`.\n* Presence of easing functions (`Ie`, `Ar`) and timing constants (`U={duration:.3...}`).\n* Checks for Web Animations API (WAAPI) support (`ue.waapi`, `Pr.waapi`).\n* Handling of CSS variables for transforms (`wt=i=>`--motion-${i}`, `Ve_set`, `Ve_get`)."
        },
        {
          "name": "@web3modal/* (Core, UI, Utils, etc.)",
          "motivation": "The code implements a Web3 connection modal, heavily utilizing components and logic likely from the Web3Modal v2 library suite (@web3modal/core, @web3modal/ui, @web3modal/common, potentially including parts previously in @walletconnect/modal-*):\n* Extensive use of custom elements prefixed with `wcm-` (e.g., `<wcm-modal>`, `<wcm-qrcode>`, `<wcm-connect-wallet-view>`, `<wcm-wallet-button>`).\n* References to controllers like `ThemeCtrl` (d.lH), `ModalCtrl` (d.D8), `RouterCtrl` (d.jL), `ExplorerCtrl` (d.pV), `ClientCtrl` (d.IN), `ConfigCtrl` (d.mb), `ToastCtrl` (d.dC), `OptionsCtrl` (d.vZ), `CoreHelperUtil` (d.Ao). These controllers manage state and logic for the modal.\n* Logic for fetching wallet data from the WalletConnect Explorer API (`ExplorerCtrl.getWallets`, `ExplorerApiCtrl.fetchWalletListings`, `ExplorerApiCtrl.getWalletImageUrl`).\n* Handling of WalletConnect URIs (`walletConnectUri`).\n* Specific UI components for different connection flows and states (e.g., `wcm-desktop-connecting-view`, `wcm-qrcode-view`, `wcm-wallet-explorer-view`).\n* Usage of WalletConnect-specific icons and branding (`O.WALLET_CONNECT_LOGO`, etc.).\n* References to `explorer.walletconnect.com` for fetching wallet data."
        }
      ]
    },
    {
      "file": "323.8ed513cecc55d395.js",
      "occurences": [
        {
          "name": "tinycolor",
          "motivation": "The code implements a color parsing and manipulation library. Function names like `toHsv`, `toHsl`, `toHex`, `toRgb`, `lighten`, `darken`, `desaturate`, `saturate`, `spin`, `mix`, `readability`, `mostReadable`, and the structure involving `s.prototype` and methods like `_applyModification` closely resemble the API and internal structure of the `tinycolor2` library (or a derivative/fork). The presence of specific strings like `progid:DXImageTransform.Microsoft.gradient` and the extensive color name map (`s.names`) further support this identification."
        }
      ]
    },
    {
      "file": "413.3ce364813d44d5b6.js",
      "occurences": [
        {
          "name": "WalletConnect Web3Modal",
          "motivation": "The code explicitly uses constants like `WALLETCONNECT_DEEPLINK_CHOICE`, `WCM_VERSION`, mentions `WalletConnectModal`, interacts with URLs under `https://explorer-api.walletconnect.com`, and dynamically loads a web component named `wcm-modal`. Functions like `setWalletConnectDeepLink`, `setWalletConnectAndroidDeepLink`, `removeWalletConnectDeepLink`, and state management related to wallet connection (`ConnectWallet` view, `walletConnectUri`) are characteristic of Web3Modal v2."
        },
        {
          "name": "Proxy State Management Library (Likely Valtio/similar)",
          "motivation": "The code uses patterns like `(0,o.BX)({...})` to create reactive state objects (e.g., `i`, `a`, `m`, `L`, `g`, `I`, `y`, `b`) and `(0,o.B1)(...)` to subscribe to changes. This pattern is common with proxy-based state management libraries like Valtio, which Web3Modal is known to use internally."
        }
      ]
    },
    {
      "file": "568.2243308e45f7d2ae.js",
      "occurences": [
        {
          "name": "Angular",
          "motivation": "The code extensively uses Angular's distinctive features: component lifecycle hooks (`ngOnInit`, `ngOnDestroy`, `ngOnChanges`), decorators (`@Component` implied by `ɵcmp`, `@Directive` implied by `ɵdir`), dependency injection patterns (e.g., `o.rXU(xt.b)`), and compiled template artifacts/functions (e.g., `o.VBU`, `o.FsC`, `o.EFF`, `o.Y8G`, `o.DNE`, `o.bMT`, `o.nI1`). The use of `selectors`, `inputs`, `standalone:!0`, `features:[o.aNF]` are all specific to Angular's component and directive definitions."
        },
        {
          "name": "RxJS",
          "motivation": "The code uses `this.store.select(...)`, which in NgRx (a common Angular state management library) returns an RxJS `Observable`. The `async` pipe (`o.nI1(1,\"async\")` in compiled templates) is used to subscribe to Observables in templates. Variables like `activeAuction$` (ending with `$`) are a common convention for Observables."
        },
        {
          "name": "NgRx Store",
          "motivation": "The code shows injection and usage of a `store` service (`this.store=e` where `e` is `o.rXU(z0.il)`). Methods like `this.store.select(S0.yk)` (selecting state) and `this.store.dispatch((0,fa.Td)({currentBlock:Number(s)}))` (dispatching actions) are characteristic of NgRx Store, an Angular state management library inspired by Redux."
        },
        {
          "name": "Tippy.js",
          "motivation": "The code contains a directive `re` with `selectors:[[\"\",\"tippy\",\"\"]]`. Inside its `ngOnInit`, it calls `(0,ee.Ay)(e,{content:e.dataset.tippyContent,...})` which is the initialization function for Tippy.js (likely `tippy()` itself, minified as `ee.Ay`). It also references `_tippy` property on elements and uses `data-tippy-content` attributes."
        },
        {
          "name": "D3.js",
          "motivation": "The `la` class (directive `punk-image`) uses D3.js for rendering an SVG chart. It calls D3 methods like `Mt.select(...).append('svg')` (minified as `function ea...append(\"svg\")` where `Q` is `Selection`), `r0()` (likely `d3.scaleBand()`), `Rt()` (likely D3 axis functions like `d3.axisBottom()` or `d3.axisLeft()`). The code structure for building axes (`e.svg.append(\"g\").call(...)`), creating scales (`e.xScale=r0().range([0,e.punkWidth]).domain(i).padding(0)`), and data joining/transitions (`e.svg.selectAll(\"rect\").data(r.dataArr).join(\"rect\").transition().style(...)`) are all idiomatic D3.js. Many internal D3 function names and structures are visible in the minified code block related to selections, scales, axes, colors, transitions, and timers."
        }
      ]
    },
    {
      "file": "60.5989e3d06bd10ebe.js",
      "occurences": [
        {
          "name": "Angular",
          "motivation": "The code exhibits numerous characteristics of an Angular application, including the use of decorators (implicitly, via minified code like `n.VBU` for Component, `n.KVO` for Inject), dependency injection (`n.rXU`), component lifecycle hooks, template syntax (e.g., `*ngIf`, `*ngFor`, `[propertyBinding]`, `(eventBinding)` represented by minified calls), pipes (`async`, `tokenIdParse`, `date`), services, and RxJS integration. Standalone components (`standalone:!0`) are also indicated. Specific Angular modules like `HttpClient` (injected as `sn.Qq`) and Forms (`C.MJ` for `FormControl`) are evident."
        },
        {
          "name": "Apollo Client",
          "motivation": "The code contains calls to `this.apollo.query({...})` (where `this.apollo` is an instance of `Pn.Ic`), which is the standard way to execute GraphQL queries using Apollo Client. A GraphQL query string (`_t`) is defined and used in these calls, indicating interaction with a GraphQL server."
        },
        {
          "name": "RxJS",
          "motivation": "Reactive Extensions for JavaScript (RxJS) is extensively used throughout the codebase. This is evident from the frequent use of the `.pipe()` method on observables, various RxJS operators (minified, e.g., `(0,W.M)` for `tap`, `(0,nn.T)` for `map`, `(0,q.n)` for `switchMap`, `(0,on.Q)` for `takeUntil`), and `Subject`/`BehaviorSubject` instances (`dn.B`, `rn.t`) for managing asynchronous data streams and state."
        },
        {
          "name": "Ethereum Interaction Library (e.g., Ethers.js/Web3.js)",
          "motivation": "The `Web3Service` (injected as `at.b`) encapsulates Ethereum blockchain interactions. Methods like `ethToWei`, `verifyAddressOrEns`, `waitForTransaction`, and specific contract call wrappers (e.g., `offerPunkForSale`, `buyPunk`, `acceptBidForPunk`) are characteristic of libraries like Ethers.js or Web3.js. These libraries typically use `fetch` or `XMLHttpRequest` for RPC communication."
        }
      ]
    },
    {
      "file": "862.47356340150f888a.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code begins with `(self.webpackChunkcryptopunks_eth=self.webpackChunkcryptopunks_eth||[]).push(...)`, which is the standard boilerplate for code bundled by Webpack."
        },
        {
          "name": "@walletconnect/universal-provider",
          "motivation": "The main export `EthereumProvider` (`r2`) and its initialization pattern (`xa.init(...)`) are characteristic of `@walletconnect/universal-provider`. It orchestrates various WalletConnect components."
        },
        {
          "name": "@walletconnect/sign-client",
          "motivation": "The code includes classes like `SignClient` (`Vc`) and `Engine` (`pE`), responsible for handling WalletConnect v2 session logic (proposals, settlements, requests, events, etc.), which are core components of `@walletconnect/sign-client`."
        },
        {
          "name": "@walletconnect/core",
          "motivation": "Core functionalities like `Core` (`Bc`), `Relayer` (`q3`), `Crypto` (`T3`), `Expirer` (`Q3`), `History` (`Y3`), `KeyChain` (`P3`), `Verify` (`X3`), and `Echo` (`Z3`) are present, indicating the use of `@walletconnect/core`."
        },
        {
          "name": "@walletconnect/utils",
          "motivation": "Utility functions for environment detection (`ns`, `ts`, `rs`), JSON-RPC payload checking (`Tc`, `ga`), constants, and error handling (`Me`, `Jt`) are used, aligning with the utilities provided by `@walletconnect/utils`."
        },
        {
          "name": "@walletconnect/time",
          "motivation": "Time constants like `FIVE_MINUTES`, `THIRTY_SECONDS`, `ONE_DAY`, `SEVEN_DAYS` (`Xe`) are used throughout the code, matching those exported by `@walletconnect/time`."
        },
        {
          "name": "@walletconnect/environment",
          "motivation": "The code imports and uses environment detection functions (`ns`, `ts`, `rs` imported from `P(23601)`) to determine if the runtime is Node.js, Browser, or React Native, which is the purpose of `@walletconnect/environment`."
        },
        {
          "name": "@walletconnect/modal",
          "motivation": "The code conditionally imports and instantiates `WalletConnectModal` (`P.e(413).then(P.bind(P, 52413))`) based on the `showQrModal` option, indicating optional use of the `@walletconnect/modal` package."
        },
        {
          "name": "Noble Crypto Libraries (or similar)",
          "motivation": "The code includes implementations or imports (`P(...)`) for various cryptographic primitives like `Ed25519` (`uh`, `P(40597)`), `X25519` (`Ze`, `P(96863)`), `SHA256` (`je`, `P(21001)`), `SHA512` (`be`, `P(88411)`), `ChaCha20Poly1305` (`te`, `P(25945)`), `HMAC` (`P(48921)`), `HKDF` (`g`, `P(80877)`), `Poly1305` (`P(95905)`). These are often provided by libraries like `@noble/curves`, `@noble/hashes`, `@noble/ciphers`, or similar high-quality crypto libraries."
        },
        {
          "name": "Multiformats",
          "motivation": "The code contains extensive sections (`P(62862)`) dedicated to multibase encoding/decoding (e.g., `base16`, `base58btc`, `base64url`), multihash implementations (`sha256`, `sha512`), and CID concepts, suggesting the use of the `multiformats` library or its constituent parts (`multibase`, `multihash`, `cids`)."
        },
        {
          "name": "Lodash",
          "motivation": "The code includes a bundled version of Lodash (`P(35667)`), indicated by the presence of its internal functions and structures (`__lodash_hash_undefined__`, `xs`, `vn`, `St`, etc.) and the export pattern `Pr._ = bs`."
        },
        {
          "name": "query-string",
          "motivation": "The code imports (`P(98570)`) and uses functions like `parse` (`Ie`) and `stringify` (`m.stringify`) for handling URL query parameters, which is characteristic of the `query-string` library."
        },
        {
          "name": "pino",
          "motivation": "The code imports (`P(91105)`) and uses a logger setup consistent with `pino`, specifically its browser version (`pino/browser`). The setup involves configuration for serialization and transmission in a browser context."
        },
        {
          "name": "idb-keyval",
          "motivation": "The code defines a storage class (`av`) that wraps an IndexedDB implementation (`iv`) using patterns (`dbName`, `storeName`, `keyval-store`) typical of the `idb-keyval` library for simple key-value storage in IndexedDB."
        },
        {
          "name": "whatwg-fetch (or ponyfill)",
          "motivation": "The code explicitly includes a fetch ponyfill (`P(27886)`) and checks for native fetch support (`P(48901)`), ensuring fetch functionality is available, a common pattern when using `whatwg-fetch` or similar ponyfills."
        }
      ]
    },
    {
      "file": "866.ed9c107a30a38538.js",
      "occurences": [
        {
          "name": "Angular",
          "motivation": "The code utilizes Angular's core features and syntax. This includes the component structure (indicated by `\\u0275cmp` for component definition and `\\u0275fac` for factory), lifecycle hooks such as `ngOnInit` and `ngOnChanges`, dependency injection (e.g., `t.rXU`), and Angular's template syntax with directives like `*ngIf`, `*ngFor`, event binding `(click)`, and property binding. Minified imports like `s.MD` (likely representing `@angular/common` functionalities) further support this."
        },
        {
          "name": "RxJS",
          "motivation": "The code extensively employs RxJS for asynchronous programming. This is evident from the use of `new h.B` (likely `Subject` or `BehaviorSubject` from RxJS, where `h` is `o(21413)`), methods like `.asObservable()`, the `.pipe()` operator for composing asynchronous operations, and minified calls corresponding to RxJS operators: `(0,C.n)` (e.g., `switchMap`, `tap` - where `C` is `o(25558)`), `(0,M.p)` (e.g., `forkJoin`, `combineLatest` - where `M` is `o(27468)`), `(0,u.w)` (likely `timeout` - where `u` is `o(62087)`), `(0,E.W)` (likely `catchError` - where `E` is `o(99437)`), and `(0,c.of)` (likely `of` - where `c` is `o(7673)`)."
        },
        {
          "name": "Apollo Client",
          "motivation": "An `apollo` service is injected into the component's constructor (`this.apollo=e`, where `e` is resolved via `t.rXU(T.Ic)` and `T.Ic` (`o(73512)`) likely refers to the Apollo Client instance). Apollo Client is a common library for managing GraphQL data in JavaScript applications, including those built with Angular."
        },
        {
          "name": "Tippy.js",
          "motivation": "The component's template uses a `tippy` directive (`<... tippy ...>`). Additionally, options are configured for this directive (`[options]=\"t.eq3(2,L,e.description)\"`), where the `L` function defines properties like `interactive`, `content`, and `placement`, which are characteristic of Tippy.js, a tooltip/popover library. The dependency `g.iI` (from `o(41059)`) in the component's dependencies array likely corresponds to this directive."
        }
      ]
    },
    {
      "file": "common.9d65e9897e881c0f.js",
      "occurences": [
        {
          "name": "events (Node.js polyfill/implementation)",
          "motivation": "The code explicitly defines and exports an `EventEmitter` class (`o.EventEmitter=o`, `p.exports=o`) with methods like `on`, `emit`, `once`, `removeListener`, `setMaxListeners`, etc. This API mirrors the Node.js `events` module, suggesting it's either a direct port, a polyfill, or a compatible implementation for a browser environment, potentially bundled by Webpack (`self.webpackChunkcryptopunks_eth`)."
        }
      ]
    },
    {
      "file": "main.3423dfa67ed0cba9.js",
      "occurences": [
        {
          "name": "Angular",
          "motivation": "The code uses Angular's core functionalities, decorators, and lifecycle hooks such as `constructor(r.rXU(p.aKT))` (Dependency Injection), `ngOnInit`, `ngOnChanges`, `ngOnDestroy`. Minified Angular-specific decorators like `r.VBU` (likely `@Component`), `p.FsC` (likely `@Directive`), and `r.EJ8` (likely `@Pipe`) are present. Angular's `HttpClient` (e.g., `this.http.get`) is used for making HTTP requests. The module identified by `54438` appears to be the core Angular module."
        },
        {
          "name": "Apollo Client",
          "motivation": "The code extensively uses `this.apollo.query`, `this.apollo.watchQuery`, and `this.apollo.use(\"...\")` for interacting with GraphQL endpoints. GraphQL queries are defined using a template literal tag, often `r.J1\\`` (e.g., ``r.J1`query GetAuctionStarted...```). This indicates the use of Apollo Client for GraphQL data management. The module identified by `73512` appears to be related to Apollo/GraphQL."
        },
        {
          "name": "Tippy.js",
          "motivation": "The code snippet `(0,r.Ay)(T,{...this.options,zIndex:21474841,theme:\"punks\",arrow:'<svg...>',allowHTML:!1})` in module `28916` strongly suggests the initialization of Tippy.js tooltips. The `_tippy` property and `destroy()` method on DOM elements are also referenced (`this.el.nativeElement._tippy&&this.el.nativeElement._tippy.destroy()`). The module identified by `57967` is likely Tippy.js."
        },
        {
          "name": "Web3Modal",
          "motivation": "The code includes references to Web3Modal's custom elements such as `w3m-modal`, `w3m-button`, `w3m-connect-button`, `w3m-account-button`, and `w3m-network-button` (imported from modules like `y(72732)`). It also uses a controller pattern typical of Web3Modal, for example, `Ce.W3.open()` (likely `ModalController.open()`) and `Ce.ConnectorController.getEmailConnector()`. The `Pm` class with iframe logic for an email connector (`SECURE_SITE_SDK_URL`) points to Web3Modal's email connector functionality."
        },
        {
          "name": "wagmi",
          "motivation": "The code shows patterns consistent with wagmi, including its configuration structure (`wagmiConfig`), error classes (e.g., `At extends Error` which is a wagmi error base class), and utility functions for account and chain management. For instance, `(0,ia.J)(n)` appears to be wagmi's `toAccount` and `(0,Re.b)(Pt)` seems to be `getAddress`. The module `9969` contains a significant amount of wagmi-related code, including its client setup and actions."
        },
        {
          "name": "ethers.js",
          "motivation": "While not explicitly imported by its package name, ethers.js is highly likely used as a core dependency of wagmi or Web3Modal. The code contains numerous utility functions for Ethereum interactions, such as BigInt manipulation, hex-to-bytes conversions (e.g., `Ga(s)` for `hexToBytes`), address validation (`(0,z.P)(ce)` for `isAddress`), ABI definitions (e.g., `at=JSON.parse('[{\"constant\":true,...}]')`), and contract interaction logic. These are fundamental building blocks provided by libraries like ethers.js."
        },
        {
          "name": "Zod",
          "motivation": "The code snippet `vu=(()=>{class s extends Error{constructor(n){super(),this.issues=[],...}})` within the large utility module `9969` (which also contains wagmi code) is characteristic of Zod's schema definition and error handling. Error codes like `pi.invalid_type` are also indicative of Zod's usage for data validation."
        },
        {
          "name": "Moment.js",
          "motivation": "The code in module `y(97586)` and its dependencies (e.g., `y(47538)`, `y(51800)`) includes `r.defineLocale` calls and date/time formatting strings (e.g., `HH:mm`, `LTS`, `LLLL`). This is the standard way Moment.js handles internationalization and date formatting, indicating its use for date and time manipulations."
        },
        {
          "name": "localForage",
          "motivation": "The code for Web3Modal's email connector (`Pm` class in module `9969`) uses a storage abstraction `fc={set(s,e){Ha.isClient&&localStorage.setItem(\\`${vi.STORAGE_KEY}${s}\\`,e)},get:s=>Ha.isClient?localStorage.getItem(\\`${vi.STORAGE_KEY}${s}\\`):null,...}`. This pattern, especially with namespaced keys in localStorage, is similar to how localForage might be used or implemented for specific storage needs. The import of `y(40119)` which resolves to `localforage-driver-localstorage` confirms its usage, likely configured to use the localStorage driver."
        },
        {
          "name": "NGRX",
          "motivation": "The code includes patterns indicative of NGRX for state management, such as `this.store.select(...)` for selecting state slices, action dispatches (`this.dispatcher.next(P)`), and references to NGRX-specific action types like `@ngrx/store-devtools/recompute` and `@ngrx/effects/init`. This is noticeable within the wagmi/ethers utility module `9969` and its interactions with effects (`Od` class for `EffectsSources`)."
        },
        {
          "name": "Angular",
          "motivation": "The code structure with minified class names and static properties like `static#e=this.\\u0275fac` and `static#t=this.\\u0275dir=r.FsC` are indicative of compiled Angular components/directives. Functions like `r.rXU` (likely `inject`), `r.KVO` (likely `inject`), `r.nKC` (likely `InjectionToken`), `r.bkB` (likely `EventEmitter`) are common in Angular's minified output. The presence of `Zone.js` integration (`Ci(vl)`) and dependency injection patterns also point to Angular."
        },
        {
          "name": "Moment.js",
          "motivation": "The code includes a minified version of Moment.js. This is evident from the presence of `p.version=\"2.30.1\"`, functions like `Un()` (likely `moment()`), `se()` (likely `moment.utc()`), `ze()` (likely `moment.duration()`), date formatting strings (`YYYY-MM-DDTHH:mm:ssZ`), locale management functions (`Po` likely `moment.locale`, `Ro` likely `moment.defineLocale`), and the characteristic internal structure and prototype methods (e.g., `Zr.add`, `Zr.calendar`)."
        },
        {
          "name": "qrcode-generator (or similar)",
          "motivation": "Module `68314` and its dependencies (e.g., `89460`, `7030`, `56511`) define functions like `ne.create`, `ne.toCanvas`, `ne.toDataURL`, and `ne.toString`. Module `89460` (`ht(ot,rt,Ne,Re)`) contains logic related to QR code properties such as version, error correction level (`Ne`), and mask pattern (`Re`), which are typical for QR code generation libraries."
        },
        {
          "name": "RxJS",
          "motivation": "The code extensively uses RxJS patterns and classes. For example, `new r.bkB` (in module `54438`, likely a minified `EventEmitter` from Angular or a `Subject` from RxJS), `new r.c` (in module `71985`, which is an `Observable`), `new p.t` (in module `84412`, which is a `BehaviorSubject`), and operators like `pipe`, `map` (e.g., `(0,at.T)`), `filter` (e.g., `(0,T.p)`), `switchMap` (e.g., `(0,De.n)`), and `takeUntil` (e.g., `(0,E.Q)`)."
        },
        {
          "name": "Tippy.js / Popper.js",
          "motivation": "Module `57967` uses `_t=Qt({defaultModifiers:[...]})` which is characteristic of Popper.js v2's `createPopper`. It also instantiates Popper with `xt.popperInstance=_t(...)`. The code defines constants like `le=\"tippy-content\"`, `Ke=\"tippy-backdrop\"`, `Qe=\"tippy-arrow\"`. An object `Ri` is assigned to `Ys.defaultProps` which mirrors Tippy.js's default properties structure, and `Ys.setDefaultProps` is also present, strongly suggesting Tippy.js (which uses Popper.js)."
        }
      ]
    },
    {
      "file": "polyfills.aa0d9bd37968f15b.js",
      "occurences": [
        {
          "name": "Zone.js",
          "motivation": "The code explicitly uses `Zone`, `ZoneAwarePromise`, `Zone.__symbol__`, patches browser APIs (`setTimeout`, `Promise`, `XMLHttpRequest`, `fetch`, event listeners) using Zone.js patterns (`scheduleMacroTask`, `scheduleMicroTask`, `runTask`), and includes checks like `e.Zone`. The purpose of the file seems to be polyfilling/patching APIs for change detection, which is the core function of Zone.js, often used with Angular."
        },
        {
          "name": "Webpack",
          "motivation": "The code starts with the characteristic Webpack chunk loading wrapper `(self.webpackChunkcryptopunks_eth=self.webpackChunkcryptopunks_eth||[]).push([[461],{...}])`, indicating it's part of a Webpack build process."
        },
        {
          "name": "Angular Localize",
          "motivation": "The code defines and uses a `Fe` function assigned to `globalThis.$localize` and uses a specific syntax with colons (`:`) within template literals (`Pe` function), which matches the behavior and setup of `@angular/localize` for internationalization."
        }
      ]
    }
  ],
  "urls": [],
  "ethereum": [
    {
      "file": "726.1f838bd3690e05c9.js",
      "occurences": [
        {
          "count": 1
        }
      ]
    },
    {
      "file": "main.3423dfa67ed0cba9.js",
      "occurences": [
        {
          "count": 2
        }
      ]
    }
  ],
  "fallbacks": []
}