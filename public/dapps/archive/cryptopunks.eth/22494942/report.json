{
  "version": 2,
  "contentHash": "bafybeibhoqhgcdwjbcoj3gw5txxkihq7aezubr3yjk4d36kutmplktcsem",
  "timestamp": 1747390110,
  "blockNumber": 22494942,
  "rootMimeType": "inode/directory",
  "totalSize": 5057477,
  "favicon": "favicon.ico",
  "title": "CryptoPunks.eth.limo - The NFT marketplace to buy and sell CryptoPunks on Ethereum",
  "distributionPurity": {
    "externalScripts": [
      {
        "file": "index.html",
        "occurences": [
          {
            "type": "script",
            "url": "https://plausible.io/js/script.js"
          },
          {
            "type": "link",
            "url": "https://fonts.googleapis.com"
          }
        ]
      }
    ],
    "externalMedia": []
  },
  "networkingPurity": [
    {
      "file": "223.d16e997fada6cedd.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://explorer-api.walletconnect.com/v3/wallets",
            "https://explorer-api.walletconnect.com/v3/wallets/images",
            "https://explorer-api.walletconnect.com/v3/featured",
            "https://explorer-api.walletconnect.com/v3/wallets/{id}/logo/lg"
          ],
          "library": "@web3modal/core",
          "type": "auxiliary",
          "motivation": "The code contains functions like `ExplorerCtrl.getWallets`, `ExplorerApiCtrl.fetchWalletListings`, `fetchWalletImages`, `fetchFeaturedWallets`, and `getWalletImageUrl`. These construct URLs using `ExplorerApiCtrl.explorerApiUrl` (which defaults to `https://explorer-api.walletconnect.com`) and specific API paths (`/v3/wallets`, `/v3/wallets/images`, `/v3/featured`, `/v3/wallets/{id}/logo/lg`) along with a `projectId` query parameter to fetch wallet metadata and images from the WalletConnect Explorer API via `fetch`."
        },
        {
          "method": "fetch",
          "urls": [],
          "library": "@web3modal/ethereum-provider",
          "type": "auxiliary",
          "motivation": "The code includes a call to `ClientCtrl.ethereum().getEnsAvatar(t)`. This function likely uses the underlying Ethereum provider's `getAvatar` method. ENS avatar resolution often involves fetching data based on the resolver's configuration, which can result in `fetch` calls to external HTTP or IPFS gateways specified in ENS records. The exact URL cannot be determined from the static code as it depends on the specific ENS name being resolved at runtime."
        },
        {
          "method": "WebSocket",
          "urls": [
            "wss://relay.walletconnect.com"
          ],
          "library": "@walletconnect/sign-client",
          "type": "auxiliary",
          "motivation": "The code references WalletConnect connection logic, such as `ClientCtrl.ethereum().connectWalletConnect(...)`. The WalletConnect v2 protocol, used by Web3Modal v2, establishes a session by opening a WebSocket connection to a WalletConnect relay server. The default URL for this relay is `wss://relay.walletconnect.com`, though this can be configured via `ConfigCtrl`."
        }
      ]
    },
    {
      "file": "413.3ce364813d44d5b6.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://explorer-api.walletconnect.com/w3m/v1/getDesktopListings",
            "https://explorer-api.walletconnect.com/w3m/v1/getMobileListings",
            "https://explorer-api.walletconnect.com/w3m/v1/getAllListings"
          ],
          "library": "WalletConnect Web3Modal",
          "type": "auxiliary",
          "motivation": "The code defines a base URL `O = \"https://explorer-api.walletconnect.com\"` and uses it within the `E` function to construct URLs for API calls using `fetch`. Specific functions (`h_getDesktopListings`, `h_getMobileListings`, `h_getAllListings`) call `E` with paths like `/w3m/v1/getDesktopListings`, `/w3m/v1/getMobileListings`, and `/w3m/v1/getAllListings`. Query parameters like `projectId`, `sdkType`, `sdkVersion`, `page`, `entries`, `chains`, `excludedIds`, `recommendedIds` are appended dynamically based on configuration and context. These calls fetch wallet metadata for the modal."
        }
      ]
    },
    {
      "file": "48.e5cb39df259d0a16.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "/api/top-sales"
          ],
          "library": "@angular/common/http",
          "type": "self",
          "motivation": "The call `this.dataSvc.fetchTopSales(12, r, c)` is made to retrieve data for \"Largest Sales\". It's assumed that the `DataService` (`this.dataSvc`) utilizes Angular's `HttpClient` (which internally uses `fetch` or `XMLHttpRequest`) to make a GET request to a relative backend API endpoint. The parameters `12, r, c` are likely used to form query parameters such as `?limit=12&period=[period_value]&hideFlashLoans=[boolean_value]`. The URL `/api/top-sales` is a best guess for this relative endpoint."
        },
        {
          "method": "fetch",
          "urls": [
            "/api/events"
          ],
          "library": "@angular/common/http",
          "type": "self",
          "motivation": "The call `this.dataSvc.fetchEvents(12, 0, r.value, \"blockTimestamp\", \"desc\")` retrieves data for \"Recent Transactions\". It is assumed that `DataService` uses Angular's `HttpClient` for this, making a GET request to a relative backend API endpoint. The provided parameters are likely translated into query parameters like `?limit=12&offset=0&type=[filter_value]&sort=blockTimestamp&order=desc`. The URL `/api/events` is a best guess for this endpoint."
        },
        {
          "method": "fetch",
          "urls": [
            "/api/eth-price"
          ],
          "library": "@angular/common/http",
          "type": "self",
          "motivation": "The observable `this.dataSvc.usd$` is used to fetch the ETH to USD conversion rate. This likely involves an HTTP GET request to a backend API endpoint, assumed to be facilitated by Angular's `HttpClient` within the `DataService`. The URL `/api/eth-price` is a best guess for this relative endpoint."
        }
      ]
    },
    {
      "file": "568.2243308e45f7d2ae.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [],
          "library": "web3Svc (application-specific service)",
          "type": "rpc",
          "motivation": "The call `this.web3Svc.getEnsFromAddress(...)` in `Un` class (eth-address component) initiates an Ethereum RPC request to resolve an ENS name. This is assumed to use `fetch` as an underlying mechanism if a direct RPC provider is configured by `web3Svc`. The specific RPC endpoint URL is determined by `web3Svc`'s external configuration (not present in this snippet) or via a wallet provider like `window.ethereum` (in which case the URL 'window.ethereum' is excluded as per instructions, leading to an empty `urls` array)."
        },
        {
          "method": "fetch",
          "urls": [],
          "library": "web3Svc (application-specific service)",
          "type": "rpc",
          "motivation": "The call `this.web3Svc.checkNetwork()` in `le` class (app-bid component) likely performs an RPC call such as `eth_chainId` to verify the connected network. This is assumed to use `fetch` as an underlying mechanism if a direct RPC provider is configured. The specific RPC endpoint URL is determined by `web3Svc`'s external configuration or a wallet provider, and is not present in this snippet or is `window.ethereum` (excluded URL)."
        },
        {
          "method": "fetch",
          "urls": [],
          "library": "web3Svc (application-specific service)",
          "type": "rpc",
          "motivation": "Calls like `this.web3Svc.getBid(...)`, `this.web3Svc.getPunkAttributes(...)`, and `this.web3Svc.getPunkImage(...)` in various components (`le`, `we`, `la`) perform Ethereum RPC `eth_call` requests to read data from smart contracts. These are assumed to use `fetch` as an underlying mechanism if a direct RPC provider is configured. Specific RPC endpoint URLs are externally configured or come from a wallet provider (`window.ethereum` URLs are excluded)."
        },
        {
          "method": "fetch",
          "urls": [],
          "library": "web3Svc (application-specific service)",
          "type": "rpc",
          "motivation": "The call `this.web3Svc.enterBidForPunk(...)` in `le` class (app-bid component) initiates an `eth_sendTransaction` RPC call to submit a bid. If `web3Svc` uses a direct RPC node that relays transactions or a wallet provider that uses `fetch` for this, `fetch` would be the underlying method. Specific RPC endpoint URLs are externally configured or come from a wallet provider (`window.ethereum` URLs are excluded)."
        },
        {
          "method": "fetch",
          "urls": [],
          "library": "web3Svc (application-specific service)",
          "type": "rpc",
          "motivation": "The call `this.web3Svc.waitForTransaction(...)` in `le` class (app-bid component) likely polls for a transaction receipt using RPC calls like `eth_getTransactionReceipt`. This polling is assumed to use `fetch` as an underlying mechanism if a direct RPC provider is configured. Specific RPC endpoint URLs are externally configured or come from a wallet provider (`window.ethereum` URLs are excluded)."
        },
        {
          "method": "fetch",
          "urls": [],
          "library": "viem/wagmi (inferred)",
          "type": "rpc",
          "motivation": "The `da` function in `va` class (AuctionComponent) sets up a `watchBlockNumber` process with `poll:!0`. This pattern, using `t.getClient` (where `t` is `this.web3Svc.config`) and `(0,pa.T)(l,ha.q,\"watchBlockNumber\")`, strongly suggests usage of `wagmi` and `viem` for polling `eth_blockNumber`. This polling would use `fetch` (or a similar HTTP request mechanism) if the `viem` client is configured with an HTTP RPC transport. The RPC URL is determined by the client's configuration, not present in this snippet, or could be `window.ethereum` (excluded URL)."
        }
      ]
    },
    {
      "file": "60.b9f37e0591e1a3d1.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "/assets/logo.svg"
          ],
          "library": "Angular HttpClient",
          "type": "self",
          "motivation": "A `HttpClient.get` call is made to `/assets/logo.svg` to fetch the SVG content as text. This occurs in the `PunkCardService` (`$n` class) for image creation. Angular's HttpClient uses `XMLHttpRequest` or `fetch`."
        },
        {
          "method": "fetch",
          "urls": [
            "https://www.larvalabs.com/public/images/cryptopunks/punk<TOKEN_ID>.svg",
            "https://downloads.cryptophunks.com/phunk<TOKEN_ID>.svg"
          ],
          "library": "Angular HttpClient",
          "type": "auxiliary",
          "motivation": "A `HttpClient.get` call is made in the `PunkBillboardComponent` (`xn` class) to fetch an SVG image. The URL is dynamically constructed using `environment.staticDownloadUrl` (which depends on the collection type, e.g., `cryptopunks-v1` or `cryptophunks`) and a token ID. The `<TOKEN_ID>` is a placeholder for the actual token number."
        },
        {
          "method": "fetch",
          "urls": [
            "/assets/cryptophunks-dark.svg",
            "/assets/icons/logo.svg"
          ],
          "library": "Angular HttpClient",
          "type": "self",
          "motivation": "A `HttpClient.get` call is made in the `PunkBillboardComponent` (`xn` class) to fetch SVG logo data. The URL is either `\"/assets/cryptophunks-dark.svg\"` or constructed from `dataSvc.staticUrl + \"/icons/logo.svg\"`. Assuming `dataSvc.staticUrl` resolves to a relative path like `/assets` or an empty string for self-hosted assets based on other similar paths. One path example `/assets/icons/logo.svg` is given if `staticUrl` is `/assets`."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.cryptopunks.app/api/v1/card/<TOKEN_ID>/<TIMESTAMP>.json",
            "https://api.cryptophunks.com/api/v1/card/<TOKEN_ID>/<TIMESTAMP>.json"
          ],
          "library": "Angular HttpClient",
          "type": "auxiliary",
          "motivation": "The `DataService` (`en.u`) has a `fetchPunkCard` method that makes a `HttpClient.get` call. The URL is constructed using `environment.apiUrl` (which depends on the collection, e.g., `api.cryptopunks.app` or `api.cryptophunks.com`) and includes a token ID and timestamp. `<TOKEN_ID>` and `<TIMESTAMP>` are placeholders."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.cryptopunks.app/api/v1/punks/<TOKEN_ID>",
            "https://api.cryptophunks.com/api/v1/punks/<TOKEN_ID>"
          ],
          "library": "Angular HttpClient",
          "type": "auxiliary",
          "motivation": "The `DataService` (`en.u`) has a `fetchSinglePunk` method making a `HttpClient.get` call. The URL uses `environment.apiUrl` and a token ID. `<TOKEN_ID>` is a placeholder."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.cryptopunks.app/api/v1/punkdata/<TOKEN_ID>",
            "https://api.cryptophunks.com/api/v1/punkdata/<TOKEN_ID>"
          ],
          "library": "Angular HttpClient",
          "type": "auxiliary",
          "motivation": "The `DataService` (`en.u`) has a `fetchSinglePunkListing` method making a `HttpClient.get` call. The URL uses `environment.apiUrl` and a token ID. `<TOKEN_ID>` is a placeholder."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.cryptopunks.app/api/v1/cigclaim/<TOKEN_ID>",
            "https://api.cryptophunks.com/api/v1/cigclaim/<TOKEN_ID>"
          ],
          "library": "Angular HttpClient",
          "type": "auxiliary",
          "motivation": "The `DataService` (`en.u`) has a `fetchCigClaim` method making a `HttpClient.get` call. The URL uses `environment.apiUrl` and a token ID. `<TOKEN_ID>` is a placeholder."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd"
          ],
          "library": "Angular HttpClient",
          "type": "auxiliary",
          "motivation": "The `DataService` (`en.u`) initializes its `usd$` observable with a `HttpClient.get` call to CoinGecko API to fetch the ETH to USD price."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.thegraph.com/subgraphs/name/larvalabs/cryptopunks",
            "https://api.thegraph.com/subgraphs/name/cryptophunks/cryptophunks"
          ],
          "library": "Apollo Client",
          "type": "auxiliary",
          "motivation": "The `TxHistoryComponent` (`ot` class) uses `this.apollo.query` to send a GraphQL query. The GraphQL endpoint URL is derived from `environment.graphUrl`, which varies based on the collection (e.g., `larvalabs/cryptopunks` or `cryptophunks/cryptophunks`). Apollo Client uses `fetch` or `XMLHttpRequest` for HTTP transport."
        },
        {
          "method": "fetch",
          "urls": [
            "/images/punks/<TOKEN_ID>.svg",
            "/images/phunks/<TOKEN_ID>.svg"
          ],
          "library": "ngx-lazy-load-image / Browser",
          "type": "self",
          "motivation": "Images are loaded using a `[lazyLoad]` directive. The URL is constructed from `dataSvc.staticUrl` (empty string, implying relative path) and `dataSvc.tokenImagePath` (e.g., `images/punks/` or `images/phunks/`) plus the token ID. `<TOKEN_ID>` is a placeholder. This triggers an HTTP GET request, usually via underlying `fetch` or `XMLHttpRequest` by the browser or lazy-loading library."
        },
        {
          "method": "fetch",
          "urls": [
            "assets/loadingpunk.png",
            "assets/loadingphunk.png"
          ],
          "library": "Browser / Angular",
          "type": "self",
          "motivation": "Image `src` or `defaultImage` attributes point to these local asset paths for placeholder/loading images. This triggers an HTTP GET."
        },
        {
          "method": "fetch",
          "urls": [
            "https://raw.githubusercontent.com/reservoirprotocol/assets/main/sources/opensea-logo.svg"
          ],
          "library": "Browser / Angular",
          "type": "auxiliary",
          "motivation": "An image `src` attribute directly points to this URL on `raw.githubusercontent.com` to display the OpenSea logo. This triggers an HTTP GET."
        },
        {
          "method": "fetch",
          "urls": [
            "https://blur.io/favicons/180.png"
          ],
          "library": "Browser / Angular",
          "type": "auxiliary",
          "motivation": "An image `src` attribute directly points to this URL on `blur.io` to display the Blur logo. This triggers an HTTP GET."
        },
        {
          "method": "fetch",
          "urls": [
            "/assets/loader-<THEME_NAME>.gif"
          ],
          "library": "Browser / Angular",
          "type": "self",
          "motivation": "An image `src` attribute is dynamically constructed to point to a theme-specific loader GIF within the local assets (e.g., `/assets/loader-dark.gif`). `<THEME_NAME>` is a placeholder. This triggers an HTTP GET."
        },
        {
          "method": "fetch",
          "urls": [
            "/assets/fonts/retro-computer.ttf"
          ],
          "library": "Browser Font Loading API",
          "type": "self",
          "motivation": "`new FontFace(\"RetroComputer\", \"url(/assets/fonts/retro-computer.ttf)\")` is used to load a custom font. This initiates a browser download of the font file from the specified relative path using an HTTP GET request (underlying mechanism is typically `fetch` or `XMLHttpRequest`)."
        }
      ]
    },
    {
      "file": "698.d6bd2b89a9b1d409.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "{url}"
          ],
          "library": "otherwise",
          "type": "auxiliary",
          "motivation": "The code defines a function `x` (aliased as `h`) which iterates through a list of URLs (`r`). Inside the loop, it calls `fetch(i.replace(\"{sender}\",e).replace(\"{data}\",a), {...})`. The variable `i` holds the current URL from the `r` array. The URL string contains placeholders `{sender}` and `{data}` which are replaced dynamically. The exact URL depends on the `urls` argument passed to the `ccipRequest` function (aliased as `x` or `h`). Since the URL structure is dynamic and meant for off-chain data retrieval based on contract calls (CCIP-Read/EIP-3668), it's classified as auxiliary. The method is determined by checking if the URL includes `{data}`: 'GET' if it does, 'POST' otherwise. Data is passed either in the URL ('GET') or as JSON in the request body ('POST')."
        }
      ]
    },
    {
      "file": "711.0a313ba442941161.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://cryptopunks.app/api/account/USER_ADDRESS/assets",
            "https://cryptopunks.app/api/account/USER_ADDRESS/bids",
            "https://cryptopunks.app/api/account/USER_ADDRESS/events/bought",
            "https://cryptopunks.app/api/account/USER_ADDRESS/events/sold",
            "https://cryptopunks.app/api/userCard/USER_ADDRESS",
            "https://cryptopunks.app/api/price/eth-usd"
          ],
          "library": "dataSvc (Custom Application Service)",
          "type": "self",
          "motivation": "These URLs are best guesses for endpoints called by methods of the `dataSvc` custom application service (e.g., `fetchOwned`, `fetchUserBids`, `fetchBoughtEvents`, `fetchSoldEvents`, `fetchUserCard`, `getUSDPrice`). It is assumed that `dataSvc` utilizes `fetch` or `XMLHttpRequest` for these network requests, a standard practice. The base URL `https://cryptopunks.app/api/` is inferred from `T.c.siteUrl` (a variable likely holding `https://cryptopunks.app`, as it's used in constructing a shareable URL: `${T.c.siteUrl}/${r}?=${c}`) and common API path structures. Paths like `/account/USER_ADDRESS/assets` use `USER_ADDRESS` as a placeholder for dynamic address segments derived from function arguments. These are classified as `self` because `cryptopunks.app` is assumed to be the domain serving the script, making API calls to the same domain local."
        },
        {
          "method": "fetch",
          "urls": [
            "https://cryptopunks.app/images/punks/TOKEN_ID.svg"
          ],
          "library": "Angular (lazyLoad directive) / dataSvc (for URL parts)",
          "type": "self",
          "motivation": "The `lazyLoad` Angular directive is used for an image (`img` tag). Its URL is dynamically constructed using `d.dataSvc.staticUrl + d.dataSvc.tokenImagePath + (e.id||e.tokenId | tokenIdParse) + .svg`. Assuming `d.dataSvc.staticUrl` is `https://cryptopunks.app/` (derived from `T.c.siteUrl`) and `d.dataSvc.tokenImagePath` is a path like `images/punks/`, this results in a URL pattern like `https://cryptopunks.app/images/punks/TOKEN_ID.svg`. `TOKEN_ID` is a placeholder for the actual token identifier. `lazyLoad` directives or underlying image loading mechanisms often use `fetch` or `XMLHttpRequest`. This is classified as `self` as the image is assumed to be served from the same origin domain (`cryptopunks.app`)."
        }
      ]
    },
    {
      "file": "862.47356340150f888a.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://verify.walletconnect.com/attestation/",
            "https://verify.walletconnect.org/attestation/"
          ],
          "library": "@walletconnect/core",
          "type": "auxiliary",
          "motivation": "The code makes a call `fetch(`${f}/attestation/${c}`, ...)` inside the `fetchAttestation` function within the `X3` class (Verify API client). The base URL `f` is dynamically determined but defaults to `https://verify.walletconnect.com` or the failover `https://verify.walletconnect.org`. This call retrieves attestation data for domain verification."
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.com/v1/"
          ],
          "library": "@walletconnect/universal-provider",
          "type": "rpc",
          "motivation": "The code utilizes a generic HTTP RPC provider (`kd`/`Li`) instantiated within chain-specific providers (e.g., `NE` for eip155). The URL is constructed using the `mi` function, which defaults to `https://rpc.walletconnect.com/v1/?chainId=...&projectId=...` if no specific RPC URL is provided in the configuration (`rpcMap`). This is used to send standard JSON-RPC requests to Ethereum (and potentially other) chains."
        },
        {
          "method": "fetch",
          "urls": [
            "https://echo.walletconnect.com/"
          ],
          "library": "@walletconnect/core",
          "type": "auxiliary",
          "motivation": "The code makes a POST request in the `registerDeviceToken` function within the `Z3` class (Echo client). The URL is constructed as `https://echo.walletconnect.com/${o.projectId}/clients`. This is used to register a device token for push notifications via the WalletConnect Echo service."
        },
        {
          "method": "WebSocket",
          "urls": [
            "wss://relay.walletconnect.com",
            "wss://relay.walletconnect.org"
          ],
          "library": "@walletconnect/core",
          "type": "auxiliary",
          "motivation": "The code establishes a WebSocket connection (`new A1(e, [], c)`) inside the `S1` class. The URL `e` is constructed dynamically by the Relayer (`q3`) using the `Oy` function. This function takes the `relayUrl` (defaulting to `wss://relay.walletconnect.com` with a failover of `wss://relay.walletconnect.org`) and appends query parameters including authentication (`auth`) and the project ID. This connection is essential for the WalletConnect relay protocol."
        }
      ]
    },
    {
      "file": "main.92b6878d2a8de995.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://punkcdn.com/data/_attributes.json"
          ],
          "library": "Angular HttpClient (or similar)",
          "type": "auxiliary",
          "motivation": "The call is `this.http.get(\"https://punkcdn.com/data/_attributes.json\")` in `99499.js`. `this.http` is an instance of Angular's HttpClient (`pt.Qq`), used for fetching attribute data for NFTs."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.reservoir.tools/users/{address}/tokens/v7"
          ],
          "library": "Angular HttpClient (or similar)",
          "type": "auxiliary",
          "motivation": "The call is `this.http.get(`https://api.reservoir.tools/users/${Jt}/tokens/v7`, ...)` in `99499.js`. Used to fetch user's tokens from Reservoir API."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.reservoir.tools/orders/asks/v5"
          ],
          "library": "Angular HttpClient (or similar)",
          "type": "auxiliary",
          "motivation": "The call is `this.http.get(\"https://api.reservoir.tools/orders/asks/v5\", ...)` in `99499.js`. Used to fetch ask orders from Reservoir API."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.reservoir.tools/orders/bids/v5"
          ],
          "library": "Angular HttpClient (or similar)",
          "type": "auxiliary",
          "motivation": "The call is `this.http.get(\"https://api.reservoir.tools/orders/bids/v5\", ...)` in `99499.js`. Used to fetch bid orders from Reservoir API."
        },
        {
          "method": "fetch",
          "urls": [
            "https://punkcdn.com/data/_states.json"
          ],
          "library": "Angular HttpClient (or similar)",
          "type": "auxiliary",
          "motivation": "The call `this.http.get(\".../_states.json\")` in `99499.js` fetches state data. `p.c.staticUrl` is `https://punkcdn.com/data`."
        },
        {
          "method": "fetch",
          "urls": [
            "/assets/_punksv1_states.json"
          ],
          "library": "Angular HttpClient (or similar)",
          "type": "self",
          "motivation": "Conditional call in `99499.js` (`this.http.get(\"/assets/_punksv1_states.json\")`) for fetching state data for a specific collection, relative to the current domain."
        },
        {
          "method": "fetch",
          "urls": [
            "/assets/_phunks_states.json"
          ],
          "library": "Angular HttpClient (or similar)",
          "type": "self",
          "motivation": "Conditional call in `99499.js` (`this.http.get(\"/assets/_phunks_states.json\")`) for fetching state data for another specific collection, relative to the current domain."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.ethfollow.xyz/api/v1/users/{address}/stats"
          ],
          "library": "Angular HttpClient (or similar)",
          "type": "auxiliary",
          "motivation": "The call `this.http.get(`https://api.ethfollow.xyz/api/v1/users/${Jt}/stats`)` in `99499.js` fetches user stats from EthFollow API."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.reservoir.tools/tokens/v6"
          ],
          "library": "Angular HttpClient (or similar)",
          "type": "auxiliary",
          "motivation": "The call `this.http.get(\"https://api.reservoir.tools/tokens/v6\", ...)` in `99499.js` fetches token data from Reservoir API."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.geckoterminal.com/api/v2/networks/eth/tokens/0xcb56b52316041a62b6b5d0583dce4a8ae7a3c629"
          ],
          "library": "Angular HttpClient (or similar)",
          "type": "auxiliary",
          "motivation": "The call `this.http.get(\"https://api.geckoterminal.com/api/v2/networks/eth/tokens/0xcb56b52316041a62b6b5d0583dce4a8ae7a3c629\")` in `99499.js` fetches token price data from GeckoTerminal API for $CIG token."
        },
        {
          "method": "fetch",
          "urls": [
            "https://punkcdn.com/data/coin-price"
          ],
          "library": "Angular HttpClient (or similar)",
          "type": "auxiliary",
          "motivation": "The call `this.http.get(\"https://punkcdn.com/data/coin-price\", ...)` in `99499.js` fetches coin price data (likely ETH price)."
        },
        {
          "method": "fetch",
          "urls": [
            "https://pro-api.coingecko.com/api/v3/simple/price"
          ],
          "library": "Angular HttpClient (or similar)",
          "type": "auxiliary",
          "motivation": "The call `this.http.get(\"https://pro-api.coingecko.com/api/v3/simple/price\", ...)` in `99499.js` fetches prices from CoinGecko Pro API. An API key is sent in headers, but the key itself is not included here."
        },
        {
          "method": "fetch",
          "urls": [
            "https://punks.limo/{punkId}"
          ],
          "library": "Angular HttpClient (or similar)",
          "type": "auxiliary",
          "motivation": "The call `this.http.get(`${p.c.siteUrl}/${Jt}?=${ft}`, ...)` in `99499.js` where `p.c.siteUrl` is `https://punks.limo`. It fetches HTML content, likely for generating preview cards."
        },
        {
          "method": "fetch",
          "urls": [
            "https://punks.limo/floorpunks"
          ],
          "library": "Angular HttpClient (or similar)",
          "type": "auxiliary",
          "motivation": "The call `this.http.get(`https://punks.limo/floorpunks?=${Jt}`, ...)` in `99499.js`. It fetches HTML content for floor punks cards."
        },
        {
          "method": "fetch",
          "urls": [
            "https://gateway.thegraph.com/api/API_KEY_PLACEHOLDER/subgraphs/id/CWCx5K9VPUCgvUCNnY2jX73VTuKy47kRdZ3VVbPKdSvj"
          ],
          "library": "Apollo Client",
          "type": "auxiliary",
          "motivation": "Default GraphQL endpoint used by Apollo Client, configured as `graphURI`. The path includes a specific subgraph ID for CryptoPunks data. The API key placeholder `697844908bda79b5c5c11bdfde65ef5e` has been replaced."
        },
        {
          "method": "fetch",
          "urls": [
            "https://gateway-arbitrum.network.thegraph.com/api/API_KEY_PLACEHOLDER/subgraphs/id/Epp6gJotEJKAsJYdk7bDEURtGWWeZVXwZds2Pgw8eG51"
          ],
          "library": "Apollo Client",
          "type": "auxiliary",
          "motivation": "GraphQL endpoint for NFTX data, configured as `nftxGraphURI` and used with `this.apollo.use(\"nftx\")`. The API key placeholder has been replaced."
        },
        {
          "method": "fetch",
          "urls": [
            "https://gateway-arbitrum.network.thegraph.com/api/API_KEY_PLACEHOLDER/subgraphs/id/FQJe5L2quB6CGaGv3yyTGUV5ATnEgHcau3Q2nFm7UWAe"
          ],
          "library": "Apollo Client",
          "type": "auxiliary",
          "motivation": "GraphQL endpoint for CIG token data, configured as `cigGraphURI` and used with `this.apollo.use(\"cig\")`. The API key placeholder has been replaced."
        },
        {
          "method": "fetch",
          "urls": [
            "https://gondiproxy.chickenkiller.com/lending/graphql"
          ],
          "library": "Apollo Client",
          "type": "auxiliary",
          "motivation": "GraphQL endpoint for Gondi protocol data, configured as `gondiUrl` and used with `this.apollo.use(\"gondi\")`."
        },
        {
          "method": "fetch",
          "urls": [
            "https://eth-mainnet.g.alchemy.com/v2/ALCHEMY_API_KEY_PLACEHOLDER"
          ],
          "library": "Wagmi/Viem or Custom Web3Service",
          "type": "rpc",
          "motivation": "This is the primary RPC endpoint used for Ethereum interactions. It's configured in `E.c.rpcHttpProvider` and used by the custom `Lp` JsonRpcProvider instance, as well as likely by the Wagmi configuration. The API key `DmQk3glk8ycdD_Wvtzoklb02lNCOAcSC` has been replaced with a placeholder."
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.com/v1/"
          ],
          "library": "Wagmi/Viem",
          "type": "rpc",
          "motivation": "Used by Wagmi/Viem as an RPC endpoint for WalletConnect connections, constructed with chain ID and project ID. Example: `https://rpc.walletconnect.com/v1/?chainId=eip155:{chainId}&projectId={projectId}`."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.web3modal.com/v1/getOpenProjects",
            "https://api.web3modal.com/v1/all",
            "https://api.web3modal.com/v1/logo/{imageId}"
          ],
          "library": "Web3Modal",
          "type": "auxiliary",
          "motivation": "Web3Modal internally fetches wallet lists, project data, and logos from its API endpoints. These calls are made with a `projectId` query parameter."
        },
        {
          "method": "fetch",
          "urls": [
            "https://explorer-api.walletconnect.com/v3/wallets"
          ],
          "library": "Web3Modal",
          "type": "auxiliary",
          "motivation": "Web3Modal fetches wallet information from the WalletConnect explorer API. This call is made with a `projectId` and other query parameters."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.web3modal.org/getWalletImage/{ID}",
            "https://api.web3modal.com/getWalletImage/{ID}"
          ],
          "library": "custom",
          "type": "auxiliary",
          "motivation": "The code defines a class `O` which has a `getBlob` method. This method calls `fetch(sn, {method:\"GET\", ...})`. The URL `sn` is constructed via `Lt.createUrl(Fe)`. `Lt.createUrl({path:H,params:K})` takes a base URL (`this.baseUrl`) and appends the `path` and `params`. `this.baseUrl` is determined by `T.getApiUrl()`, which returns either `https://api.web3modal.org` or `https://api.web3modal.com`. One usage of this is in `Wt._fetchWalletImage` where the path is `/getWalletImage/{ID}`."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.web3modal.org/public/getAssetImage/{ID}",
            "https://api.web3modal.com/public/getAssetImage/{ID}"
          ],
          "library": "custom",
          "type": "auxiliary",
          "motivation": "Similar to the `/getWalletImage` endpoint, the code defines a class `O` with a `getBlob` method calling `fetch`. The URL is constructed using `T.getApiUrl()`. This is used in `Wt._fetchNetworkImage` and `Wt._fetchConnectorImage` with the path `/public/getAssetImage/{ID}`."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.web3modal.org/public/getCurrencyImage/{ID}",
            "https://api.web3modal.com/public/getCurrencyImage/{ID}"
          ],
          "library": "custom",
          "type": "auxiliary",
          "motivation": "The same `O` class and `getBlob` method are used. `Wt._fetchCurrencyImage` calls this with the path `/public/getCurrencyImage/{ID}` based on `T.getApiUrl()`."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.web3modal.org/public/getTokenImage/{ID}",
            "https://api.web3modal.com/public/getTokenImage/{ID}"
          ],
          "library": "custom",
          "type": "auxiliary",
          "motivation": "The same `O` class and `getBlob` method are used. `Wt._fetchTokenImage` calls this with the path `/public/getTokenImage/{ID}` based on `T.getApiUrl()`."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.web3modal.org/getWallets",
            "https://api.web3modal.com/getWallets"
          ],
          "library": "custom",
          "type": "auxiliary",
          "motivation": "The `O` class has a `get` method calling `fetch(sn, {method:\"GET\", ...})`. This is used in `Wt.fetchFeaturedWallets`, `Wt.fetchRecommendedWallets`, `Wt.fetchWallets`, and `Wt.searchWallet`, all calling the `/getWallets` path with various query parameters. The base URL is from `T.getApiUrl()`."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.web3modal.org/getAnalyticsConfig",
            "https://api.web3modal.com/getAnalyticsConfig"
          ],
          "library": "custom",
          "type": "auxiliary",
          "motivation": "The `O` class's `get` method is used in `Wt.fetchAnalyticsConfig` with the path `/getAnalyticsConfig` and base URL from `T.getApiUrl()`."
        },
        {
          "method": "fetch",
          "urls": [
            "https://pulse.walletconnect.org/e",
            "https://pulse.walletconnect.com/e"
          ],
          "library": "custom",
          "type": "auxiliary",
          "motivation": "The code defines a class `nt` (likely for analytics) initialized with `baseUrl:T.getAnalyticsUrl()`. This class has a `post` method that calls `fetch(tn,{method:\"POST\",...})`. The `_sendAnalyticsEvent` function uses this to post to the `/e` path. `T.getAnalyticsUrl()` returns either `https://pulse.walletconnect.org` or `https://pulse.walletconnect.com`."
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/identity/{ADDRESS}",
            "https://rpc.walletconnect.com/v1/identity/{ADDRESS}"
          ],
          "library": "custom",
          "type": "auxiliary",
          "motivation": "The code defines a class `ie` (likely an RPC client) initialized with `baseUrl:T.getBlockchainApiUrl()`. This class has a `get` method that calls `fetch`. `ue.fetchIdentity` uses this with the path `/v1/identity/{ADDRESS}`. `T.getBlockchainApiUrl()` returns either `https://rpc.walletconnect.org` or `https://rpc.walletconnect.com`."
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/account/{ACCOUNT}/history",
            "https://rpc.walletconnect.com/v1/account/{ACCOUNT}/history"
          ],
          "library": "custom",
          "type": "auxiliary",
          "motivation": "The `ie` class (RPC client) and its `get` method are used in `ue.fetchTransactions` with the path `/v1/account/{ACCOUNT}/history`. Base URL is from `T.getBlockchainApiUrl()`."
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/account/{ACCOUNT}/balance",
            "https://rpc.walletconnect.com/v1/account/{ACCOUNT}/balance"
          ],
          "library": "custom",
          "type": "auxiliary",
          "motivation": "The `ie` class (RPC client) and its `get` method are used in `ue.getBalance` with the path `/v1/account/{ACCOUNT}/balance`. Base URL is from `T.getBlockchainApiUrl()`."
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/generators/onrampurl",
            "https://rpc.walletconnect.com/v1/generators/onrampurl"
          ],
          "library": "custom",
          "type": "auxiliary",
          "motivation": "The `ie` class (RPC client) has a `post` method calling `fetch`. `ue.generateOnRampURL` uses this with the path `/v1/generators/onrampurl`. Base URL is from `T.getBlockchainApiUrl()`."
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/onramp/options",
            "https://rpc.walletconnect.com/v1/onramp/options"
          ],
          "library": "custom",
          "type": "auxiliary",
          "motivation": "The `ie` class (RPC client) and its `get` method are used in `ue.getOnrampOptions` with the path `/v1/onramp/options`. Base URL is from `T.getBlockchainApiUrl()`."
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/onramp/quote",
            "https://rpc.walletconnect.com/v1/onramp/quote"
          ],
          "library": "custom",
          "type": "auxiliary",
          "motivation": "The `ie` class (RPC client) and its `post` method are used in `ue.getOnrampQuote` with the path `/v1/onramp/quote`. Base URL is from `T.getBlockchainApiUrl()`."
        },
        {
          "method": "XMLHttpRequest",
          "urls": [],
          "library": "custom",
          "type": "rpc",
          "motivation": "The code contains a class `xr` which has a method `handle(mn)` that builds and sends an XMLHttpRequest: `const vt=tr.build(); ... vt.open(mn.method,mn.urlWithParams); ... vt.send(Et);`. The URLs are dynamic based on the `mn.urlWithParams` which is constructed from the request. This is part of a more generic HTTP handling mechanism that seems to be used for various RPC calls within the application, but specific URLs are not hardcoded at the XHR call site."
        }
      ]
    },
    {
      "file": "polyfills.aa0d9bd37968f15b.js",
      "occurences": [
        {
          "method": "XMLHttpRequest",
          "urls": [],
          "library": "Zone.js",
          "type": "auxiliary",
          "motivation": "The code patches `XMLHttpRequest.prototype.open` and `XMLHttpRequest.prototype.send` using `Zone.js`'s `ue` utility function. The `open` patch captures the URL (`x[1]`) and stores it. The `send` patch uses `Zone.current.scheduleMacroTask` (`Xe`) to wrap the XHR lifecycle. No specific URLs are hardcoded in this polyfill; they are passed dynamically by the application code when it calls `open`."
        },
        {
          "method": "fetch",
          "urls": [],
          "library": "Zone.js",
          "type": "auxiliary",
          "motivation": "The code contains `ue(e,\"fetch\",d=>function ee(d){...})`, which patches the global `fetch` function using Zone.js utilities to likely wrap the Promise returned by `fetch` in a ZoneAwarePromise. No specific URLs are hardcoded in this polyfill; they are passed dynamically by the application code when it calls `fetch`."
        }
      ]
    }
  ],
  "libraryUsage": [
    {
      "file": "115.0e9d14ef203371b7.js",
      "occurences": [
        {
          "name": "@web3modal/core",
          "motivation": "Presence of multiple controllers like `AccountController`, `NetworkController`, `ConnectionController`, `OptionsController`, `SIWEController`, `RouterController`, `SnackController`, `En` (event controller), and state management utilities (`(0,S.BX)`, `(0,S.B1)`) suggests the use of Web3Modal's core logic library."
        },
        {
          "name": "lit",
          "motivation": "The code defines custom elements (`(0,p.customElement)('w3m-connecting-siwe')`), uses base classes (`extends h.WF`), template literals (`h.qy`), tagged template literals for styles (`h.AH`), and decorators (`(0,W.wk)()`), all characteristic features of the Lit library for building web components."
        },
        {
          "name": "@web3modal/common or @walletconnect/utils",
          "motivation": "The use of `E.LX.caipNetworkIdToNumber` indicates a utility function for handling CAIP (Chain Agnostic Improvement Proposals) standards, likely originating from a common utility package within the Web3Modal or WalletConnect ecosystem."
        }
      ]
    },
    {
      "file": "223.d16e997fada6cedd.js",
      "occurences": [
        {
          "name": "Lit",
          "motivation": "`LitElement` and `lit-html` are used extensively. Evidence includes:\n* Class definitions extending `LitElement` (e.g., `class K extends b{`, where `b` is identified as `LitElement`'s base class `ce`).\n* Usage of `html` (aliased as `p`) and `css` (aliased as `E`) tagged template literals.\n* Use of Lit directives like `classMap` (imported as `z`).\n* Decorator patterns used for property definitions (e.g., `ge([w({type:Boolean})],K.prototype,\"disabled\",2)` where `w` is a property decorator factory).\n* Standard Lit lifecycle methods like `render()`, `firstUpdated()`, `connectedCallback()`, `disconnectedCallback()`.\n* Explicit tracking of Lit versions (`litElementVersions`, `litHtmlVersions`)."
        },
        {
          "name": "Motion One",
          "motivation": "The code utilizes animation functionalities characteristic of Motion One:\n* Imports and usage of animation functions like `animate` (e.g., `ie(this.routerEl,{opacity:[1,0]...`) which corresponds to the imported `ie` function wrapping `Zo` and `zo`, ultimately using `Cr` (a custom animation class similar to Motion One's internal implementation) or potentially the native `animate`.\n* Presence of easing functions (`Ie`, `Ar`) and timing constants (`U={duration:.3...}`).\n* Checks for Web Animations API (WAAPI) support (`ue.waapi`, `Pr.waapi`).\n* Handling of CSS variables for transforms (`wt=i=>`--motion-${i}`, `Ve_set`, `Ve_get`)."
        },
        {
          "name": "@web3modal/* (Core, UI, Utils, etc.)",
          "motivation": "The code implements a Web3 connection modal, heavily utilizing components and logic likely from the Web3Modal v2 library suite (@web3modal/core, @web3modal/ui, @web3modal/common, potentially including parts previously in @walletconnect/modal-*):\n* Extensive use of custom elements prefixed with `wcm-` (e.g., `<wcm-modal>`, `<wcm-qrcode>`, `<wcm-connect-wallet-view>`, `<wcm-wallet-button>`).\n* References to controllers like `ThemeCtrl` (d.lH), `ModalCtrl` (d.D8), `RouterCtrl` (d.jL), `ExplorerCtrl` (d.pV), `ClientCtrl` (d.IN), `ConfigCtrl` (d.mb), `ToastCtrl` (d.dC), `OptionsCtrl` (d.vZ), `CoreHelperUtil` (d.Ao). These controllers manage state and logic for the modal.\n* Logic for fetching wallet data from the WalletConnect Explorer API (`ExplorerCtrl.getWallets`, `ExplorerApiCtrl.fetchWalletListings`, `ExplorerApiCtrl.getWalletImageUrl`).\n* Handling of WalletConnect URIs (`walletConnectUri`).\n* Specific UI components for different connection flows and states (e.g., `wcm-desktop-connecting-view`, `wcm-qrcode-view`, `wcm-wallet-explorer-view`).\n* Usage of WalletConnect-specific icons and branding (`O.WALLET_CONNECT_LOGO`, etc.).\n* References to `explorer.walletconnect.com` for fetching wallet data."
        }
      ]
    },
    {
      "file": "323.8ed513cecc55d395.js",
      "occurences": [
        {
          "name": "tinycolor",
          "motivation": "The code implements a color parsing and manipulation library. Function names like `toHsv`, `toHsl`, `toHex`, `toRgb`, `lighten`, `darken`, `desaturate`, `saturate`, `spin`, `mix`, `readability`, `mostReadable`, and the structure involving `s.prototype` and methods like `_applyModification` closely resemble the API and internal structure of the `tinycolor2` library (or a derivative/fork). The presence of specific strings like `progid:DXImageTransform.Microsoft.gradient` and the extensive color name map (`s.names`) further support this identification."
        }
      ]
    },
    {
      "file": "413.3ce364813d44d5b6.js",
      "occurences": [
        {
          "name": "WalletConnect Web3Modal",
          "motivation": "The code explicitly uses constants like `WALLETCONNECT_DEEPLINK_CHOICE`, `WCM_VERSION`, mentions `WalletConnectModal`, interacts with URLs under `https://explorer-api.walletconnect.com`, and dynamically loads a web component named `wcm-modal`. Functions like `setWalletConnectDeepLink`, `setWalletConnectAndroidDeepLink`, `removeWalletConnectDeepLink`, and state management related to wallet connection (`ConnectWallet` view, `walletConnectUri`) are characteristic of Web3Modal v2."
        },
        {
          "name": "Proxy State Management Library (Likely Valtio/similar)",
          "motivation": "The code uses patterns like `(0,o.BX)({...})` to create reactive state objects (e.g., `i`, `a`, `m`, `L`, `g`, `I`, `y`, `b`) and `(0,o.B1)(...)` to subscribe to changes. This pattern is common with proxy-based state management libraries like Valtio, which Web3Modal is known to use internally."
        }
      ]
    },
    {
      "file": "48.e5cb39df259d0a16.js",
      "occurences": [
        {
          "name": "Angular Core",
          "motivation": "The code utilizes Angular's core functionalities. This is evident from the use of `t = O(54438)` which provides core rendering utilities, the presence of `\\u0275fac` (factory definition) and `\\u0275cmp` (component definition) decorators, the dependency injection system (e.g., `t.rXU(...)`), and component lifecycle hooks like `ngOnInit` and `ngAfterViewInit`."
        },
        {
          "name": "Angular Common",
          "motivation": "The code uses common Angular directives and pipes. `T = O(60177)` is referenced for structural directives like `*ngIf` (e.g., `T.MD`) and `*ngFor` (e.g., `T.bT`), and pipes such as `async` (e.g., `T.QX`), `date`, and `number` (e.g., `T.vh`)."
        },
        {
          "name": "Angular Forms",
          "motivation": "Angular's form handling capabilities are used. `H = O(89417)` is employed for form-related objects, for instance, `H.gE(...)` which likely corresponds to `FormGroup`, and `new H.MJ` which likely corresponds to `FormControl`."
        },
        {
          "name": "Angular Router",
          "motivation": "The application uses Angular's routing. `ct = O(41059)` is utilized for router functionalities, such as the `[routerLink]` directive (e.g., `ct.iI`) and programmatic navigation via `this.router.navigate(...)`."
        },
        {
          "name": "Chart.js",
          "motivation": "The core Chart.js library is used for creating charts. `N = O(39763)` refers to Chart.js, and new chart instances are created with `new N.t1(...)`. The `N.t1.register(...)` method is used to add plugins."
        },
        {
          "name": "chartjs-plugin-zoom",
          "motivation": "The `chartjs-plugin-zoom` library (identified as `Yt = {id:\"zoom\", version:\"2.0.1\", ...}`) is registered with Chart.js using `N.t1.register(..., Yt, ...)`. It provides zoom and pan functionalities for charts and internally uses Hammer.js."
        },
        {
          "name": "chartjs-plugin-crosshair",
          "motivation": "A crosshair plugin for Chart.js (identified as `ce = {id:\"crosshair\", ...}`) is registered using `N.t1.register(..., ce)`. This plugin adds crosshair functionality to the charts."
        },
        {
          "name": "Hammer.js",
          "motivation": "Hammer.js is used for touch gesture recognition. `L = O.n(ge)` where `ge = O(64511)` points to the Hammer.js library code. It is explicitly used by `chartjs-plugin-zoom` through calls like `new (L().Manager)(...)`, `L().Pinch`, and `L().Pan`."
        },
        {
          "name": "RxJS",
          "motivation": "RxJS (Reactive Extensions for JavaScript) is used for reactive programming. `jt = O(21413)` is used for creating `new jt.B` (likely `Subject` or `BehaviorSubject`). Numerous RxJS operators are invoked via webpack shorthands like `(0,Bt.B)` (e.g., `debounceTime`), `(0,ft.Q)` (e.g., `takeUntil`), `(0,k.n)` (e.g., `switchMap`), and `(0,j.M)` (e.g., `map`)."
        },
        {
          "name": "@ng-select/ng-select",
          "motivation": "The `@ng-select/ng-select` library is used for creating advanced select (dropdown) components. `Nt = O(59704)` is associated with this library, and it's used in templates as `<ng-select ...>` (`Nt.MQ` likely refers to `NgSelectComponent`)."
        },
        {
          "name": "ngx-lazyload-image",
          "motivation": "This library is used for lazy loading images. `Le = O(63876)` is identified as this library, providing the `[lazyLoad]` directive (e.g., `Le.P` which is likely `LazyLoadImageDirective`) used on `<img>` tags."
        }
      ]
    },
    {
      "file": "568.2243308e45f7d2ae.js",
      "occurences": [
        {
          "name": "Angular",
          "motivation": "The code extensively uses Angular's distinctive features: component lifecycle hooks (`ngOnInit`, `ngOnDestroy`, `ngOnChanges`), decorators (`@Component` implied by `ɵcmp`, `@Directive` implied by `ɵdir`), dependency injection patterns (e.g., `o.rXU(xt.b)`), and compiled template artifacts/functions (e.g., `o.VBU`, `o.FsC`, `o.EFF`, `o.Y8G`, `o.DNE`, `o.bMT`, `o.nI1`). The use of `selectors`, `inputs`, `standalone:!0`, `features:[o.aNF]` are all specific to Angular's component and directive definitions."
        },
        {
          "name": "RxJS",
          "motivation": "The code uses `this.store.select(...)`, which in NgRx (a common Angular state management library) returns an RxJS `Observable`. The `async` pipe (`o.nI1(1,\"async\")` in compiled templates) is used to subscribe to Observables in templates. Variables like `activeAuction$` (ending with `$`) are a common convention for Observables."
        },
        {
          "name": "NgRx Store",
          "motivation": "The code shows injection and usage of a `store` service (`this.store=e` where `e` is `o.rXU(z0.il)`). Methods like `this.store.select(S0.yk)` (selecting state) and `this.store.dispatch((0,fa.Td)({currentBlock:Number(s)}))` (dispatching actions) are characteristic of NgRx Store, an Angular state management library inspired by Redux."
        },
        {
          "name": "Tippy.js",
          "motivation": "The code contains a directive `re` with `selectors:[[\"\",\"tippy\",\"\"]]`. Inside its `ngOnInit`, it calls `(0,ee.Ay)(e,{content:e.dataset.tippyContent,...})` which is the initialization function for Tippy.js (likely `tippy()` itself, minified as `ee.Ay`). It also references `_tippy` property on elements and uses `data-tippy-content` attributes."
        },
        {
          "name": "D3.js",
          "motivation": "The `la` class (directive `punk-image`) uses D3.js for rendering an SVG chart. It calls D3 methods like `Mt.select(...).append('svg')` (minified as `function ea...append(\"svg\")` where `Q` is `Selection`), `r0()` (likely `d3.scaleBand()`), `Rt()` (likely D3 axis functions like `d3.axisBottom()` or `d3.axisLeft()`). The code structure for building axes (`e.svg.append(\"g\").call(...)`), creating scales (`e.xScale=r0().range([0,e.punkWidth]).domain(i).padding(0)`), and data joining/transitions (`e.svg.selectAll(\"rect\").data(r.dataArr).join(\"rect\").transition().style(...)`) are all idiomatic D3.js. Many internal D3 function names and structures are visible in the minified code block related to selections, scales, axes, colors, transitions, and timers."
        }
      ]
    },
    {
      "file": "60.b9f37e0591e1a3d1.js",
      "occurences": [
        {
          "name": "Angular",
          "motivation": "The code extensively uses Angular-specific features such as decorators (`@Component`, `@Injectable`, `@Pipe`), modules (`@angular/core`, `@angular/common`, `@angular/forms`, `@angular/router`, `@angular/common/http` referenced by minified names like `d(54438)`, `d(60177)`, `d(89417)`, `d(41059)`, `d(21626)`), dependency injection (`n.KVO`, `n.rXU`), and HTML-like templates with Angular's templating syntax (e.g., `*ngIf`, `[routerLink]`, `(click)` being minified to functions like `n.Y8G(\"ngIf\", ...)`)."
        },
        {
          "name": "RxJS",
          "motivation": "The code utilizes RxJS observables, subjects, and operators. Examples include `new rn.t(null)` (where `rn.t` is likely `BehaviorSubject` or `Subject` from `rxjs`), `.asObservable()`, `.pipe(...)` method calls, and various operators referenced by minified names such as `nn.T` (likely `map`), `q.n` (likely `switchMap` or `mergeMap`), `on.Q` (likely `takeUntil`), `Kn.W` (likely `catchError`), and `W.M` (likely `tap` or `finalize`). The use of `(0,tn._)` for `firstValueFrom` is also an indicator."
        },
        {
          "name": "Apollo Client (for Angular)",
          "motivation": "The code imports from `apollo-angular` (minified as `Pn.Ic` for `Apollo` service and `Pn.J1` for `gql` tag). It makes GraphQL queries using `this.apollo.query({query:_t,...})` where `_t` is defined using the `gql` tag. This is characteristic of Apollo Client usage within an Angular application."
        },
        {
          "name": "Tippy.js",
          "motivation": "The HTML templates generated by the code include attributes like `data-tippy-content` and `data-tippy-position` (e.g., `n.BMQ(\"data-tippy-content\",\"Background\")(\"data-tippy-position\",\"bottom\")`), which are standard attributes used by the Tippy.js library for creating tooltips."
        },
        {
          "name": "ngx-lazy-load-image (or similar lazy-loading library)",
          "motivation": "Image tags in the Angular templates use a `[lazyLoad]` directive (e.g., `n.Y8G(\"lazyLoad\", ...)`). This is a common pattern for image lazy-loading libraries in Angular, with `ngx-lazy-load-image` being a popular one."
        }
      ]
    },
    {
      "file": "711.0a313ba442941161.js",
      "occurences": [
        {
          "name": "Angular",
          "motivation": "The code structure, syntax, and specific identifiers (e.g., `\\u0275fac` for factory, `\\u0275cmp` for component, `\\u0275pipe` for pipe, template compilation functions like `n.j41`, `n.DNE`, `n.Y8G`, dependency injection in constructor, lifecycle hooks like `ngOnDestroy`, and usage of `$localize`) are characteristic of an Angular application compiled for production."
        },
        {
          "name": "RxJS",
          "motivation": "The code extensively uses RxJS patterns, including `new M.B` (likely `Subject` or `BehaviorSubject` from `rxjs`), `.pipe()` method calls on observables, and various operators like `(0,P.n)` (likely `switchMap` or similar), `(0,f.M)` (likely `map`), and `(0,k.Q)` (likely `takeUntil`). This is evident in handling asynchronous operations like route parameters and data fetching (`this.route.params.pipe(...)`, `this.dataSvc.fetchOwned(d).pipe(...)`)."
        }
      ]
    },
    {
      "file": "809.97a184ccfa89954f.js",
      "occurences": [
        {
          "name": "Angular",
          "motivation": "The code exhibits characteristics of an Angular application:\n- It defines a component (`MarketComponent`) with Angular's metadata (`ɵcmp` which is `ɵɵdefineComponent`, `selectors`, `template`, `standalone:!0`).\n- It uses Angular's dependency injection (`ɵfac` which is `ɵɵdefineFactory`, `t.rXU` which is `ɵɵdirectiveInject`) to inject services like `ActivatedRoute` (minified as `c.nX`) and `Router` (minified as `c.Ix`).\n- Angular Router functionalities such as `this.router.navigate(...)`, `this.route.params`, and `this.route.snapshot.queryParams` are used.\n- Minified Angular-specific template rendering functions are present (e.g., `t.j41`, `t.nrm`, `t.nI1`, `t.k0s`, `t.R7$`, `t.Y8G`, `t.bMT`)."
        },
        {
          "name": "RxJS",
          "motivation": "The code extensively uses RxJS patterns for reactive programming:\n- Observables are created and used: `punkData.asObservable()`, `marketType.asObservable()`, `this.route.params.pipe(...)`.\n- `new p.t([])` (where `p.t` is likely `BehaviorSubject` from RxJS) is used to create a subject.\n- RxJS pipeable operators are invoked through minified calls: `.pipe((0,h.T)(...)`, `(0,E.M)(...)`, `(0,D.n)(...))`. These correspond to operators like `map`, `tap`, or `switchMap`.\n- `(0,v.of)([])` is used, which is equivalent to `rxjs.of([])`, creating an observable that emits a sequence of values."
        }
      ]
    },
    {
      "file": "862.47356340150f888a.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code begins with `(self.webpackChunkcryptopunks_eth=self.webpackChunkcryptopunks_eth||[]).push(...)`, which is the standard boilerplate for code bundled by Webpack."
        },
        {
          "name": "@walletconnect/universal-provider",
          "motivation": "The main export `EthereumProvider` (`r2`) and its initialization pattern (`xa.init(...)`) are characteristic of `@walletconnect/universal-provider`. It orchestrates various WalletConnect components."
        },
        {
          "name": "@walletconnect/sign-client",
          "motivation": "The code includes classes like `SignClient` (`Vc`) and `Engine` (`pE`), responsible for handling WalletConnect v2 session logic (proposals, settlements, requests, events, etc.), which are core components of `@walletconnect/sign-client`."
        },
        {
          "name": "@walletconnect/core",
          "motivation": "Core functionalities like `Core` (`Bc`), `Relayer` (`q3`), `Crypto` (`T3`), `Expirer` (`Q3`), `History` (`Y3`), `KeyChain` (`P3`), `Verify` (`X3`), and `Echo` (`Z3`) are present, indicating the use of `@walletconnect/core`."
        },
        {
          "name": "@walletconnect/utils",
          "motivation": "Utility functions for environment detection (`ns`, `ts`, `rs`), JSON-RPC payload checking (`Tc`, `ga`), constants, and error handling (`Me`, `Jt`) are used, aligning with the utilities provided by `@walletconnect/utils`."
        },
        {
          "name": "@walletconnect/time",
          "motivation": "Time constants like `FIVE_MINUTES`, `THIRTY_SECONDS`, `ONE_DAY`, `SEVEN_DAYS` (`Xe`) are used throughout the code, matching those exported by `@walletconnect/time`."
        },
        {
          "name": "@walletconnect/environment",
          "motivation": "The code imports and uses environment detection functions (`ns`, `ts`, `rs` imported from `P(23601)`) to determine if the runtime is Node.js, Browser, or React Native, which is the purpose of `@walletconnect/environment`."
        },
        {
          "name": "@walletconnect/modal",
          "motivation": "The code conditionally imports and instantiates `WalletConnectModal` (`P.e(413).then(P.bind(P, 52413))`) based on the `showQrModal` option, indicating optional use of the `@walletconnect/modal` package."
        },
        {
          "name": "Noble Crypto Libraries (or similar)",
          "motivation": "The code includes implementations or imports (`P(...)`) for various cryptographic primitives like `Ed25519` (`uh`, `P(40597)`), `X25519` (`Ze`, `P(96863)`), `SHA256` (`je`, `P(21001)`), `SHA512` (`be`, `P(88411)`), `ChaCha20Poly1305` (`te`, `P(25945)`), `HMAC` (`P(48921)`), `HKDF` (`g`, `P(80877)`), `Poly1305` (`P(95905)`). These are often provided by libraries like `@noble/curves`, `@noble/hashes`, `@noble/ciphers`, or similar high-quality crypto libraries."
        },
        {
          "name": "Multiformats",
          "motivation": "The code contains extensive sections (`P(62862)`) dedicated to multibase encoding/decoding (e.g., `base16`, `base58btc`, `base64url`), multihash implementations (`sha256`, `sha512`), and CID concepts, suggesting the use of the `multiformats` library or its constituent parts (`multibase`, `multihash`, `cids`)."
        },
        {
          "name": "Lodash",
          "motivation": "The code includes a bundled version of Lodash (`P(35667)`), indicated by the presence of its internal functions and structures (`__lodash_hash_undefined__`, `xs`, `vn`, `St`, etc.) and the export pattern `Pr._ = bs`."
        },
        {
          "name": "query-string",
          "motivation": "The code imports (`P(98570)`) and uses functions like `parse` (`Ie`) and `stringify` (`m.stringify`) for handling URL query parameters, which is characteristic of the `query-string` library."
        },
        {
          "name": "pino",
          "motivation": "The code imports (`P(91105)`) and uses a logger setup consistent with `pino`, specifically its browser version (`pino/browser`). The setup involves configuration for serialization and transmission in a browser context."
        },
        {
          "name": "idb-keyval",
          "motivation": "The code defines a storage class (`av`) that wraps an IndexedDB implementation (`iv`) using patterns (`dbName`, `storeName`, `keyval-store`) typical of the `idb-keyval` library for simple key-value storage in IndexedDB."
        },
        {
          "name": "whatwg-fetch (or ponyfill)",
          "motivation": "The code explicitly includes a fetch ponyfill (`P(27886)`) and checks for native fetch support (`P(48901)`), ensuring fetch functionality is available, a common pattern when using `whatwg-fetch` or similar ponyfills."
        }
      ]
    },
    {
      "file": "common.9d65e9897e881c0f.js",
      "occurences": [
        {
          "name": "events (Node.js polyfill/implementation)",
          "motivation": "The code explicitly defines and exports an `EventEmitter` class (`o.EventEmitter=o`, `p.exports=o`) with methods like `on`, `emit`, `once`, `removeListener`, `setMaxListeners`, etc. This API mirrors the Node.js `events` module, suggesting it's either a direct port, a polyfill, or a compatible implementation for a browser environment, potentially bundled by Webpack (`self.webpackChunkcryptopunks_eth`)."
        }
      ]
    },
    {
      "file": "main.92b6878d2a8de995.js",
      "occurences": [
        {
          "name": "Angular",
          "motivation": "The code utilizes Angular-specific lifecycle hooks like `ngOnInit`, `ngOnChanges`, and `ngOnDestroy`. It also features Angular's component/directive/pipe definition patterns, observable usage with RxJS-like patterns (though minified, e.g., `.pipe((0,A.T)(...))`), and dependency injection (`constructor(A){this.el=A}` with `p.rXU(p.aKT)`). Minified Angular rendering functions like `r.VBU`, `r.FsC`, `r.EJ8`, `r.j41`, `r.EFF` are present throughout the component definitions."
        },
        {
          "name": "Apollo Client",
          "motivation": "The code makes GraphQL queries using `this.apollo.query({...})`, `this.apollo.watchQuery({...})`, and `this.apollo.use(\"...\").query({...})`. GraphQL query strings are defined using a function `$e.J1` which is a minified version of a `gql` tag or similar template literal tag for GraphQL queries."
        },
        {
          "name": "Tippy.js",
          "motivation": "The code explicitly initializes Tippy.js instances using a function `(0,r.Ay)(T, {...})` which matches the Tippy.js initialization API, and refers to Tippy instances via `this.el.nativeElement._tippy`."
        },
        {
          "name": "Wagmi / Viem",
          "motivation": "The codebase includes error messages referencing `wagmi.sh/core`. The setup of Ethereum clients, chains (`Tx = [Ne]`), and transports (`Pt(...)` which maps to `http()` transport) in the `Ry(...)` function (in `9969.js` for `Ax` class) strongly resembles Wagmi/Viem's configuration patterns. The use of `JsonRpcProvider`-like classes for RPC interactions (e.g., `Lp` which is an instance of `Nv` that extends `l5` in `9969.js`) also points to this stack."
        },
        {
          "name": "Web3Modal",
          "motivation": "The code includes numerous custom elements prefixed with `w3m-` (e.g., `w3m-account-button`, `w3m-connect-button`, `w3m-modal`, `w3m-router`) which are characteristic of Web3Modal. It also uses a controller pattern like `we.W3.open()` (mapping to `ModalController.open()`). The `ww` class (likely `EmailConnector` in `9969.js`) interacts with an iframe located at `https://secure.walletconnect.com/sdk`, which is part of Web3Modal's email wallet functionality."
        },
        {
          "name": "Moment.js",
          "motivation": "The code contains references to `momentjs.com` in comments and error messages, e.g., `See http://momentjs.com/guides/#/warnings/define-locale/ for more info.` and `moment construction falls back to js Date()`. It also extensively uses functions and patterns typical of Moment.js for date and time manipulation, like `Fn.apply(null,arguments).parseZone()`, `p.version=\"2.30.1\"`, `p.isDate`, `p.locale`, `p.duration`, `p.isMoment` etc."
        },
        {
          "name": "qrcode",
          "motivation": "The code includes functions like `ne.toCanvas=w.bind(null,E.render)`, `ne.toDataURL=w.bind(null,E.renderToDataURL)`, and `ne.toString=w.bind(null,function(A,T,O){return C.render(A,O)})`. These are characteristic of QR code generation libraries. Specifically, the structure and function names like `renderToDataURL`, `getSymbolSize`, `getPositions`, `applyMask` strongly suggest the `qrcode` library or a similar one."
        },
        {
          "name": "Tippy.js",
          "motivation": "The code contains strings like `'tippy-content'`, `'tippy-backdrop'`, `'tippy-arrow'`, `'tippy-svg-arrow'`, and references to `Re._tippy`. Methods like `Re.destroy()` and `Re.show()` are also present, which are part of the Tippy.js API for tooltips."
        },
        {
          "name": "RxJS",
          "motivation": "The code contains numerous references and patterns typical of RxJS, such as `new r.bkB` (likely `BehaviorSubject` or `Subject`), `pipe`, `subscribe`, operators like `map`, `filter`, `switchMap`, `take`, `catchError`, `finalize`. Classes like `Kn.B` (likely `Subject`) and `r.c` (likely `Observable`) are used extensively."
        }
      ]
    },
    {
      "file": "polyfills.aa0d9bd37968f15b.js",
      "occurences": [
        {
          "name": "Zone.js",
          "motivation": "The code explicitly uses `Zone`, `ZoneAwarePromise`, `Zone.__symbol__`, patches browser APIs (`setTimeout`, `Promise`, `XMLHttpRequest`, `fetch`, event listeners) using Zone.js patterns (`scheduleMacroTask`, `scheduleMicroTask`, `runTask`), and includes checks like `e.Zone`. The purpose of the file seems to be polyfilling/patching APIs for change detection, which is the core function of Zone.js, often used with Angular."
        },
        {
          "name": "Webpack",
          "motivation": "The code starts with the characteristic Webpack chunk loading wrapper `(self.webpackChunkcryptopunks_eth=self.webpackChunkcryptopunks_eth||[]).push([[461],{...}])`, indicating it's part of a Webpack build process."
        },
        {
          "name": "Angular Localize",
          "motivation": "The code defines and uses a `Fe` function assigned to `globalThis.$localize` and uses a specific syntax with colons (`:`) within template literals (`Pe` function), which matches the behavior and setup of `@angular/localize` for internationalization."
        }
      ]
    },
    {
      "file": "runtime.ebf16146865d2e20.js",
      "occurences": [
        {
          "name": "Webpack Runtime",
          "motivation": "The code exhibits common Webpack runtime patterns and functions. Key indicators include:\n- A central `r` function (analogous to `require`).\n- Module cache objects (`v`, `_`).\n- Functions for managing modules and chunks: `r.m` (modules), `r.n` (get Smodule getter), `r.d` (define property getters), `r.o` (hasOwnProperty), `r.p` (public path, initialized to `\"\"`).\n- Chunk loading logic: `r.e` (ensure chunk), `r.u` (construct chunk URL), `r.l` (load chunk via script tag injection), `r.f.j` (jsonp chunk loading functions).\n- The presence of `self.webpackChunkcryptopunks_eth` which is a typical naming convention for Webpack's chunk array."
        }
      ]
    }
  ],
  "urls": [],
  "ethereum": [
    {
      "file": "726.1f838bd3690e05c9.js",
      "occurences": [
        {
          "count": 1
        }
      ]
    },
    {
      "file": "main.92b6878d2a8de995.js",
      "occurences": [
        {
          "count": 2
        }
      ]
    }
  ],
  "fallbacks": []
}