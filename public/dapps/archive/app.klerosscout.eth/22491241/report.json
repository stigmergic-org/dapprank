{
  "version": 2,
  "contentHash": "bafybeigf3twudb5id6ungfpbrtrf6c3acqkidrcqzftwh7cjesuwxpx4pu",
  "timestamp": 1747345175,
  "blockNumber": 22491241,
  "rootMimeType": "inode/directory",
  "totalSize": 20845849,
  "favicon": "",
  "title": "Kleros Scout",
  "distributionPurity": {
    "externalScripts": [
      {
        "file": "index.html",
        "occurences": [
          {
            "type": "link",
            "url": "https://fonts.googleapis.com/css2?family=Orbitron:wght@400;500;600;700&display=swap"
          },
          {
            "type": "link",
            "url": "https://fonts.googleapis.com/css2?family=Oxanium:wght@200..800&display=swap"
          }
        ]
      }
    ],
    "externalMedia": []
  },
  "networkingPurity": [
    {
      "file": "FileViewer.7262fd60.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "[document URI]"
          ],
          "library": "react-doc-viewer / pdf.js",
          "type": "auxiliary",
          "motivation": "The `sh` function, used by various file loaders (`rh`, `ah`, `oh`), calls `fetch(t, {signal: e, headers: s})` where `t` is the `documentURI`. This fetches the content of the document being viewed."
        },
        {
          "method": "fetch",
          "urls": [
            "[document URI]"
          ],
          "library": "react-doc-viewer / pdf.js",
          "type": "auxiliary",
          "motivation": "The `lh` function calls `fetch(a, {method: s || a.startsWith(\"blob:\") ? \"GET\" : \"HEAD\", ...})` where `a` is the `currentDocument.uri`. This likely fetches metadata (like content-type) via a HEAD request before loading the full document."
        },
        {
          "method": "fetch",
          "urls": [
            "[document URI]"
          ],
          "library": "pdf.js (likely)",
          "type": "auxiliary",
          "motivation": "The `Ay` class constructor calls `fetch(i, vy(this._headers, this._withCredentials, this._abortController))` where `i` is the document URL. This appears to be part of the `PDFFetchStream` implementation used for fetching the main PDF document."
        },
        {
          "method": "fetch",
          "urls": [
            "[document URI]"
          ],
          "library": "pdf.js (likely)",
          "type": "auxiliary",
          "motivation": "The `xy` class constructor calls `fetch(s, vy(this._headers, this._withCredentials, this._abortController))` where `s` is the document URL and headers include a `Range` request. This is part of the PDF stream handling for fetching specific byte ranges."
        },
        {
          "method": "XMLHttpRequest",
          "urls": [
            "[document URI]"
          ],
          "library": "react-doc-viewer / pdf.js",
          "type": "auxiliary",
          "motivation": "The `Sd` function provides an `XMLHttpRequest` fallback for fetching data. It's called with the document URI `t`."
        },
        {
          "method": "XMLHttpRequest",
          "urls": [
            "[document URI]"
          ],
          "library": "pdf.js (likely)",
          "type": "auxiliary",
          "motivation": "The `_y` class (`PDFNetworkStream` used in older/fallback scenarios) creates `XMLHttpRequest` instances to fetch the document URL (`this.url`) and supports range requests via `setRequestHeader(\"Range\", ...)`."
        }
      ]
    },
    {
      "file": "FileViewer.85a04169.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "[document URI]"
          ],
          "library": "react-doc-viewer",
          "type": "auxiliary",
          "motivation": "The `sh` function uses `fetch(t)` where `t` is the `documentURI` (derived from the `url` prop passed to the FileViewer component) to fetch the document content for rendering.\n```javascript\nsh=({documentURI:t,signal:e,fileLoaderComplete:i,readerTypeFunction:n,headers:s})=>fetch(t,{signal:e,headers:s}).then(...)\n```"
        },
        {
          "method": "fetch",
          "urls": [
            "[document URI]"
          ],
          "library": "react-doc-viewer",
          "type": "auxiliary",
          "motivation": "The `lh` function uses `fetch(a, {method: s || a.startsWith(\"blob:\") ? \"GET\" : \"HEAD\", ...})` where `a` is the `documentURI` to perform a HEAD request (unless it's a blob or prefetch is specified) to determine the file type from the 'content-type' header if not already known.\n```javascript\nfetch(a,{method:s||a.startsWith(\"blob:\")?\"GET\":\"HEAD\",signal:r,headers:null==t?void 0:t.requestHeaders}).then(...)\n```"
        },
        {
          "method": "fetch",
          "urls": [
            "[CMap URI]"
          ],
          "library": "pdfjs-dist",
          "type": "auxiliary",
          "motivation": "The `kd` class (derived from `Uu` - BaseCMapReaderFactory) calls `_fetchData` which uses the `Sd` helper. `Sd` uses `fetch(t)` where `t` is constructed as `baseUrl + t + (this.isCompressed ? \".bcmap\" : \"\")`. This fetches CMap files required by pdf.js.\n```javascript\nkd extends Uu{_fetchData(t,e){return Sd(t,this.isCompressed?\"arraybuffer\":\"text\")...}}\n// Sd uses fetch\nSd=(t,e=\"text\")=>fetch(i)...\n```"
        },
        {
          "method": "fetch",
          "urls": [
            "[font URI]"
          ],
          "library": "pdfjs-dist",
          "type": "auxiliary",
          "motivation": "The `Ed` class (derived from `Vu` - BaseStandardFontDataFactory) calls `_fetchData` which uses the `Sd` helper. `Sd` uses `fetch(t)` where `t` is constructed as `baseUrl + t`. This fetches standard font data required by pdf.js.\n```javascript\nEd extends Vu{_fetchData(t){return Sd(t,\"arraybuffer\")...}}\n// Sd uses fetch\nSd=(t,e=\"text\")=>fetch(i)...\n```"
        },
        {
          "method": "fetch",
          "urls": [
            "[document URI]"
          ],
          "library": "pdfjs-dist",
          "type": "auxiliary",
          "motivation": "The `Ay` class (part of pdf.js network stream handling for browsers) uses `fetch(i, ...)` where `i` is the document URL to fetch the full PDF document content.\n```javascript\nfetch(i,vy(this._headers,this._withCredentials,this._abortController)).then(...)\n```"
        },
        {
          "method": "fetch",
          "urls": [
            "[document URI]"
          ],
          "library": "pdfjs-dist",
          "type": "auxiliary",
          "motivation": "The `xy` class (part of pdf.js network stream handling for browsers) uses `fetch(s, ...)` where `s` is the document URL, along with a `Range` header, to fetch specific byte ranges of the PDF document.\n```javascript\nthis._headers.append(\"Range\",`bytes=${e}-${i-1}`);\nfetch(s,vy(this._headers,this._withCredentials,this._abortController)).then(...)\n```"
        },
        {
          "method": "XMLHttpRequest",
          "urls": [
            "[document URI]"
          ],
          "library": "pdfjs-dist",
          "type": "auxiliary",
          "motivation": "The `_y` class (part of pdf.js network stream handling) uses `new XMLHttpRequest()` and `e.open(\"GET\", this.url)` as a fallback or alternative mechanism, primarily for Node.js or specific browser scenarios, to fetch the full PDF document content.\n```javascript\nconst e=new XMLHttpRequest;\ne.open(\"GET\",this.url)\n```"
        },
        {
          "method": "XMLHttpRequest",
          "urls": [
            "[CMap URI]",
            "[font URI]"
          ],
          "library": "pdfjs-dist",
          "type": "auxiliary",
          "motivation": "The `Sd` helper function uses `new XMLHttpRequest()` and `s.open(\"GET\", t, !0)` as a fallback mechanism (e.g., if fetch fails or isn't suitable for the context) to fetch CMap or font data URLs.\n```javascript\nconst s=new XMLHttpRequest;s.open(\"GET\",t,!0)\n```"
        }
      ]
    },
    {
      "file": "index-BIqdkLuE.10e54a57.js",
      "occurences": [
        {
          "method": "XMLHttpRequest",
          "urls": [
            "[dynamic URL from options]"
          ],
          "library": "Node.js 'http'/'https' polyfill/bundle (stream-http like)",
          "type": "auxiliary",
          "motivation": "The code contains a polyfill for Node.js's http/https module. Within its `ClientRequest` implementation (`_n`), it creates an `XMLHttpRequest` instance (`u=e._xhr=new o.c.XMLHttpRequest`) and calls `u.open(e._opts.method,e._opts.url,!0)` and `u.send(n)`. The URL (`e._opts.url`) is determined dynamically based on the options passed to the `request` function."
        },
        {
          "method": "fetch",
          "urls": [
            "[dynamic URL from options]"
          ],
          "library": "Node.js 'http'/'https' polyfill/bundle (stream-http like)",
          "type": "auxiliary",
          "motivation": "As an alternative path within the same `ClientRequest` implementation (`_n`), the code uses `fetch`: `o.c.fetch(e._opts.url,{method:e._opts.method,headers:i,body:n||void 0,...})`. The URL (`e._opts.url`) is determined dynamically based on the options passed to the `request` function. This provides a modern alternative to `XMLHttpRequest` within the Node.js http polyfill."
        }
      ]
    },
    {
      "file": "index-BIqdkLuE.9dae7798.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [],
          "library": "Node.js `http` / `https` polyfill",
          "type": "auxiliary",
          "motivation": "The code uses `o.c.fetch(e._opts.url, ...)` within the `_onFinish` method of its `http.ClientRequest` polyfill (`_n`). The URL (`e._opts.url`) is determined dynamically based on the options passed to the `request` or `get` functions of the polyfill. It's used as a backend for the Node.js-style HTTP interface, likely for arbitrary HTTP requests made by the application logic using this polyfill. Since the specific URL depends on runtime usage, it's classified as auxiliary."
        },
        {
          "method": "XMLHttpRequest",
          "urls": [],
          "library": "Node.js `http` / `https` polyfill",
          "type": "auxiliary",
          "motivation": "The code uses `new o.c.XMLHttpRequest` and its methods (`open`, `send`, `setRequestHeader`, etc.) within the `_onFinish` method of its `http.ClientRequest` polyfill (`_n`) as an alternative backend to `fetch`. The URL (`e._opts.url`) passed to `u.open(e._opts.method, e._opts.url, !0)` is determined dynamically from the options provided to the polyfill's `request` or `get` functions. Similar to the fetch usage, it enables arbitrary HTTP requests, classified as auxiliary."
        }
      ]
    },
    {
      "file": "index.0ef55c09.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://api.studio.thegraph.com/query/61738/legacy-curate-gnosis/v0.1.1"
          ],
          "library": "graphql-request",
          "type": "rpc",
          "motivation": "The URL `https://api.studio.thegraph.com/query/61738/legacy-curate-gnosis/v0.1.1` is hardcoded (as `_a`) and used with `GraphQLClient` (as `xa`) from `graphql-request` to make GraphQL queries. Data is passed as a GraphQL query in the request body."
        },
        {
          "method": "fetch",
          "urls": [
            "https://cdn.kleros.link"
          ],
          "library": "N/A",
          "type": "auxiliary",
          "motivation": "The code makes direct `fetch` calls to URLs starting with `https://cdn.kleros.link` (e.g., for metadata `registrationMetaEvidence.URI` or image files). This is likely for fetching assets or metadata files stored on Kleros' CDN. The path part of the URL is dynamic."
        },
        {
          "method": "fetch",
          "urls": [
            "https://kleros-api.netlify.app/.netlify/functions/upload-to-ipfs"
          ],
          "library": "N/A",
          "type": "auxiliary",
          "motivation": "The code makes a `fetch` call to `https://kleros-api.netlify.app/.netlify/functions/upload-to-ipfs` using a POST request with `FormData`. This is for uploading files/data to IPFS via a Kleros-hosted Netlify function."
        },
        {
          "method": "fetch",
          "urls": [
            "https://gateway.ipfs.io/ipfs/"
          ],
          "library": "N/A",
          "type": "auxiliary",
          "motivation": "The URL `https://gateway.ipfs.io/ipfs/` is used as a base for constructing IPFS links (e.g., in `Aw()`). These constructed URLs are then likely fetched, for example, via `new Jy(URL).send()` which internally uses `fetch`."
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.gnosischain.com"
          ],
          "library": "ethers.js",
          "type": "rpc",
          "motivation": "The URL `https://rpc.gnosischain.com` is hardcoded and used to initialize a `JsonRpcProvider` (as `aE`) from `ethers.js`. This provider then uses `fetch` (internally) to make JSON-RPC calls to the Gnosis chain."
        },
        {
          "method": "fetch",
          "urls": [
            "https://gasstation.polygon.technology/v2",
            "https://gasstation-testnet.polygon.technology/v2"
          ],
          "library": "N/A",
          "type": "auxiliary",
          "motivation": "The URLs `https://gasstation.polygon.technology/v2` and `https://gasstation-testnet.polygon.technology/v2` are used in a function `ax(e)` which creates a plugin, likely for `ethers.js`. This plugin then makes `fetch` calls to these gas station endpoints to retrieve fee data. The call is initiated by `new Jy(n.url).send()` within the plugin."
        }
      ]
    },
    {
      "file": "index.5c02c8f2.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://api.studio.thegraph.com/query/61738/legacy-curate-gnosis/v0.1.1"
          ],
          "library": "graphql-request",
          "type": "auxiliary",
          "motivation": "This URL is a hardcoded endpoint for The Graph. The `GraphQLClient` from the `graphql-request` library is instantiated with this URL to send GraphQL queries for fetching data related to 'legacy-curate-gnosis'."
        },
        {
          "method": "fetch",
          "urls": [
            "https://kleros-api.netlify.app/.netlify/functions/upload-to-ipfs"
          ],
          "library": "Custom",
          "type": "auxiliary",
          "motivation": "This URL points to a Kleros-hosted Netlify function. A direct `fetch` call is made with the `POST` method to upload data, likely to IPFS. Operation details like `operation` and `pinToGraph` are passed as query parameters."
        },
        {
          "method": "fetch",
          "urls": [
            "https://gateway.ipfs.io/ipfs/"
          ],
          "library": "Custom",
          "type": "auxiliary",
          "motivation": "This is a base URL for a public IPFS gateway. The code constructs full URLs by appending a Content Identifier (CID) to this base to retrieve files from IPFS. This is observed in functions like `_getAvatar` where IPFS links are resolved through this gateway."
        },
        {
          "method": "fetch",
          "urls": [
            "https://cdn.kleros.link"
          ],
          "library": "Custom",
          "type": "auxiliary",
          "motivation": "This base URL is used to construct full URLs for fetching assets like images (e.g., token logos, visual proofs for CDN entries) from the Kleros CDN. For example, `https://cdn.kleros.link${f(\"Logo\")}` or `https://cdn.kleros.link${S.metadata.policyURI}`."
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.gnosischain.com"
          ],
          "library": "ethers",
          "type": "rpc",
          "motivation": "This URL is hardcoded and used to instantiate an `ethers` `JsonRpcProvider` (specifically `aE` which extends `oE` (JsonRpcApiProvider) and takes a URL) for interacting with the Gnosis chain. It's used for fetching chain data like challenge period duration and arbitration costs."
        },
        {
          "method": "XMLHttpRequest",
          "urls": [
            "https://api.studio.thegraph.com/query/61738/legacy-curate-gnosis/v0.1.1",
            "https://kleros-api.netlify.app/.netlify/functions/upload-to-ipfs",
            "https://gateway.ipfs.io/ipfs/",
            "https://cdn.kleros.link",
            "https://rpc.gnosischain.com"
          ],
          "library": "fetch (polyfill)",
          "type": "auxiliary",
          "motivation": "`XMLHttpRequest` is used internally by the fetch polyfill (module `o.register(\"b8t0Z\", ...)` which defines `fetch` using `new XMLHttpRequest`). The URLs it accesses are determined by the arguments passed to the polyfilled `fetch` function by the application logic, which include the listed URLs used for The Graph queries, IPFS uploads/gateways, Kleros CDN, and RPC calls."
        }
      ]
    }
  ],
  "libraryUsage": [
    {
      "file": "FileViewer.7262fd60.js",
      "occurences": [
        {
          "name": "react",
          "motivation": "The code uses React hooks like `(0,o.useContext)`, `(0,o.forwardRef)`, `(0,o.useEffect)`, `(0,o.useState)`, `(0,o.useMemo)` and JSX syntax like `(0,a.jsx)`."
        },
        {
          "name": "styled-components",
          "motivation": "The code uses tagged template literals for styling (`tl.div`, `tl.button`, `tl.a`), functions like `keyframes`, `ThemeProvider`, `StyleSheetManager`, and patterns like `styled.div.attrs`, strongly indicating the use of styled-components."
        },
        {
          "name": "react-doc-viewer",
          "motivation": "The code defines components like `FileViewer`, `ProxyRenderer`, and uses concepts like `pluginRenderers`, `DocViewerRenderers`, and `DocViewer`. It explicitly imports components related to document viewing and rendering plugins (`o.D`, `o.b`, `l.default`), which are characteristic of `react-doc-viewer`."
        },
        {
          "name": "pdf.js",
          "motivation": "The code references `pdfjsLib` (`oc=globalThis.pdfjsLib={}`) and uses its API components like `getDocument`, `renderTextLayer`, `AnnotationLayer`, and internal structures/constants (e.g., `OPS`, `PasswordResponses`, `RenderingCancelledException`). This is often used directly or wrapped by libraries like `react-pdf` or `react-doc-viewer`."
        },
        {
          "name": "mustache.js",
          "motivation": "The code contains a bundled version of mustache.js, identifiable by comments like `/*!\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\n * http://github.com/janl/mustache.js\n */` and usage of its API like `Gl = new Vl` (where `Vl` is the `Writer` class) and methods like `Gl.render` and `Gl.parse`."
        },
        {
          "name": "react-markdown",
          "motivation": "The code includes a markdown plugin (`6TX10`) that explicitly imports and uses `a.ReactMarkdown` via `(0,r.default)(a.ReactMarkdown)` for rendering markdown content."
        },
        {
          "name": "Buffer",
          "motivation": "The code includes a polyfill/browser implementation of the Node.js `Buffer` module, identifiable by the comment `/*!\n * The buffer module from node.js, for the browser.\n * ...\n */` and definitions like `t.Buffer=h`, `t.SlowBuffer`."
        }
      ]
    },
    {
      "file": "FileViewer.85a04169.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code uses JSX syntax `(0,r.jsx)(...)` and React hooks like `(0,o.useState)`, `(0,o.useEffect)`, `(0,o.useReducer)`, `(0,o.useContext)`, `(0,o.useMemo)`, `(0,o.useCallback)`, `(0,o.useRef)`, `(0,o.forwardRef)`. Parcel's module registration `n.register(\"lBpE3\", ...)` likely bundles React."
        },
        {
          "name": "styled-components",
          "motivation": "The code extensively uses tagged template literals for styling (`r.default.div(h||(h=u\\`...\\`))`, `tl.button(c||(c=Y\\`...\\`))`). It imports `styled-components` features (`tl = Zo(t)` where `Zo` calls `Jo(Xo, t)`, and `Xo` uses `new Ho(...)` which relates to styled component creation). The presence of `ga = ... || \"data-styled\"` and `va = \"data-styled-version\"` attributes further confirms its use."
        },
        {
          "name": "react-doc-viewer",
          "motivation": "The code defines components and functions related to document viewing, such as `DocViewerRenderers`, PDF plugin logic (`pdfPluginLoading`, `pdfPluginPageNumber`), document navigation (`NEXT_DOCUMENT`, `PREVIOUS_DOCUMENT`), and various renderers (Image, CSV, Markdown, PDF via pdfjs). The main exported component `HT` (`(0,o.memo)($T)`) seems to be the `DocViewer` itself."
        },
        {
          "name": "pdfjs-dist",
          "motivation": "The code includes `globalThis.pdfjsLib={}` and populates it with numerous pdf.js specific constants and classes (`OPS`, `AnnotationMode`, `RenderingCancelledException`, `GlobalWorkerOptions`, `getDocument`, etc.). It also fetches CMaps and standard fonts, typical pdf.js operations."
        },
        {
          "name": "mustache.js",
          "motivation": "The code explicitly includes comments identifying `mustache.js` (`/*!\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\n * http://github.com/janl/mustache.js\n */`) and defines objects and functions mirroring the Mustache API (`Gl={name:\"mustache.js\",version:\"4.2.0\"}`, `Gl.render`). It's used for internationalization (`il={en:{...}}`, `Gl.render(s[i],n)` within `Xl` hook)."
        },
        {
          "name": "buffer",
          "motivation": "The code includes a polyfill for the Node.js `Buffer` module, indicated by comments (`/*!\n * The buffer module from node.js, for the browser.\n ... */`) and definitions like `t.Buffer=h`, `h.alloc`, `h.fromByteArray`."
        },
        {
          "name": "react-markdown",
          "motivation": "The code imports `react-markdown` (`n.register(\"Pfr7b\",...)` likely contains it) and uses it via a styled wrapper: `(0,r.default)(a.ReactMarkdown)`. This is used in the Markdown renderer (`d=({mainState:{currentDocument:t}})=>{... (0,s.jsx)(u,{children:i}) ...}`)."
        }
      ]
    },
    {
      "file": "index-BIqdkLuE.10e54a57.js",
      "occurences": [
        {
          "name": "Node.js 'stream' polyfill/bundle",
          "motivation": "The code extensively defines and uses classes like `Readable`, `Writable`, `Duplex`, `Transform`, `PassThrough`, mirroring the Node.js `stream` module API. Functions like `p(Vr,Gr)` resemble `util.inherits` used with stream classes."
        },
        {
          "name": "Node.js 'http'/'https' polyfill/bundle (stream-http like)",
          "motivation": "The code defines a `ClientRequest` class (`_n=u.exports=function(e){...}`) that uses `XMLHttpRequest` (`e._xhr=new o.c.XMLHttpRequest`) and `fetch` (`o.c.fetch(e._opts.url,{...})`) internally to mimic the Node.js `http.request` behavior. It exports functions `s.request` and `s.get` which align with the Node.js `http` module."
        },
        {
          "name": "Node.js 'buffer' polyfill/bundle",
          "motivation": "The code uses `Buffer` extensively (`i=x.Buffer`, `i.from`, `i.isBuffer`, `i.allocUnsafe`). It also includes the `safe-buffer` logic (`/*! safe-buffer. MIT License...`)."
        },
        {
          "name": "Node.js 'util' polyfill/bundle",
          "motivation": "Features like `util.inherits` (pattern `p(e,t)`), `util.format` (`e.format=function(e){...}`), `util.inspect` (`e.inspect=s`), `util.types` (`e.types=N`), and `util.promisify` (`e.promisify=function(e){...}`) are implemented or referenced."
        },
        {
          "name": "Node.js 'events' polyfill/bundle",
          "motivation": "The code defines a `v.EventEmitter` class with methods like `on`, `emit`, `removeListener`, `once`, `listenerCount`, matching the Node.js `events` module."
        },
        {
          "name": "Node.js 'url' polyfill/bundle",
          "motivation": "The code imports `Tn` using `const Tn=(0,o.a)(i.u)` and later uses it as `a` in `a.parse(e)` within the `s.request` function, consistent with using the Node.js `url.parse` function."
        }
      ]
    },
    {
      "file": "index-BIqdkLuE.9dae7798.js",
      "occurences": [
        {
          "name": "Parcel Bundler Runtime",
          "motivation": "The code includes a runtime wrapper (`parcelRequirec45d`) characteristic of modules bundled by Parcel."
        },
        {
          "name": "Node.js `events` polyfill",
          "motivation": "The code defines and uses a class named `EventEmitter` (`v.EventEmitter=v`) with methods like `on`, `emit`, `removeListener`, mirroring the Node.js `events` module functionality. It's assigned via `y.exports` and used by stream classes."
        },
        {
          "name": "Node.js `util` polyfill",
          "motivation": "The code includes functions like `inherits`, `inspect`, `format`, `deprecate`, `promisify`, and type checking functions (`isArray`, `isBuffer`, etc.) commonly found in the Node.js `util` module. This is visible in the `L` variable and its associated functions (`p=f.exports`, `e.inherits=p`, `e.inspect=s`, etc.)."
        },
        {
          "name": "Node.js `stream` polyfill",
          "motivation": "The code defines `Readable`, `Writable`, `Duplex`, `Transform`, and `PassThrough` classes (`sn.Readable=sn`, `sn.Writable=wr()`, `sn.Duplex=_r()`, `sn.Transform=Ur`, `sn.PassThrough=Yr`) mimicking the Node.js `stream` module API. It uses `EventEmitter` and buffer logic extensively."
        },
        {
          "name": "Node.js `buffer` polyfill",
          "motivation": "The code references `Buffer` (`var i=x.Buffer`), checks for buffer instances (`i.isBuffer(e)`), and uses buffer methods like `from`, `alloc`, `copy`, `toString`. This suggests a polyfill for the Node.js `Buffer` class, potentially using `safe-buffer` (explicitly mentioned in comments `/*! safe-buffer...`) or a similar implementation (`Rr={exports:{}}`, `Or()` function)."
        },
        {
          "name": "Node.js `string_decoder` polyfill",
          "motivation": "The code defines a `StringDecoder` class (`Ar.StringDecoder=r`) used within the stream implementation (`this.decoder=new u(t.encoding)`), matching the functionality of the Node.js `string_decoder` module."
        },
        {
          "name": "Node.js `http` / `https` polyfill",
          "motivation": "The code defines `request`, `get`, `ClientRequest`, `IncomingMessage` (`s.request`, `s.get`, `s.ClientRequest=t`, `s.IncomingMessage=r.IncomingMessage`) and uses `XMLHttpRequest` (`t=new o.c.XMLHttpRequest`) and `fetch` (`o.c.fetch`) internally to mimic the Node.js `http` and `https` module interfaces for making HTTP requests in the browser."
        },
        {
          "name": "Node.js `url` polyfill",
          "motivation": "The code uses `Tn=(0,o.a)(i.u)` and later `a.parse(e)` within the `http` polyfill's `request` function, which mirrors the behavior of the Node.js `url.parse` method for handling URL strings."
        }
      ]
    },
    {
      "file": "index-DFn6bF3J.1b835ef2.js",
      "occurences": [
        {
          "name": "Parcel Loader",
          "motivation": "The code uses `parcelRequirec45d` and `e.register`, which are characteristic patterns of the Parcel bundler's module loading runtime system."
        },
        {
          "name": "Node.js `https` module wrapper/polyfill",
          "motivation": "The code imports modules referenced as `c.s` and `c.r`. It iterates over properties of `c.s` (`t` in the inner function) and calls methods like `t.request.call` and `t.get.call`. It also uses `r.parse` (`c.r.parse`). This pattern, especially the `request` and `get` methods and URL parsing, strongly suggests interaction with Node.js's built-in `https` and `url` modules, likely polyfilled or shimmed for a browser environment. The code defines wrapper functions that enforce the HTTPS protocol before calling the underlying `https.request` or `https.get`."
        }
      ]
    },
    {
      "file": "index-DFn6bF3J.9086af96.js",
      "occurences": [
        {
          "name": "HTTPS Request Client (Bundled)",
          "motivation": "```javascript\nvar p=e(\"aztYz\");\n// ...\nvar t=p.s,r=p.r;\n// ...\ni(e){if(\"string\"==typeof e&&(e=r.parse(e)),e.protocol||(e.protocol=\"https:\"),\"https:\"!==e.protocol)throw new Error(...)\n// ...\no.request=function(e,r){return e=i(e),t.request.call(this,e,r)}\no.get=function(e,r){return e=i(e),t.get.call(this,e,r)}\n```\nThe code imports a module (`p` from `aztYz`) which provides methods for parsing URLs (`p.r.parse`) and making HTTP requests (`p.s.request`, `p.s.get`). It wraps these methods, specifically enforcing the 'https:' protocol. This pattern suggests a bundled version of a library providing Node.js-like `https` and `url` functionality for the browser."
        }
      ]
    },
    {
      "file": "index.0ef55c09.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code includes `react-jsx-runtime.production.min.js`, `react.production.min.js`, and `react-dom.production.min.js`. It uses React's core functionalities like `createElement`, `useState`, `useEffect`, `useRef`, `useCallback`, `useMemo`, `useContext`, `forwardRef`, and JSX syntax (implicitly)."
        },
        {
          "name": "styled-components",
          "motivation": "The code contains `styled.div`, `createGlobalStyle` (as `Ne`), and references to `data-emotion` attributes (styled-components can use Emotion's stylis parser). The module `o(\"k1UaX\")` is identified as `styled-components`."
        },
        {
          "name": "OverlayScrollbars",
          "motivation": "The code explicitly mentions `OverlayScrollbars` and uses related CSS classes like `os-theme-dark`. The main OverlayScrollbars logic seems to be bundled."
        },
        {
          "name": "React Router DOM",
          "motivation": "The code contains a comment `React Router DOM v6.22.3`. It uses React Router concepts like `useNavigate`, `useLocation` (implied by `Cr()`), and `MemoryRouter` (implied by `er()` hash history)."
        },
        {
          "name": "graphql-request",
          "motivation": "The code initializes `GraphQLClient` (as `xa` from `o(\"jlWHo\")`) and uses its `request` and `rawRequest` methods. The `gql` template literal tag is also present."
        },
        {
          "name": "@tanstack/react-query",
          "motivation": "The code uses `QueryClient` (as `sW`), `QueryClientProvider` (as `Io`), `useQuery` (implicitly through `Uo`), and related concepts like `QueryCache`, `MutationCache`."
        },
        {
          "name": "ethers.js",
          "motivation": "The code includes or references `Interface` (as `Wm`), `Contract` (as `Jg` or `$g`), `JsonRpcProvider` (as `aE`), `BrowserProvider` (likely `QC` as `Eip1193Provider`), `SigningKey`, `Transaction` (as `bw`), `AbiCoder` (`Bm`), `TypedDataEncoder` (`gy`), and various utility functions typical of ethers.js (e.g., address formatting, BigNumber operations via `BigInt`)."
        },
        {
          "name": "bs58",
          "motivation": "The module `o(\"5m7wF\")` is `base58-universal`, which provides base58 encoding/decoding, commonly used for Solana addresses. It uses `base58.encode` and `base58.decode`."
        },
        {
          "name": "buffer-layout",
          "motivation": "The code explicitly mentions `buffer-layout` and uses its classes like `Layout.struct`, `Layout.u8`, `Layout.blob`, `Layout.seq`, etc., for serializing and deserializing binary data, common in Solana program interactions. This is found in the `o(\"bP71r\")` module."
        },
        {
          "name": "@solana/web3.js",
          "motivation": "The code uses `PublicKey` (as `xM`), `Transaction` (as `jM`), `sendAndConfirmTransaction` (implied by `GM`), `SystemProgram` (as `tN`), `StakeProgram` (as `lL`), `NonceAccount`, `BpfLoader`. These are core components of the Solana Web3.js library."
        },
        {
          "name": "react-toastify",
          "motivation": "The code explicitly mentions `react-toastify` in comments and uses related components and CSS classes like `Toastify__toast-container`, `Toastify__toast`, `ToastContainer` (as `oQ`)."
        },
        {
          "name": "humanize-duration",
          "motivation": "The code includes the `humanize-duration` library, identifiable by its unique language map structure (`KS`) and formatting functions. It's used for displaying durations in a human-readable format."
        },
        {
          "name": "react-select",
          "motivation": "The code contains components and props characteristic of `react-select`, such as `SelectContainer`, `Control`, `ValueContainer`, `Option`, `Menu`, `MultiValue`, and props like `getOptionLabel`, `getOptionValue`, `isMulti`. This is found in the `Select` component defined as `ZU`."
        },
        {
          "name": "uuid",
          "motivation": "The code uses a function `jB()` which maps to `qB()` which in turn maps to `UB()`. The `UB` function is from module `o(\"jzxXn\")` which implements UUID v4 generation logic."
        },
        {
          "name": "cross-fetch / whatwg-fetch",
          "motivation": "The modules `o(\"fDJax\")` (cross-fetch) and `o(\"aVedK\")` (whatwg-fetch) are present in the bundle. These are polyfills that provide the `fetch` API and related `Headers`, `Request`, `Response` objects in environments where they might not be natively available, or to ensure consistent behavior. They are used by other libraries like graphql-request and ethers.js."
        },
        {
          "name": "@noble/hashes",
          "motivation": "The code includes modules from `@noble/hashes` for various hashing algorithms like SHA256 (`WI.sha256`), SHA512 (`nT.sha512`), Keccak256 (`XB.keccak_256`), RIPEMD160 (`mc.ripemd160`), HMAC (`tl.hmac`), and PBKDF2 (`bl.pbkdf2`)."
        },
        {
          "name": "@noble/curves",
          "motivation": "The code includes modules from `@noble/curves` for elliptic curve cryptography, specifically `secp256k1` (`yR.secp256k1`) and `ed25519` (`tT.ed25519`), including point operations and signature schemes."
        },
        {
          "name": "borsh",
          "motivation": "The code uses `serialize` and `deserialize` functions from the `borsh` library (module `o(\"ZI9uT\")`), along with `BinaryReader` and `BinaryWriter`, for binary object serialization and deserialization, often used with Solana."
        },
        {
          "name": "react-modal",
          "motivation": "The code includes the `react-modal` library (`o(\"hWzKy\")`), identifiable by its component structure (`ModalPortal`, `Modal`), props (`isOpen`, `onRequestClose`, `appElement`), and CSS class names like `ReactModal__Overlay` and `ReactModal__Content`."
        }
      ]
    },
    {
      "file": "index.5c02c8f2.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code contains copyright notices for React (e.g., `react-jsx-runtime.production.min.js`, `react.production.min.js`, `react-dom.production.min.js`), mentions of `React.createElement`, React-specific symbols like `Symbol.for(\"react.element\")`, common hooks (`useState`, `useEffect`, `useContext`), and the version string `\"18.2.0\"`."
        },
        {
          "name": "scheduler (React internal)",
          "motivation": "The code includes a copyright notice for \"scheduler.production.min.js\" and uses functions like `unstable_scheduleCallback` and `unstable_now`, which are part of React's internal scheduler mechanism."
        },
        {
          "name": "styled-components",
          "motivation": "The code references `data-styled-version=\"5.3.11\"`, uses terms like `styledComponentId`, and includes functions like `createGlobalStyle` and `css` (often aliased or used within tagged template literals), which are characteristic of the styled-components library."
        },
        {
          "name": "react-is",
          "motivation": "A copyright notice for \"react-is.production.min.js\" (version 16.13.1) is present, along with exported functions such as `isElement`, `isFragment`, and `isValidElementType` used for React type checking."
        },
        {
          "name": "@emotion/react",
          "motivation": "The presence of the internal string `__EMOTION_TYPE_PLEASE_DO_NOT_USE__`, patterns related to the `css` prop, and style injection logic managed through a cache are indicative of @emotion/react."
        },
        {
          "name": "@emotion/cache",
          "motivation": "The code includes logic for managing a style cache (`e.cache`) in conjunction with Emotion's style injection, which is a core responsibility of @emotion/cache when used with @emotion/react."
        },
        {
          "name": "react-markdown",
          "motivation": "The library is explicitly exported as `ReactMarkdown` (found by searching `o.register(\"isoSz\",`). It also emits warnings prefixed with `[react-markdown] Warning:`, a common practice for this library."
        },
        {
          "name": "unified",
          "motivation": "The code shows usage of `unified()` as a function call, typically in the pattern `(0,a.unified)().use(...)`. This is the core API of the unified processing ecosystem, which `react-markdown` utilizes."
        },
        {
          "name": "remark-parse",
          "motivation": "The `fromMarkdown` function, a key export of `remark-parse` (or its underlying micromark parser), is used within the `unified` pipeline (specifically inside `o.register(\"iTtex\",`) for parsing Markdown input into an mdast tree."
        },
        {
          "name": "remark-rehype",
          "motivation": "The code shows `.use(l.default, ...)` in the unified pipeline after Markdown parsing (module `o.register(\"a1Kq3\",`), where `l.default` corresponds to `remark-rehype` for converting Markdown AST (mdast) to HTML AST (hast)."
        },
        {
          "name": "rehype-react",
          "motivation": "The code uses a function `(0,h.childrenToReact)` (in module `o.register(\"dVoHe\",`) and a `.use(f.default, e)` pattern (in module `o.register(\"isoSz\",`) in the unified pipeline after `remark-rehype`, consistent with `rehype-react` for transforming HAST into React elements."
        },
        {
          "name": "vfile",
          "motivation": "The code contains an explicit instantiation `const r=new(0,s.VFile);` (in module `o.register(\"isoSz\",`), which is the virtual file class from the vfile ecosystem, commonly used by `unified` and its plugins."
        },
        {
          "name": "prop-types",
          "motivation": "The code includes the warning string \"Calling PropTypes validators directly is not supported by the `prop-types` package\", indicating its presence or a related check for development warnings."
        },
        {
          "name": "graphql-request",
          "motivation": "The code defines and uses classes like `GraphQLClient`, `ClientError`, and a `gql` tagged template literal function (module `o.register(\"g7C2m\",`), which are core components of the `graphql-request` library."
        },
        {
          "name": "@tanstack/query-core (React Query Core)",
          "motivation": "The code defines classes such as `QueryCache` (variable `HV`), `MutationCache` (variable `nW`), and `QueryClient` (variable `sW`). It also uses concepts like `queryKey`, `fetchQuery`, `prefetchQuery`, and `notifyManager.batchCalls`, all characteristic of React Query's core logic."
        },
        {
          "name": "@tanstack/react-query",
          "motivation": "The presence of `QueryClientProvider` component (variable `Io`) and usage patterns that build upon `@tanstack/query-core` for React applications (e.g., hooks like `Uo` which wraps `useQuery` logic) indicate this library."
        },
        {
          "name": "react-router-dom",
          "motivation": "The code includes a copyright notice for \"React Router DOM v6.22.3\" and defines router components and contexts (e.g., `Mr` function resembling `Router` or `BrowserRouter`, `xr` context resembling `NavigationContext`)."
        },
        {
          "name": "@remix-run/router",
          "motivation": "A copyright notice for \"@remix-run/router v1.15.3\" is present. This library provides the core routing logic utilized by `react-router-dom`."
        },
        {
          "name": "ethers",
          "motivation": "The code includes numerous Ethereum-specific functionalities such as classes `Interface`, `JsonRpcProvider`, `BrowserProvider`, `Wallet` (implicitly via `Signer` behavior), ABI encoding/decoding utilities, transaction creation (`Transaction.from`), signing logic, ENS resolution (`resolveName`, `lookupAddress`), and constants like `ZeroAddress`."
        },
        {
          "name": "bn.js",
          "motivation": "The code contains patterns for arbitrary-precision integer arithmetic, such as `e.isBN` checks and methods like `toArray('le')`. `bn.js` is commonly used by Ethereum libraries like older versions of ethers.js or for similar purposes."
        },
        {
          "name": "bs58",
          "motivation": "The code includes the standard Base58 alphabet string `\"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"` (variable `xw` in module `o.register(\"7LTy6\",`) and functions for `baseEncode` and `baseDecode`."
        },
        {
          "name": "buffer (polyfill)",
          "motivation": "The code contains copyright notices for \"safe-buffer\" and \"the buffer module from node.js, for the browser.\" It polyfills the Node.js Buffer API (e.g., `Buffer.from`, `Buffer.alloc`) for browser environments."
        },
        {
          "name": "fetch (polyfill/ponyfill)",
          "motivation": "The code includes a fetch implementation (in module `o.register(\"b8t0Z\",`) that sets `fetch.ponyfill = true` and defines `fetch`, `Headers`, `Request`, and `Response` classes, internally using `XMLHttpRequest`. This suggests a polyfill or ponyfill for the Fetch API."
        },
        {
          "name": "text-encoding (polyfill)",
          "motivation": "The code defines `TextEncoder` and `TextDecoder` classes (in module `o.register(\"7bUqw\",`), indicating a polyfill for the Text Encoding API for environments that may not natively support it."
        },
        {
          "name": "@noble/hashes",
          "motivation": "The code includes a copyright notice for \"noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com)\" and contains implementations of various cryptographic hash functions such as SHA256, SHA512, Keccak, RIPEMD160, HMAC, PBKDF2, and Scrypt."
        },
        {
          "name": "@noble/curves",
          "motivation": "The code includes a copyright notice for \"noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com)\" and contains implementations of elliptic curve cryptography, including secp256k1, ed25519, and operations like point arithmetic and signature schemes."
        },
        {
          "name": "borsh",
          "motivation": "The code defines classes `BinaryReader`, `BinaryWriter` and functions `serialize`, `deserialize`, along with error handling like `BorshError`. These are characteristic of the Borsh (Binary Object Representation Serializer for Hashing) serialization format."
        },
        {
          "name": "buffer-layout",
          "motivation": "The code defines classes like `Layout`, `UInt`, `Int`, `Blob`, `Structure`, `Sequence` and mentions \"buffer-layout on GitHub\". These are distinctive features of the `buffer-layout` library used for binary data manipulation, often in Solana projects."
        },
        {
          "name": "eventemitter3",
          "motivation": "The code implements a typical EventEmitter pattern (class `ZB`) with an internal `_events` property, and methods like `on`, `emit`, `removeListener`, `addListener`, resembling the `eventemitter3` library structure."
        },
        {
          "name": "jayson/jayson-promise (or similar JSON-RPC client)",
          "motivation": "The code includes a class (`HB`) and helper functions (like `zB`) for constructing and sending JSON-RPC 2.0 requests. This pattern is common in JSON-RPC client libraries such as Jayson."
        },
        {
          "name": "react-toastify",
          "motivation": "The code contains CSS class names prefixed with `Toastify__` (e.g., `Toastify__toast-container`, `Toastify__toast--default`, `Toastify__progress-bar`) and logic for managing toast notifications (e.g., `toast.success`, `toast.error`, `toast.dismiss`), indicative of `react-toastify`."
        },
        {
          "name": "@floating-ui/react-dom or react-popper",
          "motivation": "The code includes sophisticated logic for positioning floating elements (like menus) relative to anchors, calculating viewport dimensions, and handling scroll/resize events (e.g., function `xF` which resembles `computePosition` or Popper.js logic). This is characteristic of libraries like Floating UI or React Popper."
        },
        {
          "name": "clsx",
          "motivation": "The code defines a utility function (`qG` or `HG`) for conditionally joining CSS class names based on input, a common pattern provided by libraries like `clsx` or `classnames`."
        },
        {
          "name": "react-select",
          "motivation": "The code defines an extensive component (`ZU`) managing complex state for select inputs (e.g., `focusedOption`, `selectValue`, `inputValue`), with methods like `selectOption`, `clearValue`, `popValue`, and numerous ARIA attributes. It also uses CSS class prefixes like `react-select-` and an `instancePrefix:\"react-select-\"`, strongly indicating the `react-select` library."
        },
        {
          "name": "OverlayScrollbars / overlayscrollbars-react",
          "motivation": "The code includes a copyright notice for \"OverlayScrollbars Version: 2.7.1\" and uses specific data attributes like `data-overlayscrollbars-initialize` and class names such as `os-theme-dark`. The React component `Wn` is the `OverlayScrollbarsComponent`."
        }
      ]
    },
    {
      "file": "url-Dkx9cvHv.06e765f8.js",
      "occurences": [
        {
          "name": "punycode",
          "motivation": "The code includes a full implementation of punycode (v1.4.1), including functions like `decode`, `encode`, `toASCII`, and `toUnicode`. This is evident from the variable `h` being assigned an object with these properties and the associated logic (`function L`, `function E`, etc.) within the self-invoking function wrapper."
        },
        {
          "name": "querystring",
          "motivation": "The code defines functions for encoding (`w`, aliased as `d`) and decoding (`b`, aliased as `g`) query strings, mimicking the behavior of Node.js's `querystring` module or similar libraries. These functions handle splitting/joining by delimiters (`&`, `=`), encoding/decoding components, and managing array values. The `j` object explicitly maps `decode`, `encode`, `parse`, `stringify` to these internal functions."
        },
        {
          "name": "url",
          "motivation": "The code defines a `URL` parsing and manipulation class (`function I`) with methods like `parse`, `format`, `resolve`, and `resolveObject`. This mirrors the functionality of Node.js's `url` module or the browser's `URL` API. It handles protocols, hosts, pathnames, queries, hashes, etc. It also references the global `URL` and `URLSearchParams` (`Z.URL`, `Z.URLSearchParams`) suggesting it might act as a polyfill or wrapper."
        }
      ]
    },
    {
      "file": "url-Dkx9cvHv.0c2a9ee4.js",
      "occurences": [
        {
          "name": "URL Parsing Library (Node.js `url` polyfill/bundle)",
          "motivation": "The code defines functions and classes like `parse`, `format`, `resolve`, `resolveObject`, `Url`, `URL`, `URLSearchParams`, and includes logic for `punycode` and `querystring` parsing (`K = j`, `j={decode:b,encode:w,...}`). This closely mirrors the API and functionality of the Node.js `url` module, suggesting it's either a direct bundle, a polyfill, or a similar implementation for URL manipulation in the browser."
        },
        {
          "name": "punycode",
          "motivation": "The code explicitly includes a section with `h={version:\"1.4.1\",ucs2:{decode:T,encode:I},decode:L,encode:E,toASCII:...,toUnicode:...}` and mentions `punycode` (`r.punycode=h`). This section implements the Punycode standard (RFC 3492) for encoding/decoding internationalized domain names."
        },
        {
          "name": "querystring",
          "motivation": "The code defines functions `b=g=function(t,e,r,n){...}` (parsing/decoding) and `w=d=function(t,e,r,n){...}` (stringifying/encoding) which mimic the behavior of Node.js's `querystring` module for handling URL query strings. These are later assigned to `j={decode:b,encode:w,parse:g,stringify:d,...}` and used by the URL parsing logic (`K=j`)."
        }
      ]
    }
  ],
  "urls": [],
  "ethereum": [
    {
      "file": "index.0ef55c09.js",
      "occurences": [
        {
          "count": 7
        }
      ]
    },
    {
      "file": "index.5c02c8f2.js",
      "occurences": [
        {
          "count": 7
        }
      ]
    }
  ],
  "fallbacks": []
}