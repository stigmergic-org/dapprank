{
  "version": 2,
  "contentHash": "bafybeie35n6rokcysg6e7vfwhebxgrbrdmnnla4qjvqby7vn3yups3ldqa",
  "timestamp": 1745612171,
  "blockNumber": 22348216,
  "rootMimeType": "inode/directory",
  "totalSize": 40783264,
  "favicon": "favicon.ico",
  "title": "Eternal Safe",
  "distributionPurity": {
    "externalScripts": [],
    "externalMedia": []
  },
  "networkingPurity": [
    {
      "file": "_next/static/chunks/1391.15d3cf4c11f5a688.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://explorer.walletconnect.com/"
          ],
          "library": "@walletconnect/modal",
          "type": "auxiliary",
          "motivation": "The code calls `eg.ExplorerCtrl.getWallets(...)` and `eg.ExplorerCtrl.getRecomendedWallets()`. These functions within the WalletConnect Modal library (`eg` object) are intended to fetch wallet listings from the WalletConnect Explorer API. The parameters passed, including `version: 2`, suggest interaction with the V2 Explorer API. Although the direct `fetch` call isn't visible in this snippet, it's the assumed underlying mechanism used by the library for this purpose. The exact endpoint isn't specified, so the base URL is provided."
        }
      ]
    },
    {
      "file": "_next/static/chunks/1a023be7.5290fb15ed9a658c.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "Variable: t.providerConnectionInfo.url",
            "Variable: t.rpcUrl"
          ],
          "library": "Ethers.js",
          "type": "rpc",
          "motivation": "The code instantiates an Ethers.js `JsonRpcProvider` (likely aliased as `P.c`) using URLs derived from variables `t.providerConnectionInfo.url` or `t.rpcUrl` within the `getEns` function. Ethers.js providers use `fetch` (or potentially `XMLHttpRequest`) internally to make JSON-RPC requests to the specified Ethereum node URL."
        },
        {
          "method": "fetch",
          "urls": [
            "Variable: t.publicRpcUrl",
            "Variable: t.rpcUrl"
          ],
          "library": "Ethers.js / Wallet Provider",
          "type": "rpc",
          "motivation": "The `wallet_addEthereumChain` RPC method is invoked via the connected wallet's provider (e.g., in `chainNotInWallet` function, called by `setChain`). This method is passed RPC URLs derived from variables `t.publicRpcUrl` or `t.rpcUrl`. The underlying mechanism uses `fetch` or `XMLHttpRequest` initiated by the wallet provider, directed to the specified RPC endpoint."
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.blocknative.com/boost"
          ],
          "library": "Blocknative SDK",
          "type": "auxiliary",
          "motivation": "The code utilizes the Blocknative SDK (`getBlocknativeSdk`, `getBNMulitChainSdk`). The constant `eh` explicitly defines the URL `https://rpc.blocknative.com/boost`. This URL is likely used internally by the SDK via `fetch` for transaction boosting or related services."
        },
        {
          "method": "WebSocket",
          "urls": [],
          "library": "Blocknative SDK",
          "type": "auxiliary",
          "motivation": "The code subscribes to Blocknative's `transactions$` observable (`l.transactions$.subscribe(handleTransactionUpdates)`). This strongly implies that the Blocknative SDK establishes a WebSocket connection to receive real-time transaction updates. The specific WebSocket endpoint URL is not defined in this code snippet but is managed internally by the SDK."
        }
      ]
    },
    {
      "file": "_next/static/chunks/2312.3d5a1b95f5f1d558.js",
      "occurences": [
        {
          "method": "WebSocket",
          "urls": [
            "wss://api.blocknative.com/v0"
          ],
          "library": "sturdy-websocket",
          "type": "auxiliary",
          "motivation": "The `Blocknative` class constructor initializes a `SturdyWebSocket` instance (`_=new n.Z(y||\"wss://api.blocknative.com/v0\", ...)`). The first argument `y` is derived from the `apiUrl` option passed during initialization. If `apiUrl` is not provided, it defaults to `wss://api.blocknative.com/v0`. This WebSocket is used for real-time communication with the Blocknative backend service."
        }
      ]
    },
    {
      "file": "_next/static/chunks/2673.e416a7c117b7ba45.js",
      "occurences": [
        {
          "method": "GET",
          "urls": [
            "https://cdn.live.ledger.com/cryptoassets/evm/{chainId}/erc20-signatures.json"
          ],
          "library": "axios (via @ledgerhq/hw-app-eth)",
          "type": "auxiliary",
          "motivation": "The code calls `AD.get(f)` where `f` is constructed using `cryptoassetsBaseURL` (`https://cdn.live.ledger.com/cryptoassets`) and a path like `/evm/{chainId}/erc20-signatures.json`. This call is part of the `findERC20SignaturesInfo` function used by the Ledger service."
        },
        {
          "method": "GET",
          "urls": [
            "https://cdn.live.ledger.com/plugins/ethereum.json"
          ],
          "library": "axios (via @ledgerhq/hw-app-eth)",
          "type": "auxiliary",
          "motivation": "The code calls `AD.get(`${a}/plugins/ethereum.json`)` where `a` is `pluginBaseURL` (`https://cdn.live.ledger.com`). This is used within `loadInfosForContractMethod` to fetch plugin information."
        },
        {
          "method": "GET",
          "urls": [
            "https://nft.api.live.ledger.com/v1/ethereum/{chainId}/contracts/{contractAddress}"
          ],
          "library": "axios (via @ledgerhq/hw-app-eth)",
          "type": "auxiliary",
          "motivation": "The code calls `AD.get(d)` where `d` is constructed using `nftExplorerBaseURL` (`https://nft.api.live.ledger.com/v1/ethereum`) and a path like `/{chainId}/contracts/{contractAddress}`. This is part of the `getNFTInfo` function."
        },
        {
          "method": "GET",
          "urls": [
            "https://nft.api.live.ledger.com/v1/ethereum/{chainId}/contracts/{contractAddress}/plugin-selector/{selector}"
          ],
          "library": "axios (via @ledgerhq/hw-app-eth)",
          "type": "auxiliary",
          "motivation": "The code calls `AD.get(d)` where `d` is constructed using `nftExplorerBaseURL` (`https://nft.api.live.ledger.com/v1/ethereum`) and a path like `/{chainId}/contracts/{contractAddress}/plugin-selector/{selector}`. This is part of the `loadNftPlugin` function."
        },
        {
          "method": "GET",
          "urls": [
            "https://nft.api.live.ledger.com/v1/names/ens/forward/{name}?challenge={challenge}"
          ],
          "library": "axios (via @ledgerhq/hw-app-eth)",
          "type": "auxiliary",
          "motivation": "The `signDomainResolution` function constructs this URL using a configured base (`https://nft.api.live.ledger.com/v1/names/ens/forward/`) and calls it via `AD.request({method:\"GET\", url: d})` to get signature data for ENS forward resolution."
        },
        {
          "method": "GET",
          "urls": [
            "https://nft.api.live.ledger.com/v1/names/ens/reverse/{address}?challenge={challenge}"
          ],
          "library": "axios (via @ledgerhq/hw-app-eth)",
          "type": "auxiliary",
          "motivation": "The `signAddressResolution` function constructs this URL using a configured base (`https://nft.api.live.ledger.com/v1/names/ens/reverse/`) and calls it via `AD.request({method:\"GET\", url: d})` to get signature data for ENS reverse resolution."
        }
      ]
    },
    {
      "file": "_next/static/chunks/2905-3721cebcccdffcf1.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://safe-transaction-${chainId}.safe.global/..."
          ],
          "library": "@safe-global/safe-service-client",
          "type": "auxiliary",
          "motivation": "The function `fetchRecommendedParams` calls `(0,u.postSafeGasEstimation)`, which likely makes a POST request to the Safe Transaction Service API to get gas estimations for a transaction. The exact URL depends on the chain ID and specific endpoint, often related to `/estimations/`."
        },
        {
          "method": "fetch",
          "urls": [
            "https://safe-transaction-${chainId}.safe.global/..."
          ],
          "library": "@safe-global/safe-service-client",
          "type": "auxiliary",
          "motivation": "The function `proposeTx` calls `(0,p.a)(n, a, e, o)`, likely corresponding to `proposeTransaction` in the Safe Service Client. This sends the transaction details and signatures (if any) via a POST request to the Safe Transaction Service API, typically an endpoint like `/api/v1/safes/${safeAddress}/multisig-transactions/`."
        },
        {
          "method": "fetch",
          "urls": [],
          "library": "ethers.js/viem (via @safe-global/safe-core-sdk or wallet provider)",
          "type": "rpc",
          "motivation": "The function `dispatchOnChainSigning` calls `i.approveTransactionHash(s)`. This involves interacting with the Safe contract on-chain via the connected wallet provider (e.g., Metamask) to send an `eth_sendTransaction` RPC call."
        },
        {
          "method": "fetch",
          "urls": [],
          "library": "ethers.js/viem (via @safe-global/safe-core-sdk or wallet provider)",
          "type": "rpc",
          "motivation": "The function `dispatchTxExecution` calls `x.executeTransaction(e, t)`. This triggers an `eth_sendTransaction` RPC call via the connected wallet provider to execute the Safe transaction on-chain."
        },
        {
          "method": "fetch",
          "urls": [],
          "library": "ethers.js/viem (via @safe-global/safe-core-sdk or wallet provider)",
          "type": "rpc",
          "motivation": "The function `dispatchSpendingLimitTxExecution` calls `d.executeAllowanceTransfer(...)`. This interacts with the Spending Limit module contract on-chain, sending an `eth_sendTransaction` RPC call via the connected wallet provider."
        },
        {
          "method": "fetch",
          "urls": [],
          "library": "ethers.js/viem (via @safe-global/safe-core-sdk or wallet provider)",
          "type": "rpc",
          "motivation": "The `useRecommendedNonce` hook calls `e.getNonce()`. This likely translates to an `eth_getTransactionCount` RPC call via the connected wallet provider to fetch the nonce for the Safe address."
        },
        {
          "method": "fetch",
          "urls": [],
          "library": "ethers.js/viem (via @safe-global/safe-core-sdk)",
          "type": "rpc",
          "motivation": "The `createNewSpendingLimitTx` function calls `i.isModuleEnabled(o)`. This involves an `eth_call` RPC request via the wallet provider to read the state of the Safe contract to check if a module is enabled."
        }
      ]
    },
    {
      "file": "_next/static/chunks/3202.5f23c9140ed2f0a5.js",
      "occurences": [
        {
          "method": "fetch | XMLHttpRequest",
          "urls": [
            "Configured RPC URLs (from arguments/data)"
          ],
          "library": "web3-onboard",
          "type": "rpc",
          "motivation": "The `createOnboard` function configures `web3-onboard` with chain objects containing `rpcUrl: null==n?void 0:n[e.chainId]` and `publicRpcUrl: e.publicRpcUri.value`. These URLs are passed to the web3-onboard library, which uses them (likely via internal fetch/XHR calls, potentially through libraries like ethers.js or viem) to communicate with Ethereum JSON-RPC endpoints for blockchain interactions."
        },
        {
          "method": "WebSocket",
          "urls": [
            "WalletConnect V2 Relay Servers (implicit)"
          ],
          "library": "@web3-onboard/walletconnect",
          "type": "auxiliary",
          "motivation": "The `walletConnectV2` function initializes the WalletConnect v2 connector `(0,c.Z)` from `@web3-onboard/walletconnect`. This initialization process establishes WebSocket connections to WalletConnect's relay network (e.g., `wss://relay.walletconnect.com` by default, dependent on the `projectId`) to facilitate communication between the dApp and the connected mobile wallet."
        },
        {
          "method": "fetch | XMLHttpRequest",
          "urls": [
            "Configured Trezor appUrl (from config `l.sg`)"
          ],
          "library": "@web3-onboard/trezor",
          "type": "auxiliary",
          "motivation": "The Trezor connector `(0,d.Z)` is initialized with configuration including `appUrl: l.sg`. This URL is likely used internally by the Trezor connector library to make network requests (assumed to be fetch or XHR) potentially for interacting with the Trezor Connect service, fetching metadata, or facilitating communication via a bridge."
        }
      ]
    },
    {
      "file": "_next/static/chunks/5811.987125dd4dc8fef8.js",
      "occurences": [
        {
          "method": "WebSocket",
          "urls": [
            "wss://www.walletlink.org/rpc"
          ],
          "library": "rxjs",
          "type": "auxiliary",
          "motivation": "The `WalletSDKConnection` class creates an instance of `RxWebSocket` (`new v.RxWebSocket(n+\"/rpc\",M)`), passing the `linkAPIUrl` (defaulting to `https://www.walletlink.org`) concatenated with `/rpc`. The `RxWebSocket` class constructor then transforms this URL from `http(s)` to `ws(s)` (`this.url=e.replace(/^http/,\"ws\")`) and creates a WebSocket connection (`new this.WebSocketClass(this.url)`). This establishes a WebSocket connection for communication with the WalletLink relay server."
        },
        {
          "method": "fetch",
          "urls": [],
          "library": "CoinbaseWalletSDK",
          "type": "rpc",
          "motivation": "The `WalletSDKRelayAbstract` class has a method `makeEthereumJSONRPCRequest` which uses `window.fetch(t,{method:\"POST\",...})`. The URL `t` is the `jsonRpcUrl` passed to this method. This `jsonRpcUrl` is configured in the `CoinbaseWalletProvider` either via constructor options (`e.jsonRpcUrl`) or dynamically via storage (`this._storage.getItem(K)` where `K` is `\"DefaultJsonRpcUrl\"`). This fetch call is used to send standard Ethereum JSON-RPC requests to the configured node URL. The specific URL is variable and determined at runtime."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.wallet.coinbase.com/rpc/v2/desktop/chrome"
          ],
          "library": "Preact",
          "type": "auxiliary",
          "motivation": "The `TryExtensionContent` component contains a callback `i=(0,u.useCallback)(()=>{window.open(\"https://api.wallet.coinbase.com/rpc/v2/desktop/chrome\",\"_blank\")},[])`. While this uses `window.open` to navigate the user, it effectively directs the browser to fetch the content from this URL, which is the installation link for the Coinbase Wallet Chrome extension."
        }
      ]
    },
    {
      "file": "_next/static/chunks/684.84362a0ac694971b.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "e()"
          ],
          "library": "Application Logic",
          "type": "rpc",
          "motivation": "The code defines a function `getHardwareWalletProvider` which returns an object with a `request` method. This method uses `fetch` to make a `POST` request. The body is a JSON-RPC payload (`{jsonrpc:\"2.0\",id:\"42\",method:t,params:n}`). The URL is determined by calling the function `e()`, which is passed into `getHardwareWalletProvider`. Given the JSON-RPC structure and the context of providing hardware wallet functionality, this is classified as an RPC call, though the specific endpoint depends on the runtime value of `e()`."
        }
      ]
    },
    {
      "file": "_next/static/chunks/7075.e7140c75667dc8cc.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [],
          "library": "ethers.js",
          "type": "rpc",
          "motivation": "The `JsonRpcProvider` class uses a helper `fetchJson` function which internally calls the native `fetch`. The URL is determined by the `connection` property passed during provider instantiation or defaults (e.g., `http://localhost:8545`), and is used to send JSON-RPC requests. The specific URL isn't hardcoded in this chunk."
        },
        {
          "method": "fetch",
          "urls": [
            "https://gateway.ipfs.io/ipfs/"
          ],
          "library": "ethers.js",
          "type": "auxiliary",
          "motivation": "The `Resolver.prototype.getAvatar` function can call `fetchJson` (which wraps `fetch`) with URLs derived from ENS text records. If the avatar record is an IPFS URI (`ipfs://...`), it constructs a gateway URL like `https://gateway.ipfs.io/ipfs/{hash}` to fetch the resource."
        },
        {
          "method": "fetch",
          "urls": [],
          "library": "ethers.js",
          "type": "auxiliary",
          "motivation": "The `Resolver.prototype.getAvatar` function can call `fetchJson` (which wraps `fetch`) with URLs derived from ENS text records. These can include standard HTTPS URLs or data URIs directly, or URLs derived from ERC721/ERC1155 token metadata URIs. The specific URLs depend on the ENS record content."
        }
      ]
    },
    {
      "file": "_next/static/chunks/9343.0d66ff3a77c521ec.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://explorer-api.walletconnect.com/w3m/v1/getDesktopListings",
            "https://explorer-api.walletconnect.com/w3m/v1/getMobileListings",
            "https://explorer-api.walletconnect.com/w3m/v1/getInjectedListings",
            "https://explorer-api.walletconnect.com/w3m/v1/getAllListings",
            "https://explorer-api.walletconnect.com/w3m/v1/getWalletImage/",
            "https://explorer-api.walletconnect.com/w3m/v1/getAssetImage/"
          ],
          "library": "WalletConnectModal",
          "type": "auxiliary",
          "motivation": "The `dist_w` function uses `fetch` to make calls. The base URL `j` is defined as `'https://explorer-api.walletconnect.com'`. This function is called by methods within the `U` object (`getDesktopListings`, `getMobileListings`, etc.), which are subsequently used by `ExplorerCtrl` (`R`) to fetch wallet listings and image URLs from the WalletConnect explorer API. Query parameters like `projectId`, `sdkType`, `sdkVersion` and others based on function arguments are appended dynamically."
        }
      ]
    },
    {
      "file": "_next/static/chunks/9627-00c4ffb20ca58149.js",
      "occurences": [
        {
          "method": "XMLHttpRequest",
          "urls": [
            "Variable URL determined by input"
          ],
          "library": "Papaparse",
          "type": "auxiliary",
          "motivation": "The embedded Papaparse code contains a `NetworkStreamer` class (function `l`) which uses `i = new XMLHttpRequest` to fetch data. The URL is passed as `this._input` to the streamer (`i.open(..., this._input, ...)`). This functionality is triggered when Papaparse's `parse` function is called with a URL string as input and the `download: true` option in the configuration. While the `react-csv-reader` usage in this specific snippet primarily uses `FileReader`, the Papaparse library included has this networking capability."
        }
      ]
    },
    {
      "file": "_next/static/chunks/pages/_app-cd8fbfe0c719e16b.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://cloudflare-eth.com/",
            "https://mainnet.infura.io/v3/{projectId}",
            "https://goerli.infura.io/v3/{projectId}",
            "https://sepolia.infura.io/v3/{projectId}",
            "https://polygon-mainnet.infura.io/v3/{projectId}",
            "https://polygon-mumbai.infura.io/v3/{projectId}",
            "https://optimism-mainnet.infura.io/v3/{projectId}",
            "https://optimism-goerli.infura.io/v3/{projectId}",
            "https://arbitrum-mainnet.infura.io/v3/{projectId}",
            "https://arbitrum-goerli.infura.io/v3/{projectId}",
            "https://eth-mainnet.alchemyapi.io/v2/{apiKey}",
            "https://eth-goerli.g.alchemy.com/v2/{apiKey}",
            "https://polygon-mainnet.g.alchemy.com/v2/{apiKey}",
            "https://polygon-mumbai.g.alchemy.com/v2/{apiKey}",
            "https://arb-mainnet.g.alchemy.com/v2/{apiKey}",
            "https://arb-goerli.g.alchemy.com/v2/{apiKey}",
            "https://opt-mainnet.g.alchemy.com/v2/{apiKey}",
            "https://opt-goerli.g.alchemy.com/v2/{apiKey}",
            "https://rpc.ankr.com/eth/{apiKey}",
            "https://rpc.ankr.com/eth_ropsten/{apiKey}",
            "https://rpc.ankr.com/eth_rinkeby/{apiKey}",
            "https://rpc.ankr.com/eth_goerli/{apiKey}",
            "https://rpc.ankr.com/polygon/{apiKey}",
            "https://rpc.ankr.com/arbitrum/{apiKey}",
            "https://eth-goerli.gateway.pokt.network/v1/lb/{applicationId}",
            "https://eth-mainnet.gateway.pokt.network/v1/lb/{applicationId}",
            "https://poa-kovan.gateway.pokt.network/v1/lb/{applicationId}",
            "https://poly-mainnet.gateway.pokt.network/v1/lb/{applicationId}",
            "https://polygon-mumbai-rpc.gateway.pokt.network/v1/lb/{applicationId}",
            "https://eth-rinkeby.gateway.pokt.network/v1/lb/{applicationId}",
            "https://eth-ropsten.gateway.pokt.network/v1/lb/{applicationId}",
            "https://api.etherscan.io/api",
            "https://api-goerli.etherscan.io/api",
            "https://api-sepolia.etherscan.io/api",
            "https://api.polygonscan.com/api",
            "https://api-testnet.polygonscan.com/api",
            "https://api.arbiscan.io/api",
            "https://api-goerli.arbiscan.io/api",
            "https://api-optimistic.etherscan.io/api",
            "https://api-goerli-optimistic.etherscan.io/api",
            "dynamic RPC endpoint"
          ],
          "library": "ethers.js (or underlying providers like InfuraProvider, AlchemyProvider, EtherscanProvider etc.)",
          "type": "rpc",
          "motivation": "Ethers.js uses `fetchJson` (which wraps `fetch`) internally for making JSON-RPC calls to various providers (Infura, Alchemy, Etherscan, Pocket, Ankr, Cloudflare, generic JsonRpcProvider). The specific URL depends on the configured provider and network. The code includes logic to construct URLs for these services based on network and API keys."
        },
        {
          "method": "fetch",
          "urls": [
            "dynamic metadata URL (e.g., http, ipfs)"
          ],
          "library": "ethers.js",
          "type": "auxiliary",
          "motivation": "Ethers.js's `Resolver` class uses `fetchJson` (which wraps `fetch`) to fetch ENS avatar metadata from URLs retrieved via RPC calls. These URLs can point to various resources (HTTP APIs, IPFS gateways)."
        },
        {
          "method": "fetch",
          "urls": [
            "https://gateway.ipfs.io/ipfs/{cid}"
          ],
          "library": "ethers.js",
          "type": "auxiliary",
          "motivation": "The ENS Resolver logic within Ethers.js constructs IPFS gateway URLs (`https://gateway.ipfs.io/ipfs/`) when resolving ENS avatars or content hashes stored on IPFS."
        },
        {
          "method": "fetch",
          "urls": [
            "https://safe-client.safe.global/v1/chains/{chainId}/safes/{address}",
            "https://safe-client.safe.global/v1/chains/{chainId}/safes/{address}/incoming-transfers/",
            "https://safe-client.safe.global/v1/chains/{chainId}/safes/{address}/module-transactions/",
            "https://safe-client.safe.global/v1/chains/{chainId}/safes/{address}/multisig-transactions/",
            "https://safe-client.safe.global/v1/chains/{chainId}/safes/{address}/balances/{currency}",
            "https://safe-client.safe.global/v1/balances/supported-fiat-codes",
            "https://safe-client.safe.global/v1/chains/{chainId}/owners/{address}/safes",
            "https://safe-client.safe.global/v1/chains/{chainId}/safes/{address}/collectibles",
            "https://safe-client.safe.global/v2/chains/{chainId}/safes/{address}/collectibles",
            "https://safe-client.safe.global/v1/chains/{chainId}/safes/{safe_address}/transactions/history",
            "https://safe-client.safe.global/v1/chains/{chainId}/safes/{safe_address}/transactions/queued",
            "https://safe-client.safe.global/v1/chains/{chainId}/transactions/{transactionId}",
            "https://safe-client.safe.global/v2/chains/{chainId}/safes/{safe_address}/multisig-transactions/estimations",
            "https://safe-client.safe.global/v1/chains/{chainId}/safes/{safe_address}/nonces",
            "https://safe-client.safe.global/v1/chains/{chainId}/transactions/{safe_address}/propose",
            "https://safe-client.safe.global/v1/chains",
            "https://safe-client.safe.global/v1/chains/{chainId}",
            "https://safe-client.safe.global/v1/chains/{chainId}/safe-apps",
            "https://safe-client.safe.global/v1/chains/{chainId}/about/master-copies",
            "https://safe-client.safe.global/v1/chains/{chainId}/data-decoder",
            "https://safe-client.safe.global/v1/chains/{chainId}/safes/{safe_address}/messages",
            "https://safe-client.safe.global/v1/chains/{chainId}/messages/{message_hash}",
            "https://safe-client.safe.global/v1/chains/{chainId}/safes/{safe_address}/messages",
            "https://safe-client.safe.global/v1/chains/{chainId}/messages/{message_hash}/signatures",
            "https://safe-client.safe.global/v1/chains/{chainId}/delegates",
            "https://safe-client.safe.global/v1/register/notifications"
          ],
          "library": "Safe Service Client",
          "type": "auxiliary",
          "motivation": "The Safe Service Client (`safe-service-client`) library uses `fetchData` and `postEndpoint` (wrapping `fetch`) to interact with the Safe Transaction Service API. The base URL defaults to `https://safe-client.safe.global`, and various API endpoints are called for fetching Safe info, transactions, balances, proposing transactions, etc. Both GET and POST methods are used."
        },
        {
          "method": "fetch",
          "urls": [
            "https://safe-client.safe.global/v1/chains/{chainId}/notifications/devices/{uuid}/safes/{safe_address}",
            "https://safe-client.safe.global/v1/chains/{chainId}/notifications/devices/{uuid}"
          ],
          "library": "Safe Service Client",
          "type": "auxiliary",
          "motivation": "The Safe Service Client (`safe-service-client`) library uses `deleteEndpoint` (wrapping `fetch` with DELETE method) to interact with the Safe Transaction Service API for unregistering devices or safes from notifications."
        },
        {
          "method": "WebSocket",
          "urls": [
            "wss://mainnet.infura.io/ws/v3/{projectId}",
            "wss://goerli.infura.io/ws/v3/{projectId}",
            "wss://sepolia.infura.io/ws/v3/{projectId}",
            "wss://polygon-mainnet.infura.io/ws/v3/{projectId}",
            "wss://polygon-mumbai.infura.io/ws/v3/{projectId}",
            "wss://optimism-mainnet.infura.io/ws/v3/{projectId}",
            "wss://optimism-goerli.infura.io/ws/v3/{projectId}",
            "wss://arbitrum-mainnet.infura.io/ws/v3/{projectId}",
            "wss://arbitrum-goerli.infura.io/ws/v3/{projectId}",
            "wss://eth-mainnet.ws.alchemyapi.io/v2/{apiKey}",
            "wss://eth-goerli.g.alchemy.com/v2/{apiKey}",
            "wss://polygon-mainnet.g.alchemy.com/v2/{apiKey}",
            "wss://polygon-mumbai.g.alchemy.com/v2/{apiKey}",
            "wss://arb-mainnet.g.alchemy.com/v2/{apiKey}",
            "wss://arb-goerli.g.alchemy.com/v2/{apiKey}",
            "wss://opt-mainnet.g.alchemy.com/v2/{apiKey}",
            "wss://opt-goerli.g.alchemy.com/v2/{apiKey}",
            "ws://localhost:8546",
            "dynamic WebSocket endpoint"
          ],
          "library": "ethers.js (WebSocketProvider, AlchemyWebSocketProvider, InfuraWebSocketProvider)",
          "type": "rpc",
          "motivation": "The `WebSocketProvider` class (part of ethers.js) establishes a WebSocket connection to the specified URL for receiving real-time blockchain events via JSON-RPC subscriptions (`eth_subscribe`). Alchemy and Infura specific providers construct their respective WebSocket URLs."
        },
        {
          "method": "fetch",
          "urls": [
            "dynamic Sentry DSN endpoint"
          ],
          "library": "Sentry",
          "type": "auxiliary",
          "motivation": "The Sentry SDK (`@sentry/browser`) uses `makeFetchTransport` internally, which relies on `fetch` to send error reports and telemetry data to the Sentry server specified in the DSN configuration."
        },
        {
          "method": "XMLHttpRequest",
          "urls": [
            "dynamic Sentry DSN endpoint"
          ],
          "library": "Sentry",
          "type": "auxiliary",
          "motivation": "The Sentry SDK (`@sentry/browser`) uses `makeXHRTransport` as a fallback transport mechanism, which relies on `XMLHttpRequest` to send error reports and telemetry data to the Sentry server specified in the DSN configuration."
        },
        {
          "method": "fetch",
          "urls": [],
          "library": "ethers.js",
          "type": "rpc",
          "motivation": "The code imports and likely utilizes `ethers.js` (v5.7.0), which internally uses `fetch` (via its own `fetchJson` utility, seen referenced as `ef.fetchJson`) for making JSON-RPC calls to Ethereum nodes. The specific URLs are not hardcoded in this snippet and depend on the provider configuration (e.g., `getDefaultProvider`, `JsonRpcProvider`)."
        },
        {
          "method": "fetch",
          "urls": [
            "https://relay.gelato.digital/tasks/status/"
          ],
          "library": "custom",
          "type": "auxiliary",
          "motivation": "The code defines a function `getRelayTxStatus` which explicitly calls `fetch` with a URL constructed using `https://relay.gelato.digital/tasks/status/` and a task ID to check the status of relayed transactions."
        }
      ]
    },
    {
      "file": "_next/static/chunks/pages/balances-0dfc73dfaa4d35d3.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "/graphql"
          ],
          "library": "@apollo/client",
          "type": "auxiliary",
          "motivation": "The code uses `@apollo/client`'s `useQuery` hook (`(0,M.CG)(B.vi)` and `(0,i.CG)(r.iL,a())`). Apollo Client uses `fetch` internally to make GraphQL requests. The specific URL is not present in this code snippet but is typically configured during Apollo Client initialization. Based on Safe{Wallet} architecture, it likely communicates with a backend service (like the Safe Client Gateway) often exposed at a relative `/graphql` path or an absolute URL configured elsewhere. This fetches essential application data like balances and token lists, hence 'auxiliary'."
        }
      ]
    },
    {
      "file": "_next/static/chunks/pages/new-safe/load-426eda54f7ff5d71.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [],
          "library": "ethers.js / viem (via SWR)",
          "type": "rpc",
          "motivation": "The hook `useAddressResolver` uses `(0,i.Z)` (identified as `useSWR`) which calls `(0,s.oC)(a,u)`. `a` is likely a provider obtained via `(0,t.tM)()`. This function likely performs ENS name resolution (e.g., `provider.lookupAddress` or `provider.resolveName`), which involves JSON-RPC calls to an Ethereum node. The specific URL depends on the provider configuration (wallet RPC or custom RPC URL)."
        },
        {
          "method": "fetch",
          "urls": [],
          "library": "ethers.js / viem",
          "type": "rpc",
          "motivation": "The `validateSafeAddress` function calls `(0,eu.f9)(b,e,s)`. `b` is likely a provider obtained via `(0,eh.tM)()`. This function seems designed to check if an address is a valid Safe by interacting with the blockchain (e.g., checking contract code or calling a method), which requires JSON-RPC calls. The specific URL depends on the provider configuration."
        },
        {
          "method": "fetch",
          "urls": [],
          "library": "ethers.js / viem (via SWR)",
          "type": "rpc",
          "motivation": "Inside `steps_SafeOwnerStep`, the code uses `(0,ep.Z)` (identified as `useSWR`) which calls `(0,eu.f9)(p,n.address,t)`. `p` is likely a provider obtained via `(0,eh.vY)()`. This call fetches Safe information (owners, threshold) by interacting with the Safe contract on the blockchain via JSON-RPC calls. The specific URL depends on the provider configuration."
        }
      ]
    },
    {
      "file": "_next/static/chunks/polyfills-c67a75d1b6f99dc8.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [],
          "library": "Fetch API Polyfill (whatwg-fetch or similar)",
          "type": "auxiliary",
          "motivation": "The code polyfills the global `fetch` function. The polyfill either wraps the native `fetch` (`Yu = it(\"fetch\")`) or implements it using `XMLHttpRequest` (`_l` function). The specific URL is passed dynamically as the first argument (`t`) to `fetch` by the application code using this polyfill, and is not hardcoded within this file."
        },
        {
          "method": "XMLHttpRequest",
          "urls": [],
          "library": "Fetch API Polyfill (whatwg-fetch or similar)",
          "type": "auxiliary",
          "motivation": "The fetch polyfill implementation (`_l` function) uses `XMLHttpRequest` internally (`var i=new XMLHttpRequest`, `i.open(o.method,o.url,!0)`) to perform the network request when native fetch is unavailable or needs patching. The URL (`o.url`) is derived from the arguments passed to the polyfilled `fetch` function by the consuming application code and is not defined statically within this polyfill script."
        }
      ]
    },
    {
      "file": "sw.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "/fallback-ba59bcac333a1e0f.js"
          ],
          "library": "native",
          "type": "self",
          "motivation": "The code explicitly calls `importScripts(\"/fallback-ba59bcac333a1e0f.js\")`, which triggers a network request (fetch) to load the specified script relative to the service worker's origin."
        },
        {
          "method": "fetch",
          "urls": [
            "./workbox-83b758e3.js"
          ],
          "library": "native/loader",
          "type": "self",
          "motivation": "The custom `define` module loader at the beginning of the script uses `importScripts(n)` (where `n` resolves to `./workbox-83b758e3.js` relative to the service worker's location) to load the main Workbox module dependency, triggering a network fetch."
        },
        {
          "method": "fetch",
          "urls": [
            "/_offline"
          ],
          "library": "Workbox",
          "type": "self",
          "motivation": "The code calls `e.precacheAndRoute([{url:\"/_offline\", ...}])`. The `precacheAndRoute` function from Workbox fetches the specified URL during the service worker's install phase to ensure it's available in the cache for offline use. This fetch is relative to the service worker's origin."
        }
      ]
    }
  ],
  "libraryUsage": [
    {
      "file": "_next/static/chunks/061e6b60.7663215c22dc49e1.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code uses the `self.webpackChunk_N_E` structure, which is characteristic of applications bundled using Webpack, specifically within a Next.js environment (`_N_E`). This chunk is being pushed onto the Webpack runtime array."
        }
      ]
    },
    {
      "file": "_next/static/chunks/1076.0496b42b26a30195.js",
      "occurences": [
        {
          "name": "RxJS",
          "motivation": "The code extensively uses RxJS concepts and functions like `Subject`, `Observable` (imported as `o.y`), `fromEvent`, `pipe`, `map`, `mergeMap`, `subscribe`, `lift`, `unsubscribe`, `next`, `error`, `complete`, and `asObservable`. The structure `function(r,t,e){e.d(t,{Subject:function(){return f},fromEvent:function(){return ...` explicitly exports `Subject` and `fromEvent`, which are core parts of RxJS."
        }
      ]
    },
    {
      "file": "_next/static/chunks/1121.49fc8bb4a58a9c9f.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code uses the `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)` structure, which is characteristic of Webpack's module bundling system used in Next.js applications (`_N_E` often stands for Next Export)."
        }
      ]
    },
    {
      "file": "_next/static/chunks/1307.4c729f0fb936c33f.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code uses the `self.webpackChunk_N_E` structure, which is characteristic of JavaScript code bundled by Webpack, commonly used in frameworks like Next.js (indicated by `_N_E`)."
        }
      ]
    },
    {
      "file": "_next/static/chunks/1391.15d3cf4c11f5a688.js",
      "occurences": [
        {
          "name": "@walletconnect/modal",
          "motivation": "The code extensively uses components and controllers prefixed with `wcm-` (e.g., `WcmModal`, `WcmQrCode`, `wcm-modal-header`, `wcm-wallet-button`) and interacts with a central object `eg` containing controllers like `eg.jb` (ModalCtrl), `eg.AV` (RouterCtrl), `eg.ExplorerCtrl`, `eg.OptionsCtrl`, `eg.ConfigCtrl`, `eg.ThemeCtrl`, `eg.ToastCtrl`. These are characteristic patterns of the WalletConnect Modal library integration."
        },
        {
          "name": "lit-element/lit-html",
          "motivation": "The code defines custom elements extending `lit_element_s` (which itself extends a base `u` likely from `@lit/reactive-element`), uses decorators like `@custom_element_e`, `@property_n`, `@state_t`, and employs tagged template literals `X\\`...\\`` and `ee\\`...\\`` for rendering, along with directives like `es()` (classMap) and `if_defined_l()`. These are core features of the Lit library (LitElement for components, lit-html for templating)."
        },
        {
          "name": "motion",
          "motivation": "The code includes animation functions like `animate_es_animate`, uses `Animation` class, `stopAnimation`, `performance.now`, `requestAnimationFrame`, animation controls (`withControls`), easing definitions (`cubicBezier`, `steps`, `eb` map), and duration/delay handling (`ef`). These patterns strongly suggest the use of the Motion One (`@motionone/dom`) animation library."
        },
        {
          "name": "qrcode",
          "motivation": "The code contains functions like `eP.create` (qrcode.create), `eP.toCanvas`, `eP.toDataURL`, `eP.toString`, and internal logic for QR code generation including modes (`NUMERIC`, `ALPHANUMERIC`, `BYTE`, `KANJI`), error correction levels (`l.M`, `l.from`), masking (`m.applyMask`, `m.getBestMask`), version handling (`f.from`, `f.getBestVersionForData`), and Reed-Solomon encoding (`g`). This indicates the usage of a QR code generation library, consistent with the `qrcode` npm package."
        }
      ]
    },
    {
      "file": "_next/static/chunks/1449.daefac41794f8285.js",
      "occurences": [
        {
          "name": "Trezor Connect",
          "motivation": "The code imports and utilizes functions and constants clearly associated with the Trezor Connect library, such as `TrezorConnect`, `parseConnectSettings`, `postMessage` for iframe communication, error codes (`ERRORS.TypedError`), event types (`IFRAME.INIT`, `POPUP.CLOSED`, `UI_EVENT`, `DEVICE_EVENT`, etc.), and configuration settings like `iframeSrc`, `popupSrc`, `manifest`. Specific modules referenced like `@trezor/connect`, `trezor-connect-src` in query parameters, and functions like `initPopupManager` further confirm its use."
        },
        {
          "name": "Chrome Extension APIs",
          "motivation": "The code explicitly checks for the Chrome extension environment (`typeof chrome !== 'undefined' && chrome.runtime && typeof chrome.runtime.onConnect !== 'undefined'`) and uses various `chrome.*` APIs like `chrome.runtime.onConnect.addListener`, `chrome.runtime.id`, `chrome.tabs.update`, `chrome.tabs.get`, `chrome.tabs.query`, `chrome.tabs.create`, `chrome.windows.getCurrent`, `chrome.windows.create`, and `chrome.runtime.lastError`. This indicates direct interaction with the browser's extension system."
        },
        {
          "name": "WebUSB API",
          "motivation": "The code interacts with the WebUSB API, specifically checking for `navigator.usb` and calling `navigator.usb.requestDevice`. It also sets the `allow=\"usb\"` attribute on the iframe, further indicating the use of WebUSB for device communication."
        }
      ]
    },
    {
      "file": "_next/static/chunks/1465.53a17cbd4435ba3b.js",
      "occurences": [
        {
          "name": "Ledger Hardware Transport (@ledgerhq/hw-transport or similar)",
          "motivation": "```markdown\nThe code defines numerous custom error classes (e.g., `TransportError`, `TransportStatusError`, `DisconnectedDevice`, `TransportOpenUserCancelled`, `TransportWebUSBGestureRequired`, `LockedDeviceError`, `LedgerAPIError`, `LedgerAPI4xx`, `LedgerAPI5xx`, `WrongAppForCurrency`). These error names are highly specific to interactions with hardware wallets, particularly Ledger devices, and their communication protocols (transports like WebUSB, Bluetooth). The `TransportStatusError` class specifically handles status codes returned by Ledger devices (e.g., `0x6985` or `27013` for user denial, `0x5515` or `21781` for locked device). This strongly indicates the use of a Ledger hardware transport library.\n```"
        }
      ]
    },
    {
      "file": "_next/static/chunks/1582-9931604a951bcb94.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code uses `i.forwardRef`, `i.useRef`, `i.useEffect`, `i.useCallback`, which are common patterns and hooks in React (`i` is likely a minified reference to the React library). It also uses JSX syntax (`(0,w.jsx)`)."
        },
        {
          "name": "Material UI (MUI)",
          "motivation": "The code explicitly references MUI components and utilities like `MuiCollapse`, `theme.transitions.create`, `(0,v.Z)(\"MuiCollapse\"...)`, `getCollapseUtilityClass`, `(0,s.ZP)(\"div\",{name:\"MuiCollapse\"...})`. The component being defined (`Collapse`) is a standard MUI component."
        },
        {
          "name": "date-fns",
          "motivation": "The code includes functions characteristic of `date-fns`, such as `format`, `formatRelative`, `toDate`, `startOfDay`, `getTimezoneOffsetInMilliseconds`, `subMilliseconds`, `getUTCWeekYear`, `getUTCISOWeekYear`, `startOfUTCWeek`, `startOfUTCISOWeek`. An English locale object (`en-US`) with `formatDistance`, `formatLong`, `formatRelative`, `localize`, and `match` properties, consistent with `date-fns` locale structure, is defined (variable `u`)."
        },
        {
          "name": "Webpack",
          "motivation": "The code starts with `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)`, which is the standard way Webpack bundles and loads JavaScript chunks."
        }
      ]
    },
    {
      "file": "_next/static/chunks/1956.37a3561100e3d558.js",
      "occurences": [
        {
          "name": "Next.js",
          "motivation": "The code uses the `self.webpackChunk_N_E` structure, which is the standard way Next.js lazy-loads chunks built with Webpack. This specific chunk only defines an SVG string."
        }
      ]
    },
    {
      "file": "_next/static/chunks/1a023be7.5290fb15ed9a658c.js",
      "occurences": [
        {
          "name": "Svelte",
          "motivation": "The code extensively uses Svelte's component lifecycle functions (`onMount`, `onDestroy`), reactivity (`component_subscribe`), templating (`element`, `attr`, `text`, `space`), component management (`SvelteComponent`, `init$1`, `create_component`, `mount_component`, `destroy_component`), and transition functions (`transition_in`, `transition_out`, `create_in_transition`, `create_out_transition`, `fade`, `fly`)."
        },
        {
          "name": "Ethers.js",
          "motivation": "The code utilizes Ethers.js features such as `BigNumber` (likely `R.O$`), `JsonRpcProvider` (likely `P.c` from `n(88718)`), and `Contract` (likely `Z.CH` from `n(64146)`). Functions like `getBalance`, `switchChain`, `getEns`, `updateChainRPC`, `gweiToWeiHex`, `toHexString`, and contract interactions (`balanceOf`, `symbol` in `updateSecondaryTokens`) strongly indicate the use of Ethers.js for interacting with the Ethereum blockchain."
        },
        {
          "name": "Blocknative SDK",
          "motivation": "The code includes explicit function calls like `getBlocknativeSdk` and `getBNMulitChainSdk`. It defines a Blocknative RPC URL (`eh = \"https://rpc.blocknative.com/boost\"`). The `handleTransactionUpdates` function processes transaction events, and the code references subscribing to `transactions$`, which are characteristic features of the Blocknative SDK for transaction monitoring and notifications."
        },
        {
          "name": "Joi",
          "motivation": "The code uses a validation library (assigned to variable `T`, likely imported via `n(42705)`) with methods like `T.object()`, `T.string()`, `T.number()`, `T.array()`, `T.func()`, `.required()`, `.optional()`, `.label()`, `.items()`, `.valid()`, `.uri()`, `.unknown()`, `.allow()`, `.alternatives()`, `.try()`. This pattern is characteristic of the Joi schema validation library. Functions like `validateWallet`, `validateString`, `validateInit`, `validateTx`, etc., use this library (`(0,A.Gu)` likely calls the validation)."
        },
        {
          "name": "RxJS",
          "motivation": "The code heavily uses RxJS patterns and operators. It creates Observables/Subjects (likely `new u.x` and `new d.X`), uses the `pipe` method extensively, and employs various RxJS operators such as `map` (likely `k.j`), `filter` (likely `y.h`), `tap` (likely `L.B`), `switchMap` (likely `j.w`), `shareReplay` (likely `b.O`), `take` (likely `$.q`), `distinctUntilChanged` (likely `v.x`), `startWith` (likely `b.O`), `firstValueFrom` (likely `f.z`), and `takeUntil` (likely `m.R`)."
        },
        {
          "name": "Bowser",
          "motivation": "The code calls `M.getParser(window.navigator.userAgent)` (where `M` is imported via `n(51206)`). This is the standard API for the Bowser library, used here to detect the user's operating system, browser, and device type."
        },
        {
          "name": "svelte-i18n",
          "motivation": "The code imports and uses functions commonly associated with `svelte-i18n` such as `_` (likely `$t` or `$_,` aliased as `S._`), `locale.set` (likely `S.SP.set`), `addMessages` (likely `S.m6`), `init` (likely `S.S1`), `getLocaleFromNavigator` (likely `S.F5`), and `t` (likely `H.U2`). These are used for internationalization and localization of strings."
        }
      ]
    },
    {
      "file": "_next/static/chunks/2079.9853949b34447bb8.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code uses `(0,s.jsx)` which is the transpiled form of JSX, indicating the use of the React library for building user interfaces."
        },
        {
          "name": "Webpack",
          "motivation": "The code uses `self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)` and internal module references like `r(85893)`, which are characteristic patterns of code bundled using Webpack."
        },
        {
          "name": "Gnosis Safe related library/SDK",
          "motivation": "The code imports and uses functions/components likely related to Gnosis Safe operations, indicated by variable names like `safe`, `threshold`, `newOwner`, `removedOwner`, and the component context of replacing a Safe owner (`ReplaceOwnerTxBuilder`, `removedOwner:{address:n}`, `threshold:r.threshold`). The specific library (`@safe-global/safe-apps-sdk`, `@safe-global/safe-core-sdk-kit`, etc.) cannot be determined definitively from this snippet alone, but the context points strongly towards interaction with Safe functionalities."
        }
      ]
    },
    {
      "file": "_next/static/chunks/211.56dbdea7dd4cfb94.js",
      "occurences": [
        {
          "name": "RxJS",
          "motivation": "The code extensively uses RxJS concepts and classes like `Observable` (defined in `61514`), `Subject` and `AnonymousSubject` (defined in `70211`), `Subscriber` and `SafeSubscriber` (defined in `10979`), and `Subscription` (defined in `98760`). It also imports and uses utility functions and error types common in RxJS (`ObjectUnsubscribedError`, `UnsubscriptionError`, `pipe`, `identity`, etc.)."
        }
      ]
    },
    {
      "file": "_next/static/chunks/2114-af69a04ce0bd80d3.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code uses `s(67294)` which is assigned to `a`, and then calls `a.createElement` and `a.useState`, `a.useEffect`, `a.useCallback`, `a.forwardRef`. It also uses JSX syntax (`(0,t.jsx)` and `(0,t.jsxs)` which implies `s(85893)` is the JSX runtime) which are core features of React."
        },
        {
          "name": "Next.js Router",
          "motivation": "The code imports `useRouter` from `s(11163)` and uses it via `(0,c.useRouter)()`. It also uses a component `h` which wraps `s(41664)` (likely `next/link`) for client-side navigation."
        },
        {
          "name": "Material UI",
          "motivation": "The code imports and uses various components commonly found in Material UI, such as `Box` (`s(80822)`), `SvgIcon` (`s(53219)`), `Typography` (`s(15861)`), `Collapse` (`s(57922)`), `DialogContent` (`s(6514)`), `Grid` (`s(86886)`), `InputAdornment` (`s(87109)`), `CircularProgress` (`s(98456)`), `DialogActions` (`s(31425)`), `Button` (`s(69417)`), `TextField` (`s(14701)`, `s(51194)`, `s(61903)`), `Tabs` (`s(88409)`), `Tab` (`s(40044)`), and `Link` (`s(23795)`)."
        },
        {
          "name": "react-hook-form",
          "motivation": "The code imports `useForm` (`(0,_.cI)`) and `FormProvider` (`(0,t.jsx)(_.RV`) from `s(87536)`, and utilizes functions like `handleSubmit`, `formState`, `watch`, `reset`, `setValue`, `register` which are characteristic of the `react-hook-form` library."
        },
        {
          "name": "Redux/State Management",
          "motivation": "The code uses `(0,E.TL)()` which likely corresponds to `useDispatch` from `react-redux` (`s(89773)`). It also dispatches actions like `(0,O.IH)` (`s(46479)`) and `(0,R.IH)` (`s(55750)`), which is a common pattern in Redux for updating application state."
        },
        {
          "name": "Ethers.js/Web3 Utils",
          "motivation": "The code imports functions like `isAddress` and `getAddress` from `s(56371)` (`(0,V.isAddress)`, `(0,V.getAddress)`). These are common utility functions found in Ethereum libraries like `ethers.js` for validating and manipulating Ethereum addresses. Functions in module `j` (`s(70277)`) like `(0,j.ac)`, `(0,j.PR)`, `(0,j._I)`, `(0,j.ML)`, `(0,j.oQ)` seem to interact with token standards (ERC20, ERC721), which often relies on web3 libraries."
        }
      ]
    },
    {
      "file": "_next/static/chunks/2115.8119ef95641a1732.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code uses the `self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)` pattern, which is characteristic of code bundled by Webpack."
        },
        {
          "name": "Next.js",
          "motivation": "The file path `_next/static/chunks/2115.8119ef95641a1732.js` follows the standard directory structure and naming convention for static assets and JavaScript chunks generated by Next.js builds. The `webpackChunk_N_E` naming also suggests Next.js usage."
        }
      ]
    },
    {
      "file": "_next/static/chunks/2205.6fcc4c78b3ebdb85.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code uses the `self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push` structure, which is characteristic of Webpack's module loading system. The `_N_E` suffix often indicates usage within a Next.js framework, which uses Webpack."
        }
      ]
    },
    {
      "file": "_next/static/chunks/22396acb.0e7023df3a1823dd.js",
      "occurences": [
        {
          "name": "webpack",
          "motivation": "The code uses the `self.webpackChunk_N_E` pattern, which is characteristic of webpack's module loading and chunking mechanism."
        },
        {
          "name": "Next.js",
          "motivation": "The `_N_E` suffix in `self.webpackChunk_N_E` is a conventional indicator used by the Next.js framework for its webpack builds."
        },
        {
          "name": "Next.js",
          "motivation": "The file path `_next/static/chunks/22396acb.0e7023df3a1823dd.js` indicates that this code is part of a Next.js application build output. Next.js is a React framework."
        },
        {
          "name": "React",
          "motivation": "The file path `_next/static/chunks/22396acb.0e7023df3a1823dd.js` suggests the code originates from a Next.js application, which inherently uses the React library for building user interfaces."
        }
      ]
    },
    {
      "file": "_next/static/chunks/2312.3d5a1b95f5f1d558.js",
      "occurences": [
        {
          "name": "crypto-js",
          "motivation": "The code includes numerous functions and classes characteristic of crypto-js, such as `WordArray`, `Hasher`, `Cipher`, `BlockCipher`, various hashing algorithms (MD5, SHA1, SHA256, SHA512, SHA3, RIPEMD160), encryption algorithms (AES, DES, TripleDES, Rabbit, RC4, Blowfish), and utility functions for encoding (Hex, Base64, Utf8) and key derivation (PBKDF2, EvpKDF). The structure `var eD={lib:{...}, algo:{...}, mode:{...}, pad:{...}}` strongly resembles the structure of the crypto-js library namespace after minification/bundling."
        },
        {
          "name": "rxjs",
          "motivation": "The code utilizes concepts central to RxJS, including `Observable` (e.g., `new e4(...)`), `Subject` (e.g., `new eM.xQ`), `Subscription` (e.g., `new eY(...)`), `Subscriber` (e.g., `new eJ(...)`), and operators like `pipe`, `filter`, `take`, `finalize`, `takeWhile`, `timeoutWith` (used with instances like `td`, `this.onTransaction$`, `this.transactions$`). The presence of `Symbol.observable` or its polyfill (`e2`) is also indicative of RxJS."
        },
        {
          "name": "sturdy-websocket",
          "motivation": "The code explicitly defines and uses a class named `SturdyWebSocket` (e.g., `var n=function(){function SturdyWebSocket...`). This class handles WebSocket connection logic, including reconnection strategies (`reconnect`, `handleClose`, `handleWillReconnect`), message buffering (`messageBuffer`), and lifecycle events (`onopen`, `onclose`, `onerror`, `onmessage`, `ondown`, `onreopen`), which are characteristic features of the sturdy-websocket library. It's instantiated within the main Blocknative class (`_=new n.Z(...)`)."
        },
        {
          "name": "nanoid",
          "motivation": "The code contains a function `nanoid=(e=21)=>crypto.getRandomValues(new Uint8Array(e)).reduce(...)` which directly implements the core logic of nanoid for generating short, unique, URL-friendly IDs using `crypto.getRandomValues`."
        },
        {
          "name": "Blocknative SDK / Notify.js",
          "motivation": "The code defines classes `Blocknative` (`var tp=class...`) and `MultiChain` (`let MultiChain=class MultiChain...`) which manage blockchain interactions. It uses Blocknative-specific concepts like `dappId`, `apiKey`, `watchedTransactions`, `watchedAccounts`, transaction simulation (`simulate`, `multiSim`), configuration management (`configuration`), and specific event codes (`txSent`, `txPool`, `txConfirmed`, etc.). It connects to the Blocknative WebSocket API (`wss://api.blocknative.com/v0`) via the `SturdyWebSocket` wrapper."
        }
      ]
    },
    {
      "file": "_next/static/chunks/2673.e416a7c117b7ba45.js",
      "occurences": [
        {
          "name": "axios",
          "motivation": "The code includes numerous references and patterns characteristic of the Axios library, such as `AxiosError`, `AxiosHeaders`, `AxiosURLSearchParams`, interceptors (`this.interceptors.request.forEach`, `this.interceptors.response.forEach`), and the main Axios instance aliased as `AD` (e.g., `AD.get`, `AD.request`). Version `1.5.1` is explicitly mentioned (`AE=\"1.5.1\"`). The code also defines XHR adapters (`var Ar=Ao&&function(A){...new XMLHttpRequest...}`) which Axios uses for browser environments."
        },
        {
          "name": "Buffer",
          "motivation": "The code uses `require('buffer').Buffer` (or a minified equivalent represented by variable `C` or `j`) and methods like `C.from(..., 'hex')`, `C.alloc(...)`, `AS.from(A,\"base64\")`, `Aw.from(A,\"hex\")`, `Az.from(e,\"hex\")`. This indicates the use of the Buffer library, common in Node.js and often polyfilled for browser environments."
        },
        {
          "name": "bn.js / BigNumber library",
          "motivation": "The code uses `new g.O(...)` and `new g.Z(...)`. `O` and `Z` are likely minified names for classes from a BigNumber library like `bn.js`. This is commonly used in blockchain contexts to handle large integer values that exceed JavaScript's native Number limits (e.g., Wei amounts, token amounts with high decimals)."
        },
        {
          "name": "@ledgerhq/hw-app-eth / Ledger Ethereum App Interaction Library",
          "motivation": "The code defines and exports `ledgerService` (variable `AT`) which contains functions like `resolveTransaction`, `signDomainResolution`, `signAddressResolution`. It interacts with Ledger-specific concepts like `getChallenge`, `provideDomainName`, `provideERC20TokenInformation`, `provideNFTInformation`, `setPlugin`, `setExternalPlugin`. It defines URLs pointing to Ledger's APIs (`nftExplorerBaseURL`, `pluginBaseURL`, `cryptoassetsBaseURL`) and uses Axios (`AD`) to make calls to these endpoints (e.g., fetching ERC20 signatures, NFT info, ENS resolution signatures). Specific error types like `Am=(0,AU.el)(\"EthAppPleaseEnableContractData\")` and `Ax=(0,AU.el)(\"EthAppNftNotSupported\")` further confirm the use of Ledger libraries."
        },
        {
          "name": "EIP712 Utilities",
          "motivation": "The code includes functions like `signEIP712Message`, `signEIP712HashedMessage`, `getSchemaHashForMessage`, `getFiltersForMessage`, `makeRecursiveFieldStructImplem`, `sendStructDef`, `sendStructImplem`, and `sendFilteringInfo`. These functions are specifically designed to handle the EIP-712 structured data signing standard, including parsing type definitions, formatting data for the Ledger device, and managing filtering/display logic on the device."
        }
      ]
    },
    {
      "file": "_next/static/chunks/2832.b5560ce6dd5abaaf.js",
      "occurences": [
        {
          "name": "@ethereumjs/common",
          "motivation": "The code defines and uses a `Common` class (`y=function(e){function Common(o){...}}`), imports hardfork definitions (`g=t(37459)`), chain definitions (`v=t(74083)` including specific chains like `mainnet`, `ropsten`, `rinkeby`, `kovan`, `goerli`, `sepolia` via `t(87295)`, `t(31227)`, `t(40439)`, `t(37098)`, `t(17687)`, `t(49422)`), and EIP definitions (`k=t(97616)`). It includes methods like `setChain`, `setHardfork`, `paramByHardfork`, `chainId`, `networkId`, `genesis`, `hardforks`, which are characteristic of the `@ethereumjs/common` library used for managing chain and hardfork parameters in Ethereum JavaScript projects."
        },
        {
          "name": "Buffer",
          "motivation": "The code uses `f=t(48764).Buffer` and subsequently calls methods like `f.from()`, `f.alloc()`, `f.concat()`, indicating the use of the Node.js `Buffer` object (likely via a polyfill for browser environments)."
        },
        {
          "name": "EventEmitter",
          "motivation": "The `Common` class extends `p.EventEmitter` (`Common}(p.EventEmitter)`) and uses its methods like `emit(\"hardforkChanged\",e)`. This suggests the use of the Node.js `events` module or a compatible EventEmitter implementation."
        }
      ]
    },
    {
      "file": "_next/static/chunks/2905-3721cebcccdffcf1.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code extensively uses React hooks like `(0,i.forwardRef)`, `(0,r.useState)`, `(0,r.useContext)`, `(0,r.useEffect)`, `(0,n.useMemo)` and JSX syntax `(0,n.jsx)`, `(0,n.jsxs)`."
        },
        {
          "name": "@mui/material",
          "motivation": "Presence of components commonly associated with Material UI, such as `r.Z` (likely `Box` or `Typography`), `i.Z` (`Button`, `Alert`), `x.Z` (`Paper`), `h.Z` (`IconButton`, `Button`), `u.Z` (`Accordion`), `v.Z` (`AccordionDetails`), `y.Z` (`Icon`), `s.Z` (`SvgIcon`), `w.Z` (`Stack`), `E.Z` (`Divider`). The styling object structure (`sx` prop) is also characteristic of MUI."
        },
        {
          "name": "react-hook-form",
          "motivation": "The code uses `(0,f.cI)` which likely corresponds to `useForm` hook, along with associated properties like `handleSubmit`, `register`, and `formState.errors`."
        },
        {
          "name": "@safe-global/safe-core-sdk",
          "motivation": "Imports and functions like `(0,r.iV)` (likely `getSafeSDK`), `(0,r.pf)`, `(0,r.mm)` (related to signing), `(0,r.WF)` (getting contract handlers), `(0,i.VQ)` (likely `createTransactionData`), `(0,s.xl)` (likely `getSpendingLimitModuleContract`), `(0,s.L4)` (likely `getERC20AllowancesContract`) suggest the use of the Safe Core SDK for interacting with Safe contracts and preparing transactions."
        },
        {
          "name": "@safe-global/safe-service-client",
          "motivation": "Functions like `(0,u.postSafeGasEstimation)` and `(0,p.a)` (likely `proposeTransaction` via the service client) indicate interaction with the Safe Transaction Service API."
        },
        {
          "name": "web3-onboard or similar wallet connection library",
          "motivation": "References to `onboard` (`t` variable passed to signing/execution functions), checks like `(0,l.kq)(a.chainId, a.address)` (likely checking wallet connection/network), and interactions presumed to happen via a connected wallet provider (`getNonce`, `approveTransactionHash`, `executeTransaction`) point towards a library managing wallet connections."
        },
        {
          "name": "ethers.js or viem",
          "motivation": "The Safe SDK and Web3-Onboard typically rely on ethers.js or viem underneath for blockchain interactions (RPC calls, signing, contract interaction). Functions like `provider.getSigner()`, `contract.encodeFunctionData()`, `transactionResponse.wait()` are indicative of patterns used by these libraries."
        },
        {
          "name": "date-fns",
          "motivation": "Functions like `relativeTime` and `formatWithSchema` (`(0,n.Z)` and `(0,r.Z)`) are used for date/time formatting, a common use case for `date-fns`."
        }
      ]
    },
    {
      "file": "_next/static/chunks/3101.df0ff2ee13f83983.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code uses `(0,t.useState)`, `(0,t.useRef)`, `(0,t.useEffect)` which correspond to React hooks (`useState`, `useRef`, `useEffect`). It also uses `(0,r.jsx)` and `(0,r.jsxs)` which are indicative of JSX transpilation used in React."
        },
        {
          "name": "Material UI (or similar UI library)",
          "motivation": "The code imports and uses multiple components like `i.Z` (likely `Dialog`), `l.Z` (likely `DialogTitle`), `a.Z` (likely `IconButton`), `o.Z` (likely `Divider`), `c.Z` (likely `DialogContent` or `Box`), `d.Z` (likely `Button`), `m.Z` (likely `Typography`), `h.Z` (likely an `Icon`). The usage of props like `sx`, `variant`, `color`, `position`, `aria-label`, `display`, `flexDirection`, `alignItems`, `justifyContent`, `padding`, `gap` strongly suggests Material UI or a library with a very similar API."
        },
        {
          "name": "QR Scanner Component",
          "motivation": "The code imports module `s(57164)` as `x` and uses its default export `u = s.n(x)` as a component `(0,r.jsx)(u(), { ... })`. The props passed (`legacyMode`, `onError`, `onScan`, `ref`, `style`) are typical for a QR code scanning component integration."
        },
        {
          "name": "clsx / classnames",
          "motivation": "The code snippet `c=s.n(o)`, `c()(h().container,h()[u],o,\"errorMessage\")` where `o=s(94184)` strongly indicates the use of a utility library like `clsx` or `classnames` for conditionally combining CSS class names, often used with CSS Modules (`h().container`)."
        },
        {
          "name": "Material UI Icons (or similar Icon library)",
          "motivation": "The code uses `h.Z` (likely `CloseIcon`) within an IconButton (`a.Z`). It also conditionally uses components `x.Z` and `d.Z` (from modules `s(25416)` and `s(81904)`) based on the `level` prop within an `i.Z` component (likely `SvgIcon` or similar from MUI), suggesting these are specific icons (e.g., `InfoIcon`, `ErrorIcon`)."
        }
      ]
    },
    {
      "file": "_next/static/chunks/3202.5f23c9140ed2f0a5.js",
      "occurences": [
        {
          "name": "web3-onboard",
          "motivation": "The code explicitly imports and uses functions from `@web3-onboard/core` (e.g., `(0,l.Z)` which likely corresponds to `init` or similar based on context in `createOnboard`), and configures various wallet modules associated with it (`@web3-onboard/injected-wallets`, `@web3-onboard/walletconnect`, `@web3-onboard/coinbase`, `@web3-onboard/ledger`, `@web3-onboard/trezor`, `@web3-onboard/keystone`). The function `createOnboard` directly returns the result of the `@web3-onboard/core` initialization."
        },
        {
          "name": "@web3-onboard/injected-wallets",
          "motivation": "The code imports and calls a function aliased as `a.ZP` within the `u` object, associated with the `s.n.INJECTED` key, consistent with initializing the injected wallets module for web3-onboard."
        },
        {
          "name": "@web3-onboard/walletconnect",
          "motivation": "The code imports and calls a function aliased as `c.Z` within the `walletConnectV2` function, associated with the `s.n.WALLETCONNECT_V2` key, consistent with initializing the WalletConnect v2 module for web3-onboard. Configuration options like `version: 2` and `projectId` are passed."
        },
        {
          "name": "@web3-onboard/coinbase",
          "motivation": "The code imports and calls a function aliased as `r.Z` within the `u` object, associated with the `s.n.COINBASE` key, consistent with initializing the Coinbase Wallet module for web3-onboard."
        },
        {
          "name": "@web3-onboard/ledger",
          "motivation": "The code imports and calls a function aliased as `i.Z` within the `u` object, associated with the `s.n.LEDGER` key, consistent with initializing the Ledger module for web3-onboard."
        },
        {
          "name": "@web3-onboard/trezor",
          "motivation": "The code imports and calls a function aliased as `d.Z` within the `u` object, associated with the `s.n.TREZOR` key, consistent with initializing the Trezor module for web3-onboard. Configuration options `appUrl` and `email` are passed."
        },
        {
          "name": "@web3-onboard/keystone",
          "motivation": "The code imports and calls a function aliased as `o.Z` within the `u` object, associated with the `s.n.KEYSTONE` key, consistent with initializing the Keystone module for web3-onboard."
        }
      ]
    },
    {
      "file": "_next/static/chunks/3209.40634d8a2f32ed03.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "Code uses `React` functions like `(0,s.useState)`, `(0,s.useEffect)`, `(0,s.useContext)`, `(0,s.forwardRef)`, `(0,s.useCallback)`, `(0,s.useMemo)` where `s` is imported via `i(67294)`. It also uses JSX syntax `(0,r.jsx)` and `(0,r.jsxs)` where `r` is imported via `i(85893)` (likely `react/jsx-runtime`)."
        },
        {
          "name": "Material UI (MUI)",
          "motivation": "Code extensively uses MUI components (`Container`, `Box`, `Typography`, `Stepper`, `Step`, `StepConnector`, `StepLabel` inferred from context and utility functions like `getStepperUtilityClass`), styling functions (`(0,f.ZP)` which is likely `styled`), theming (`theme.palette`, `theme.spacing`, `theme.breakpoints`), and utility functions (`(0,p.Z)` for omitting props, `(0,u.Z)` and `(0,f.ZP)` for styling, `(0,c.Z)` and `(0,g.Z)` for theme props). Many variable names and internal function calls reference `Mui` (e.g., `MuiContainer`, `MuiStepper`). Imports like `i(65582)`, `i(80822)`, `i(15861)`, `i(85268)`, `i(1048)`, `i(32793)`, `i(74187)`, `i(79998)`, `i(1588)`, `i(76443)`, `i(93947)` correspond to MUI components or related utilities."
        },
        {
          "name": "Next.js Link",
          "motivation": "Code imports `i(41664)` as `$` and uses it as a component `O()`, which is typical for the Next.js `Link` component after minification/bundling, especially with `passHref` and `legacyBehavior` props."
        },
        {
          "name": "classnames",
          "motivation": "Code imports `i(94184)` as `n` and uses it as `s()` (where `s` is `n`) to conditionally join class names: `className:s()(u().instructions,i?u().errorBg:u().infoBg)` and `className:s()(u().row,u().buttons)`. This is a common pattern for the `classnames` library."
        },
        {
          "name": "Safe Apps SDK Interaction",
          "motivation": "Code imports modules like `i(89773)` (as `X`), `i(53234)` (as `z`), `i(62254)` (as `H`), `i(47274)` (as `Y`) and uses functions like `(0,X.CG)`, `(0,d.FT)`, `(0,z.Z)`, `(0,H.s)`, `(0,Y.w)` which seem related to fetching Safe transaction data (`txId`, `txHash`, `status`), Safe address (`safeAddress`), generating explorer links, and handling specific Safe events/statuses (`Y.iZ.FAILED`, `Y.iZ.REVERTED`). The context implies interaction with the Safe{Wallet} environment or related services."
        },
        {
          "name": "React Context",
          "motivation": "Code uses `(0,h.useContext)(J.i)` where `h` is React and `J` is imported via `i(94315)`. This indicates the usage of React's Context API to manage application state (specifically `txFlow` state in this case). It also defines context providers like `j.Z.Provider` and `C.Z.Provider` for the Stepper component."
        }
      ]
    },
    {
      "file": "_next/static/chunks/3343.dc30f7ffc9b804ba.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code uses the `self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)` structure, which is characteristic of code bundled by Webpack."
        }
      ]
    },
    {
      "file": "_next/static/chunks/3579.966fbe498a5f561e.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code uses React hooks like `useState`, `useEffect`, `useRef` (imported as `m.useState`, `m.useEffect`, `m.useRef`) and JSX syntax like `(0,o.jsx)(...)` and `(0,m.createElement)(...)`."
        },
        {
          "name": "Material UI (MUI)",
          "motivation": "The code imports and uses components that strongly resemble Material UI components, such as `l.Z` (likely `Box`), `a.Z` (likely `Box`), `h.Z` (likely `Typography`), `u.Z` (likely `FormControlLabel`), `d.Z` (likely `Checkbox`), and `c.Z` (likely `Dialog`). Theme properties like `palette.background.paper` and `palette.text.primary` are also referenced."
        },
        {
          "name": "Redux/Redux Toolkit",
          "motivation": "The code uses patterns associated with Redux, specifically selectors (`(0,B.CG)(I.vi)`) which likely maps to `useSelector`, and dispatching actions (`(0,B.TL)()`, `i((0,I.Ne)(...))`) which likely maps to `useDispatch`."
        },
        {
          "name": "QR Code Generation Library",
          "motivation": "The code includes a significant block defining classes like `QrCode`, `QrSegment`, `Ecc`, `Mode` (within the `i` variable namespace, later assigned to `R`). It defines functions for encoding text (`R.QrCode.encodeText`), generating modules, applying masks, and calculating penalties. It also includes React components `QRCodeCanvas` and `QRCodeSVG` that utilize this logic to render QR codes."
        },
        {
          "name": "Webpack/Next.js",
          "motivation": "The code starts with `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)`, which is the characteristic chunk loading mechanism used by Webpack, often seen in Next.js applications (`_N_E`)."
        },
        {
          "name": "Safe{Wallet} Hooks/Components",
          "motivation": "The code uses functions like `(0,f.Z)()` and `(0,g.Ul)()`. Based on the context (displaying Safe address and network info), these likely correspond to custom hooks like `useSafeAddress` and `useNetwork` from the Safe{Wallet} frontend infrastructure. It also references Safe-specific state via Redux (`I.vi`, `I.Ne`). The component `P.Z` (`AddressEx`) is also likely part of this."
        }
      ]
    },
    {
      "file": "_next/static/chunks/3733.64ee586169b4307c.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code is wrapped in `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)`, which is the standard way Webpack bundles and loads JavaScript chunks dynamically."
        },
        {
          "name": "Next.js",
          "motivation": "The specific structure `self.webpackChunk_N_E` is commonly used by the Next.js framework for its Webpack configuration and chunk loading mechanism. The file path `_next/static/chunks/...` is also characteristic of a Next.js build output."
        }
      ]
    },
    {
      "file": "_next/static/chunks/3740.a9dc23461e8b3ee1.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code uses `(0,n.useContext)`, `(0,n.useEffect)` which correspond to `React.useContext` and `React.useEffect`. It also uses JSX syntax (`(0,s.jsx)`, `(0,s.jsxs)`)."
        },
        {
          "name": "Material UI (MUI) or similar UI library",
          "motivation": "The code uses components like `<u.Z>` and `<o.Z>`. The `<u.Z>` component takes an `sx` prop (`sx: e=>{let{palette:r}=e;return{color:r.primary.light}}`), which is characteristic of MUI or other CSS-in-JS UI libraries like Emotion (often used with MUI)."
        },
        {
          "name": "Gnosis Safe / Safe{Core} related library",
          "motivation": "The code imports context from `l.J` (`(0,n.useContext)(l.J)`) which provides `setSafeTx`, `safeTxError`, `setSafeTxError`. The component `<c.Z>` displays an address (`address`, `showCopyButton`, `hasExplorer`). The component name `RemoveGuard` and the context variable `setSafeTx` strongly suggest interaction with the Safe protocol. The function `(0,i.S8)()` is called asynchronously to likely fetch Safe-related data."
        }
      ]
    },
    {
      "file": "_next/static/chunks/3785.40f3e9c7b654f4d5.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code uses the `self.webpackChunk_N_E.push` structure, which is characteristic of Webpack's dynamic chunk loading mechanism."
        },
        {
          "name": "Next.js",
          "motivation": "The specific chunk name `webpackChunk_N_E` is a convention used by Next.js, indicating this code is likely part of a Next.js application build."
        }
      ]
    },
    {
      "file": "_next/static/chunks/3965.075cc68f7e61ce09.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code uses `(0,r.useContext)` and `(0,r.useEffect)` which correspond to `React.useContext` and `React.useEffect` after minification/bundling (likely from `t(67294)`)."
        },
        {
          "name": "Next.js",
          "motivation": "The code is wrapped in `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)`, which is the standard way Next.js lazy-loads chunks."
        },
        {
          "name": "classnames",
          "motivation": "The code uses `u()(s().container,{[s().verticalAlign]:r})` (likely `t(94184)`), which is a common pattern for the `classnames` library to conditionally join CSS class names."
        },
        {
          "name": "@safe-global/safe-apps-react-sdk",
          "motivation": "The code imports and uses hooks like `(0,s.Z)()` (likely `useSafeAppsSDK` from `t(53234)`) and `(0,l.Z)()` (likely `useSafeAppConnection` from `t(1694)`), which are characteristic of the Safe Apps React SDK."
        }
      ]
    },
    {
      "file": "_next/static/chunks/4008.2433ae2466330f47.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code uses the `self.webpackChunk_N_E` structure, which is a common pattern for code bundled by Webpack, specifically the runtime chunk loading mechanism used by Next.js (indicated by `_N_E`)."
        }
      ]
    },
    {
      "file": "_next/static/chunks/4054.910f13bce88ca3bf.js",
      "occurences": [
        {
          "name": "Next.js (Webpack)",
          "motivation": "The code uses the `self.webpackChunk_N_E.push` structure, which is characteristic of modules bundled by Webpack within a Next.js application."
        }
      ]
    },
    {
      "file": "_next/static/chunks/41.82877e33086757f7.js",
      "occurences": [
        {
          "name": "Webpack/Next.js",
          "motivation": "The code uses the `self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)` pattern, which is characteristic of modules bundled by Webpack, commonly used in frameworks like Next.js (_N_E often indicates Next.js Error)."
        }
      ]
    },
    {
      "file": "_next/static/chunks/4215.160fc247de9f8159.js",
      "occurences": [
        {
          "name": "RxJS",
          "motivation": "The code extensively uses RxJS concepts and patterns. Keywords like `Observable`, `Subscriber`, `Scheduler`, `pipe`, operators like `map`, `mergeMap`, `mergeAll`, factory functions like `from`, `fromArray`, `fromEvent`, `timer`, and internal structures like `SimpleInnerSubscriber`, `SimpleOuterSubscriber`, `AsyncAction`, `AsyncScheduler` are characteristic of the RxJS library."
        }
      ]
    },
    {
      "file": "_next/static/chunks/432.1552f1c2ae3bf8f5.js",
      "occurences": [
        {
          "name": "RxJS",
          "motivation": "The code extensively uses `Observable`, `Subscriber`, `Subscription`, `pipe`, `lift`, and operators like `innerFrom`. These are core concepts and classes from the RxJS library. Functions like `createOperatorSubscriber` and error handling specific to observables (`handleUnhandledError`, `handleStoppedNotification`) further confirm its usage."
        }
      ]
    },
    {
      "file": "_next/static/chunks/4411-5e1dae312242f98c.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code uses `a(67294)` which commonly maps to the React library in webpack bundles. It imports and uses React functions like `i.forwardRef`, `i.useContext`, `i.useMemo`, `i.createContext`, and the JSX runtime `(0,y.jsx)`."
        },
        {
          "name": "@mui/material",
          "motivation": "The code defines and uses multiple components prefixed with `Mui` (e.g., `MuiTable`, `MuiTableBody`, `MuiTableCell`, `MuiTableContainer`, `MuiTableHead`, `MuiTableRow`). It also uses utility functions like `(0,p.Z)` (`generateUtilityClass`) and `(0,c.ZP)` (`styled`) with Material UI specific naming conventions and references theme properties (`theme.palette`, `theme.typography`, `theme.spacing`). Functions like `(0,d.Z)` (`useThemeProps`) are also characteristic of MUI."
        }
      ]
    },
    {
      "file": "_next/static/chunks/4593.7f6ac78f69a6f4fe.js",
      "occurences": [
        {
          "name": "Next.js (Webpack)",
          "motivation": "The code uses the `self.webpackChunk_N_E` structure, which is characteristic of applications built with Next.js using Webpack for module bundling. This specific chunk is part of that larger application structure."
        }
      ]
    },
    {
      "file": "_next/static/chunks/4693.15be50f25e87846f.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "Code uses `React.createElement` (likely transpiled from JSX), `React.useState`, `React.useMemo`, `React.useCallback`, `React.useContext`, `React.useEffect` which are core React APIs. Identified through webpack module imports like `i(67294)` and `i(85893)` (jsx-runtime)."
        },
        {
          "name": "Material UI (MUI)",
          "motivation": "Code imports and uses components with styling props characteristic of MUI, such as `Box` (`i(80822)` with props like `display`, `alignItems`, `gap`), `Typography` (`i(15861)`), `Select` (`i(18360)`), `MenuItem` (`i(18972)`), `InputLabel` (`i(33841)`), `FormControl` (`i(94054)`), `Button` (`i(69417)`), `Alert` (`i(46901)`), `Grid` (`i(86886)`), and icons (`i(40876)`, `i(53219)`). The structure `(0,l.default)((0,r.jsx)(\"path\",{d:...}),\"IconName\")` is typical for MUI icon creation."
        },
        {
          "name": "ethers.js / viem",
          "motivation": "The code utilizes functions common in Ethereum interaction libraries like `parseUnits` (`i(56371)` -> `g.parseUnits`), `defaultAbiCoder.encode` (`i(56371)` -> `g.defaultAbiCoder`), `BigNumber.from` (`i(2593)` -> `T.O$.from`), formatting functions possibly like `formatUnits` (`i(50053)` -> `x.Mb`), and constants like `ZERO_ADDRESS` (`i(4314)` -> `D.ZERO_ADDRESS`). While the exact library isn't definitively named, the functionality points strongly to one of these."
        },
        {
          "name": "react-hook-form",
          "motivation": "The code imports and uses `useForm` (`i(87536)` -> `d.cI`), `FormProvider` (`i(87536)` -> `d.RV`), and `Controller` (`i(87536)` -> `d.Qr`), which are key components of the `react-hook-form` library."
        }
      ]
    },
    {
      "file": "_next/static/chunks/4765.d683d936aaf78e0e.js",
      "occurences": [
        {
          "name": "Next.js (Webpack)",
          "motivation": "The code uses the `self.webpackChunk_N_E` structure, which is characteristic of applications built with Next.js, indicating it's part of a webpack bundle managed by the Next.js framework. This specific chunk itself doesn't directly use Next.js APIs but is part of its build output."
        }
      ]
    },
    {
      "file": "_next/static/chunks/4866-377387b71739a58a.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code extensively uses JSX syntax (`(0,r.jsx)`, `(0,i.jsxs)`), React hooks (`useState`, `useContext`, `useMemo`, `useEffect`, `useCallback`), and component patterns typical of React applications."
        },
        {
          "name": "Next.js",
          "motivation": "The code structure with `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)`, the file path `_next/static/chunks/...`, and the use of `(0,C.useRouter)()` (imported from `next/router`) indicate it's part of a Next.js application."
        },
        {
          "name": "Material UI (MUI)",
          "motivation": "Numerous components and style patterns strongly suggest Material UI: `l.Z` (likely `Tooltip`), `o.Z` (likely `Box`), `a.Z` (likely `SvgIcon`), `s.Z` (likely `Button`), `f.Z` (likely `IconButton`), `g.Z` (likely `ListItemIcon`), `j.Z` (likely `List`), `C.ZP` (likely `ListItem`), `y.Z` (likely `ListItemText`), `b.Z` (likely `Link`), `O.Z` (likely `Menu`), `S.Z` (likely `MenuItem`), `w.Z` (likely `Typography`). Many custom SVG icons are defined and used via `SvgIcon` (`rocket`, `error`, `speed`, etc.). Style overrides using `sx` prop are common."
        },
        {
          "name": "@safe-global/safe-core-sdk / safe-ethers-lib",
          "motivation": "The code handles Safe transactions extensively (creation, confirmation, execution, nonces, thresholds, modules, guards). Function `useSafeTransactionFromDetails` (64817) explicitly creates `SafeTransaction` (`new i.default(t)`) and `EthSafeSignature` (`new l.EthSafeSignature(t,n)`) objects, which are core parts of the Safe SDKs."
        },
        {
          "name": "ethers.js",
          "motivation": "Utility functions like `(0,a.Mb)(t, n)` (likely `formatUnits` from `ethers/lib/utils`) in 49069, `(0,T.kV)(..., \"ether\")` (likely `parseUnits`) in 24102, and constants like `E.ZERO_ADDRESS` in 24102 are indicative of ethers.js usage for interacting with Ethereum data types and formatting."
        },
        {
          "name": "clsx",
          "motivation": "The pattern `d=n.n(c)` followed by `d()(o().container,{[o().verticalAlign]:l})` in module 49069 is characteristic of using the `clsx` library for conditionally joining CSS class names."
        },
        {
          "name": "State Management Library (e.g., Zustand/Redux/React Query)",
          "motivation": "The use of `(0,x.CG)(...)` as a selector pattern (e.g., in modules 96997, 20340, 64390) suggests a centralized state management library is used to select slices of state (like token balances `u.i0`, transaction status `i.qW`). The specific library isn't definitively identifiable from the snippet alone."
        }
      ]
    },
    {
      "file": "_next/static/chunks/5007.2e760302f6c46e0d.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code uses the `self.webpackChunk_N_E = self.webpackChunk_N_E || []` pattern, which is characteristic of JavaScript code bundled using Webpack, specifically in a Next.js (`_N_E`) environment."
        }
      ]
    },
    {
      "file": "_next/static/chunks/5076-032ed19671fb0ee4.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code utilizes core React concepts like `React.forwardRef` (minified, e.g., `l.forwardRef` where `l` is assigned `o(67294)`) and JSX syntax (`(0,v.jsx)`, `(0,v.jsxs)` where `v` is assigned `o(85893)`)."
        },
        {
          "name": "Material UI (MUI)",
          "motivation": "The code defines and uses components clearly identifiable as Material UI components, such as `MuiToolbar`, `MuiTablePagination`, and `MuiTableSortLabel`. It references MUI-specific concepts like `theme.spacing`, `theme.breakpoints`, `theme.mixins.toolbar`, `theme.palette`, `theme.typography`, and uses MUI's styling solution (`(0,u.ZP)` likely being `styled` from `o(90948)`) and utility functions (`generateUtilityClass` from `o(34867)`, `generateUtilityClasses` from `o(1588)`, `useThemeProps` likely from `o(71657)`)."
        }
      ]
    },
    {
      "file": "_next/static/chunks/5080.df996e69ba56cf2e.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code uses the `self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)` pattern, which is characteristic of Webpack's runtime for loading modules dynamically."
        }
      ]
    },
    {
      "file": "_next/static/chunks/5181.f0cadd23ad524b36.js",
      "occurences": [
        {
          "name": "bs58",
          "motivation": "Code in module `77191` defines the standard base58 alphabet (`\"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"`) and exports encoding/decoding functions built by the `base` function in module `58162`."
        },
        {
          "name": "base58check",
          "motivation": "Module `53310` takes a hashing function (`sha256x2` defined in `58334`) and uses the `bs58` module (`77191`) to provide `encode` and `decode` functions that include a 4-byte checksum, characteristic of base58check encoding."
        },
        {
          "name": "hdkey",
          "motivation": "Module `49840` defines a `HDKey` class/constructor function with methods like `derive`, `deriveChild`, `fromMasterSeed`, `fromExtendedKey`, `sign`, `verify`, `privateKey`, `publicKey`, `privateExtendedKey`, `publicExtendedKey`. It uses constants like `HARDENED_OFFSET`. This is characteristic of the `hdkey` library for hierarchical deterministic wallet key derivation."
        },
        {
          "name": "Buffer",
          "motivation": "The code frequently uses `f(89509).Buffer` (e.g., `s=f(89509).Buffer`) and methods like `Buffer.from`, `Buffer.alloc`, `Buffer.allocUnsafe`, `Buffer.concat`, `.copy`, `.slice`, `.readUInt32BE`, `.writeUInt32BE`, `.writeUInt8`, `.fill`, `Buffer.isBuffer`. This indicates the use of the Node.js Buffer API, likely via a polyfill or the `safe-buffer` package for browser compatibility."
        },
        {
          "name": "create-hash",
          "motivation": "Module `42474` is referenced (as `d`) within the `hdkey` module (`49840`) and used via `d.createHash(\"sha256\")` to perform SHA256 hashing, specifically within the `hash160` function."
        },
        {
          "name": "create-hmac",
          "motivation": "Module `69282` is referenced (as `d`) within the `hdkey` module (`49840`) and used via `d.createHmac(\"sha512\", ...)` to perform HMAC-SHA512 calculations, essential for key derivation (`HDKey.fromMasterSeed`, `HDKey.prototype.deriveChild`)."
        },
        {
          "name": "secp256k1",
          "motivation": "Module `17221` is referenced (as `l`) within the `hdkey` module (`49840`) and used for elliptic curve operations specific to the secp256k1 curve: `l.privateKeyVerify`, `l.publicKeyCreate`, `l.publicKeyVerify`, `l.publicKeyConvert`, `l.privateKeyTweakAdd`, `l.publicKeyTweakAdd`, `l.ecdsaSign`, `l.ecdsaVerify`."
        },
        {
          "name": "ripemd160",
          "motivation": "Module `79785` is referenced (as `y`) within the `hdkey` module (`49840`) and used via `new y().update(u).digest()` inside the `hash160` function, which is typical for generating Bitcoin-style addresses (SHA256 followed by RIPEMD160)."
        },
        {
          "name": "vm-browserify",
          "motivation": "Module `51951` contains code that replicates the Node.js `vm` module's functionality for browsers. It defines `Script` and `Context` classes, and methods like `runInContext`, `runInThisContext`, `runInNewContext`, `createContext`. The structure with `__webpack_modules__` and the specific implementation details match the `vm-browserify` package."
        }
      ]
    },
    {
      "file": "_next/static/chunks/5221.d099d6589d3f07c2.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code uses the `self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)` pattern, which is characteristic of modules bundled by Webpack. The `_N_E` suggests it might be part of a Next.js project."
        }
      ]
    },
    {
      "file": "_next/static/chunks/5759.5b100570e2078b1d.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code uses the `self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push` pattern, which is characteristic of code bundled by Webpack, likely within a Next.js (`_N_E`) application."
        }
      ]
    },
    {
      "file": "_next/static/chunks/578.cf0b2b84d77cd15b.js",
      "occurences": [
        {
          "name": "RxJS",
          "motivation": "The code extensively uses RxJS concepts and class names like `Observable`, `Subject`, `BehaviorSubject`, `ReplaySubject`, `AsyncSubject`, `Subscription`, `Scheduler`, `pipe`, and numerous operators (`map`, `filter`, `concatAll`, `merge`, `zip`, `combineLatest`, etc.). The entire structure of the code strongly suggests it's a bundled version or part of the RxJS library itself."
        }
      ]
    },
    {
      "file": "_next/static/chunks/5784.d17eda4e37311111.js",
      "occurences": [
        {
          "name": "Webpack/Next.js",
          "motivation": "The code uses the `self.webpackChunk_N_E` structure, which is characteristic of JavaScript bundled by Webpack, commonly seen in Next.js applications (`_N_E`). This specific chunk appears to primarily define an SVG asset."
        }
      ]
    },
    {
      "file": "_next/static/chunks/5811.987125dd4dc8fef8.js",
      "occurences": [
        {
          "name": "CoinbaseWalletSDK",
          "motivation": "The code explicitly defines a class named `CoinbaseWalletSDK` (`let CoinbaseWalletSDK=class CoinbaseWalletSDK{...}`). It also exports this class and assigns it to `window.CoinbaseWalletSDK`."
        },
        {
          "name": "Preact",
          "motivation": "The code uses the `(0,a.h)(\"div\", ...)` pattern extensively for creating virtual DOM elements, which is characteristic of Preact's `h` (hyperscript) function. This is seen throughout the UI components like `ConnectItem`, `ConnectContent`, `ConnectDialog`, etc."
        },
        {
          "name": "rxjs",
          "motivation": "The code frequently uses RxJS concepts like `BehaviorSubject`, `Subject`, `Subscription`, the `.pipe()` method, and various operators (`filter`, `map`, `tap`, `skip`, `switchMap`, `catchError`, `timeoutWith`, `distinctUntilChanged`, `mergeMap`, `delay`, `retry`, `of`, `from`, `timer`, `iif`). This is evident in classes like `WalletSDKConnection` and `WalletSDKRelay`."
        },
        {
          "name": "buffer",
          "motivation": "The code utilizes functions characteristic of the Node.js `buffer` module polyfill, such as `i.from(...)`, `i.isBuffer(...)`, and `i.alloc(...)`, often referenced through a minified variable like `i` (imported from `36341`). For example: `let u=i.from(a.svg(),\"utf8\").toString(\"base64\");` and `let a=e.data?(0,W.ensureBuffer)(e.data):i.alloc(0);`."
        },
        {
          "name": "qrcode.js",
          "motivation": "A component named `QRCode` uses `new c.default({content:e.content, ...})` to generate QR codes. The configuration object passed (`content`, `bgColor`, `fgColor`, `container: 'svg'`, `ecl`, `width`, `height`, `padding`, `image`) closely matches the API of popular QR code generation libraries like `qrcode.js` or its derivatives."
        },
        {
          "name": "eth-rpc-errors",
          "motivation": "The code imports and uses standard Ethereum error codes and serialization functions (e.g., `l.standardErrors.provider.unauthorized`, `(0,l.serializeError)(...)`, `l.standardErrorCodes.rpc.internal`). These structures and functions are part of the `eth-rpc-errors` library."
        },
        {
          "name": "@metamask/json-rpc-engine",
          "motivation": "The code defines a class named `JsonRpcEngine` (`let JsonRpcEngine=class JsonRpcEngine extends o.default{...}`) which inherits from a base class and implements methods like `push`, `handle`, `_handleBatch`, consistent with the `@metamask/json-rpc-engine` library."
        },
        {
          "name": "@metamask/safe-event-emitter",
          "motivation": "The code defines a class `SafeEventEmitter` (`let SafeEventEmitter=class SafeEventEmitter extends i.EventEmitter{...}`) that extends a base `EventEmitter` and overrides the `emit` method for safer event handling, matching the pattern of `@metamask/safe-event-emitter`."
        },
        {
          "name": "eth-block-tracker",
          "motivation": "The code includes classes like `BaseBlockTracker` (`let BaseBlockTracker=class BaseBlockTracker extends o.default{...}`) and `PollingBlockTracker` (`let PollingBlockTracker=class PollingBlockTracker extends u.BaseBlockTracker{...}`), which are core components of the `eth-block-tracker` library used for monitoring blockchain blocks."
        },
        {
          "name": "json-rpc-middleware-stream",
          "motivation": "The code imports utility functions `createAsyncMiddleware` and `createScaffoldMiddleware` from module `88625`, which are key exports of the `json-rpc-middleware-stream` library for creating JSON-RPC middleware."
        },
        {
          "name": "superstruct",
          "motivation": "The code extensively uses functions like `(0,i.define)`, `(0,i.object)`, `(0,i.string)`, `(0,i.number)`, `(0,i.literal)`, `(0,i.union)`, `(0,i.optional)`, `(0,i.pattern)`, `(0,i.coerce)`, `(0,i.is)`, `(0,i.validate)`, `(0,i.create)`, `(0,i.assert)`, `(0,o.assertStruct)`, `(0,i.refine)` and classes like `StructError`. These are characteristic features of the `superstruct` library for data validation."
        },
        {
          "name": "@metamask/utils",
          "motivation": "The code imports and uses various utility functions like `createModuleLogger`, `createProjectLogger`, `assertIsHexString`, `add0x`, `remove0x`, `bytesToHex`, `hexToBytes`, `isBytes`, `assertIsBytes`, `concatBytes`, `valueToBytes`, `stringToBytes`, `numberToBytes`, `bigIntToBytes`, `validateJsonAndGetSize`, `isPlainObject`. These functions are commonly found in the `@metamask/utils` library."
        },
        {
          "name": "sha.js/sha256",
          "motivation": "The code uses `new i.sha256().update(...).digest(\"hex\")` for hashing, which is the standard API for the `sha.js` library's sha256 implementation."
        }
      ]
    },
    {
      "file": "_next/static/chunks/5891.db79f6e3e23486ec.js",
      "occurences": [
        {
          "name": "webpack",
          "motivation": "The code uses the `self.webpackChunk_N_E.push` structure, which is characteristic of webpack's module loading system for code splitting and asynchronous chunk loading."
        },
        {
          "name": "Next.js",
          "motivation": "The specific chunk naming convention (`self.webpackChunk_N_E`) and the `_next/static/chunks/` path are standard conventions used by Next.js applications, strongly suggesting this code is part of a Next.js build environment."
        }
      ]
    },
    {
      "file": "_next/static/chunks/5927.1755ef3fd0bb12da.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code uses JSX syntax (`(0,s.jsx)`, `(0,s.jsxs)`) and React Hooks like `useState` (`n(19309)`), `useEffect`, and `useContext` (`n(67294)`)."
        },
        {
          "name": "Material UI (MUI)",
          "motivation": "The code imports and uses various components that strongly suggest Material UI, such as `Typography` (`l.Z` with `variant`, `color`, `fontWeight` props), `Grid` (`v.ZP` with `container`, `item`, `direction`, `gap`, `alignItems` props), `Button` (`y.Z` with `variant=\"contained\"`), `Select` (`g.Z` with `select` prop), `MenuItem` (`C.Z`), `Divider` (`a.Z`, `c.Z`), `Tooltip` (`w.Z`), `SvgIcon` (`b.Z`), and the `sx` prop for styling."
        },
        {
          "name": "react-hook-form",
          "motivation": "The code uses functions characteristic of react-hook-form: `(0,p.cI)` likely maps to `useForm` (called with `defaultValues` and `mode`), and `p.Qr` is used like the `Controller` component (with `control`, `rules`, `name`, `render` props)."
        },
        {
          "name": "Gnosis Safe SDKs",
          "motivation": "The code interacts with Safe-specific logic. `(0,i.Z)()` retrieves Safe data (`{safe:n}=...`). Function `(0,d.hT)(o)` likely prepares a Safe transaction (e.g., `createTransaction`), characteristic of `@safe-global/protocol-kit` or `@safe-global/safe-core-sdk`. The context hook `(0,i.Z)()` might be from `@safe-global/safe-apps-react-sdk`."
        }
      ]
    },
    {
      "file": "_next/static/chunks/6052.9e17a6fe77571cf1.js",
      "occurences": [
        {
          "name": "@ethereumjs/common",
          "motivation": "The code imports and uses `Chain`, `Hardfork`, and `Common` objects, specifically seen in `_getCommon` function (e.g., `new c.default({chain: this.DEFAULT_CHAIN, hardfork: this.DEFAULT_HARDFORK})` where `c` is imported from `r(2832)`). These are characteristic components of the `@ethereumjs/common` library used for chain and hardfork configuration."
        },
        {
          "name": "@ethereumjs/tx",
          "motivation": "The code defines and utilizes classes like `BaseTransaction` (from `r(36225)`), `Transaction` (legacy/EIP-155, from `r(35534)`), `AccessListEIP2930Transaction` (from `r(29325)`), `FeeMarketEIP1559Transaction` (from `r(56579)`), and `TransactionFactory` (from `r(31932)`). These classes are core components of the `@ethereumjs/tx` library for creating, manipulating, and serializing Ethereum transactions."
        },
        {
          "name": "Ethereum Utility Library (likely ethereumjs-util or similar)",
          "motivation": "The code makes extensive use of utility functions like `BN` (BigNumber), `toBuffer`, `Address`, `keccak256`, `rlp`, `ecsign`, `ecrecover`, `publicToAddress`, `bnToHex`, `validateNoLeadingZeroes`, imported via `r(22751)`. These functions are fundamental for Ethereum operations and are typically provided by libraries like `ethereumjs-util` or integrated into related packages."
        },
        {
          "name": "Buffer",
          "motivation": "The code explicitly imports and uses `Buffer` via `r(48764).Buffer`. This indicates the use of the Node.js `Buffer` class, likely through a polyfill provided by the bundler (e.g., Webpack) for browser compatibility."
        }
      ]
    },
    {
      "file": "_next/static/chunks/6299.0163e872fc139b21.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "Code uses `(0,a.useContext)`, `(0,a.useEffect)` where `a` is imported via `n(67294)`, and `(0,c.jsx)`, `(0,c.jsxs)` which are standard patterns for compiled React code."
        },
        {
          "name": "Next.js",
          "motivation": "The code structure `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)` is characteristic of a Next.js application bundled with Webpack."
        },
        {
          "name": "Safe{Wallet} SDK/UI Libraries",
          "motivation": "Code imports modules like `n(17524)` (likely Modal), `n(15861)` (likely Text), `n(26558)` (likely Card/Box), `n(76349)` (likely containing Safe tx logic like `createRejectTx`), `n(23811)` (likely a Safe context). Function names like `flows_RejectTx`, `RejectTx_RejectTx`, variable names like `txNonce`, `setSafeTx`, and the overall context of rejecting a transaction strongly suggest the use of Safe{Wallet} libraries (e.g., `@safe-global/safe-apps-react-sdk`, `@safe-global/safe-apps-ui-kit`). The call `(0,l.ed)(t)` likely refers to a Safe SDK function (`createRejectTx`)."
        }
      ]
    },
    {
      "file": "_next/static/chunks/6328.cb6829479d160405.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code imports React (`r(67294)`) and uses JSX syntax (`(0,t.jsx)`, `(0,t.jsxs)`) and React hooks like `useState`, `useId`, `useMemo`, `useEffect`, `useContext`."
        },
        {
          "name": "Material UI (MUI)",
          "motivation": "The code imports and uses various components commonly associated with Material UI, such as `Typography` (`r(15861)`), `InputAdornment` (`r(87109)`), `Grid` (`r(86886)`), `TextField` (`r(61903)`), `MenuItem` (`r(18972)`), `Button` (`r(69417)`), `Autocomplete` (`r(20656)`), `FormControl` (`r(94054)`), `SvgIcon` (`r(53219)`), `Tooltip` (`r(34386)`), `Divider` (`r(67720)`), `Box` (`r(90629)`), `Stack` (`r(80822)`)."
        },
        {
          "name": "React Hook Form",
          "motivation": "The code imports and uses functions like `useForm` (`(0,w.Gc)`), `Controller` (`(0,w.Qr)`), `useWatch` (`(0,w.qo)`), `useController` (`(0,v.cI)`) and accesses `formState`, `handleSubmit`, `setValue`, `control`, `watch`, `errors` which are typical of React Hook Form (`r(87536)`, `r(87536)`)."
        },
        {
          "name": "Redux (likely with Toolkit)",
          "motivation": "The code imports and uses hooks like `useDispatch` (`(0,m.TL)` from `r(89773)`) and `useAppSelector` (`(0,c.FJ)` from `r(90477)`), which are standard patterns in Redux, especially when used with Redux Toolkit. It also dispatches an action (`(0,p.W8)` from `r(87002)`)."
        },
        {
          "name": "Safe Core SDK Utilities / Related Hooks",
          "motivation": "The code uses hooks and functions related to Safe interactions: `useSafeAppsSDK` (`(0,y.Z)` from `r(53234)`), `useOwnerNames` (`(0,f.Z)` from `r(48006)`), `useWeb3ReadOnly` (`(0,s.tM)` from `r(63186)`), `proposeAddOwnerWithThreshold` (`h.jP` from `r(76349)`), `proposeSwapOwner` (`h.al` from `r(76349)`). It also performs ENS resolution (`lookupAddress` from `r(2173)`)."
        }
      ]
    },
    {
      "file": "_next/static/chunks/6344.dba72fcda2d28577.js",
      "occurences": [
        {
          "name": "@ethereumjs/common",
          "motivation": "```markdown\nThe code explicitly defines and uses functionality related to Ethereum blockchain parameters. \n\n1.  **Imports and Usage:** It imports and utilizes chain definitions (e.g., `mainnet`, `ropsten`, `rinkeby`, `kovan`, `goerli`, `sepolia` from files like `96004`, `49661`, `73679`, `35607`, `26783`, `69409`).\n2.  **Class Instantiation:** It defines and likely uses a class named `Common` (seen in `function Common(o){...}`) which is the core class provided by `@ethereumjs/common`.\n3.  **Methods:** It calls methods characteristic of `@ethereumjs/common`, such as `setChain`, `setHardfork`, `paramByHardfork`, `paramByEIP`, `hardforks`, `genesis`, `chainId`, `networkId`, `consensusType`, `hardforkIsActiveOnBlock`, `gteHardfork`.\n4.  **Concepts:** It deals with Ethereum-specific concepts managed by this library, including `Hardfork` enums (e.g., `Hardfork.Istanbul`), `Chain` enums, EIP definitions (e.g., `EIPs={1559:t(9984),...}`), `ConsensusType`, `ConsensusAlgorithm`, genesis states, and fork hashes.\n```"
        },
        {
          "name": "buffer",
          "motivation": "```markdown\nThe code explicitly imports and uses the `Buffer` object: `f=t(48764).Buffer` and later uses it with methods like `f.from(...)`, `f.alloc(...)`, `f.concat(...)`. This is commonly used for handling binary data in Node.js and is often polyfilled for browsers, especially in blockchain contexts. It's likely a dependency pulled in by `@ethereumjs/common` or related libraries. \n```"
        },
        {
          "name": "bn.js",
          "motivation": "```markdown\nThe code frequently uses operations on large numbers, characteristic of blockchain interactions. It references `b.BN.isBN(e)`, `new b.BN(...)`, `o.gte(new b.BN(f.td)))`, `t.eq(e)`, `a.gt(o)`. The variable `b` likely refers to the `bn.js` library (or a similar BigNumber library), which is standard for Ethereum development in JavaScript and a dependency of `@ethereumjs/common`. \n```"
        },
        {
          "name": "events",
          "motivation": "```markdown\nThe `Common` class extends `m.EventEmitter`: `Common}(m.EventEmitter)`. This indicates the use of Node.js-style event emitter functionality, typically provided by the `events` module or a polyfill. It's used for signaling changes, like `this.emit(\"hardforkChanged\",e)`. This is often included as a dependency in larger libraries.\n```"
        },
        {
          "name": "crc-32",
          "motivation": "```markdown\nThe code includes functions clearly related to CRC32 checksum calculation, visible in module `34606`. It defines `t.table`, `t.bstr`, `t.buf`, `t.str` which are typical exports of a CRC32 library like `crc-32`. The calculation `(0,h.buf)(l)>>>0` uses one of these functions. This is likely used internally by `@ethereumjs/common` for fork hash calculation (`_calcForkHash`).\n```"
        }
      ]
    },
    {
      "file": "_next/static/chunks/6572-94ef728d7f8c370f.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code utilizes `l(67294)` which commonly maps to the 'react' package in webpack bundles. It also uses React hooks like `n.forwardRef`, `n.useRef`, `n.useState`, `n.useEffect`, `n.useCallback`, `n.useImperativeHandle` (where `n` is likely the imported React object) and JSX syntax via `(0,h.jsxs)` and `(0,v.jsx)` (where `h` and `v` likely correspond to JSX runtime functions)."
        },
        {
          "name": "Material-UI (MUI)",
          "motivation": "The code explicitly defines and uses components named `MuiTab`, `MuiTabs`, and `MuiTabScrollButton`. It heavily relies on MUI's styling solution (`(0,u.ZP)` which resembles `styled`), theming (`theme.typography`, `theme.palette`, `theme.transitions`, `theme.spacing`, `theme.breakpoints`), utility functions like `(0,c.Z)(l.textColor)` (likely `capitalize`), and follows MUI's naming conventions and component structure (e.g., `ownerState`, `slot`, `overridesResolver`, `useUtilityClasses`). Specific class names like `MuiTab-selected`, `MuiTabs-indicator`, `MuiTabs-scroller`, `MuiTabScrollButton-disabled` are generated and used."
        },
        {
          "name": "Next.js/Webpack",
          "motivation": "The code starts with `\"use strict\";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)`, which is the characteristic structure for code chunks bundled by Webpack in a Next.js application (`_N_E` stands for Next Export)."
        }
      ]
    },
    {
      "file": "_next/static/chunks/6662.d374adeb820c8fce.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code uses the `self.webpackChunk_N_E = self.webpackChunk_N_E || []` pattern, which is characteristic of Webpack's runtime for managing chunks, commonly seen in projects built with frameworks like Next.js."
        }
      ]
    },
    {
      "file": "_next/static/chunks/6714-ffe8c33f86985bf3.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code uses `(0,s.jsx)`, `(0,s.jsxs)` which are indicative of React's JSX runtime, `(0,a.useContext)`, `(0,a.useMemo)`, `v.createElement` which are React hooks and functions, and component-based structures typical of React applications."
        },
        {
          "name": "Material UI (MUI)",
          "motivation": "The code imports `MuiBox` (`(0,r.Z)(\"MuiBox\",[\"root\"])`) and uses components like `r.Z` (likely `Paper`), `i.Z` (likely `AccordionSummary`), `o.Z` (likely `AccordionDetails`), `c.Z` (likely `Skeleton`), `d.Z` (likely `ExpandMoreIcon`), `x.Z` (likely `Typography`), `u.Z` (likely `CircularProgress`), `I.Z` (likely `SvgIcon`), which are common MUI components or patterns derived from MUI's styling solution (`n(89609)`)."
        },
        {
          "name": "CSS Modules",
          "motivation": "The code imports stylesheets using syntax like `n.n(c)` or `n.n(p)` where the imported module is an object mapping class names (e.g., `container`, `disclaimerContainer`) to generated unique names (e.g., `styles_container__uByyg`), which is characteristic of CSS Modules usage, often integrated via build tools like webpack (`t.exports={container:\"styles_container__uByyg\"}`)."
        },
        {
          "name": "Date Formatting Library (likely date-fns)",
          "motivation": "The code calls a function `(0,l.Kb)(e.timestamp,\"MMM d, yyyy\")` within the `transactions_TxDateLabel` component (`n(26714)`). This pattern of passing a value (timestamp) and a format string (`\"MMM d, yyyy\"`) is typical for date formatting libraries like `date-fns` (specifically its `format` function)."
        }
      ]
    },
    {
      "file": "_next/static/chunks/6777.e39e0992b90e6886.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code uses the `self.webpackChunk_N_E` structure, which is characteristic of modules bundled by Webpack. Specifically, `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6777],{...}])` is a standard Webpack chunk loading mechanism."
        }
      ]
    },
    {
      "file": "_next/static/chunks/6787.53338ac78dbb50ad.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code uses JSX syntax (`(0,l.jsx)`) which is transpiled `React.createElement`. It also uses React hooks like `(0,o.useContext)(...)` and `(0,o.useCallback)(...)` (where `o` likely corresponds to `n(67294)` which is the React import)."
        },
        {
          "name": "Next.js",
          "motivation": "The code imports and uses `(0,a.useRouter)()` (where `a` is `n(11163)`, corresponding to `next/router`) and `(0,l.jsx)(i(), { href: ..., passHref: !0, legacyBehavior: !0, children: ... })` (where `i` is `n.n(s)` and `s` is `n(41664)`, corresponding to `next/link`). It also uses CSS Modules (`g().container` where `g` is derived from `n(88945)`), a common pattern in Next.js."
        },
        {
          "name": "Material UI (MUI)",
          "motivation": "The code imports and uses components that strongly suggest Material UI:\n*   `n(69417)` (imported as `r`) is used as a Button: `(0,l.jsx)(r.Z, { variant: \"contained\", sx: ..., fullWidth: !0, children: ... })`.\n*   `n(86886)` (imported as `C`) is used as a Grid container: `(0,o.jsx)(C.ZP, { container: !0, justifyContent: \"center\", children: ... })`.\n*   `n(15861)` (imported as `h`) is used for Typography: `(0,o.jsx)(h.Z, { variant: \"h1\", ... })`.\n*   `n(53219)` (imported as `p`) is used with `component: v.Z` which often indicates an `SvgIcon` wrapper.\n*   Other potential MUI components like `Paper`/`Box` (`n(90629)` imported as `f`) and `LinearProgress` (`n(83904)` imported as `_`) are likely used."
        }
      ]
    },
    {
      "file": "_next/static/chunks/684.84362a0ac694971b.js",
      "occurences": [
        {
          "name": "RxJS",
          "motivation": "The code extensively uses RxJS concepts and operators like `Observable`, `Subject`, `Subscription`, `pipe`, `subscribe`, and imports helper functions (`__values`, `__read`, `__spreadArray`, `__extends`) commonly associated with TypeScript compilation of RxJS code."
        },
        {
          "name": "Svelte",
          "motivation": "The code contains hallmarks of compiled Svelte components, including functions like `create_fragment`, `instance`, `init`, `mount_component`, `destroy_component`, `SvelteComponent`, lifecycle methods, and reactive updates (`$$set`, `$$update`). Specific components like `AccountSelect`, `AddressTable`, `Spinner`, `TableHeader`, and `CloseButton` are defined and used."
        },
        {
          "name": "ethers.js (Utilities)",
          "motivation": "The code imports and uses utility functions likely from ethers.js, specifically identified through patterns like `(0,E.e)` (likely `formatUnits` or similar for balance formatting) and `E.XI` (potentially chain/asset constants)."
        },
        {
          "name": "Joi",
          "motivation": "The code imports and uses a validation library, identified by patterns like `z.object`, `z.string`, `z.array`, `z.function`, `z.bool`, `z.number` (where `z` is the imported module). It's used in `validateSelectAccountOptions` for schema validation, which is characteristic of Joi or a similar library like Zod."
        },
        {
          "name": "@ethereumjs/common",
          "motivation": "The `getCommon` function explicitly imports modules (`Promise.all([n.e(6972),n.e(6344)]).then(n.t.bind(n,86344,19))`) identified as `@ethereumjs/common` (likely `Common` and `Hardfork`) and instantiates a `Common` object (`new s({chain:e||t,...i})`)."
        },
        {
          "name": "Webpack",
          "motivation": "The code starts with `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)`, which is the standard boilerplate for code bundled by Webpack."
        }
      ]
    },
    {
      "file": "_next/static/chunks/6848-ba876ac067bf5fc9.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code uses React hooks like `n.forwardRef`, `n.useCallback`, `n.useMemo`, `n.useContext`, JSX syntax `(0,n.jsx)(\"path\",...)`, and component patterns like `n.Children.toArray`. The variable `n` often corresponds to the `react` module in webpack bundles (`r(67294)`)."
        },
        {
          "name": "@mui/material",
          "motivation": "The code defines and uses Material UI components like `MuiAccordion`, `MuiAccordionDetails`, and `MuiAccordionSummary`. It utilizes MUI's styling utilities (`(0,d.ZP)`, `(0,l.Z)`, `useUtilityClasses`, `getAccordionUtilityClass`, `theme.spacing`, `theme.palette`). Functions like `(0,l.Z)({props:e,name:\"MuiAccordion\"})` directly reference MUI component naming conventions."
        },
        {
          "name": "ethers.js",
          "motivation": "The code explicitly exports `parseUnits` (`r.d(t,{vz:function(){return parseUnits}})`), a known utility function from ethers.js. It also instantiates an ethers.js logger (`new i.Logger(\"units/5.5.0\")`) and uses internal ethers functions likely related to big number handling or unit conversion (`(0,o.Ox)`)."
        }
      ]
    },
    {
      "file": "_next/static/chunks/6883.c27e3028d84776e3.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code uses the `self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)` pattern, which is characteristic of code bundled by Webpack, specifically for lazy-loading chunks in a Next.js environment (`_N_E` likely stands for Next Export)."
        }
      ]
    },
    {
      "file": "_next/static/chunks/6884.26c028830b1c03d3.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code uses the `self.webpackChunk_N_E` structure, which is characteristic of Webpack's module bundling and loading mechanism used in modern JavaScript applications, potentially within a Next.js framework (indicated by `_N_E`)."
        }
      ]
    },
    {
      "file": "_next/static/chunks/7075.e7140c75667dc8cc.js",
      "occurences": [
        {
          "name": "Next.js Runtime",
          "motivation": "The code starts with `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)`, which is characteristic of a Next.js webpack build artifact."
        },
        {
          "name": "ethers.js",
          "motivation": "The code extensively uses ethers.js v5 classes, functions, and patterns:\n*   Classes like `Contract`, `Signer`, `Provider`, `BigNumber`, `JsonRpcProvider`, `Web3Provider`, `Interface`, `TypedDataEncoder`, `SigningKey` are present.\n*   Functions like `getAddress`, `keccak256`, `resolveName`, `arrayify`, `hexlify`, `computePublicKey`, `recoverAddress`, `namehash` are used.\n*   Logging uses `new Logger(\"ethers-module/5.x.x\")` pattern.\n*   Network definitions (`homestead`, `ropsten`, `goerli`, etc.) and default provider logic match ethers.js.\n*   Error handling uses `Logger.errors.CODE` constants."
        },
        {
          "name": "RxJS",
          "motivation": "The code includes core RxJS classes and functions:\n*   Classes: `Observable`, `Subject`, `BehaviorSubject`, `Subscription`, `Subscriber`.\n*   Operators: `pipe`, `map`, `filter`, `share`, `shareReplay`, `distinctUntilChanged`, `takeUntil`, `switchMap`, `withLatestFrom`, `startWith`, `take`, `mergeMap`, `mergeAll`.\n*   Creation functions: `from`, `defer`, `innerFrom`, `fromEvent`, `fromEventPattern`.\n*   Utilities: `firstValueFrom`.\n*   Error types: `EmptyError`, `UnsubscriptionError`."
        },
        {
          "name": "Bowser",
          "motivation": "The code chunk starting with `51206:function(t){...}` bundles the Bowser user agent parsing library.\n*   It includes browser/OS/engine detection logic and regex patterns (modules 92, 93, 94, 95).\n*   Constants like `BROWSER_ALIASES_MAP`, `BROWSER_MAP`, `PLATFORMS_MAP`, `OS_MAP`, `ENGINE_MAP` (module 18) are present.\n*   The `Parser` class structure (module 91) matches Bowser's implementation."
        },
        {
          "name": "svelte-i18n",
          "motivation": "The code chunk starting with `53109:function(t,n,i){...}` contains logic specific to the svelte-i18n library.\n*   Functions like `addMessages`, `getLocaleFromNavigator`, `init` are defined.\n*   Internal state management using stores (`eo`, `eh`, `ey`, `e_`) for locale, messages, and loading status is evident.\n*   Locale lookup (`lookup`, `getPossibleLocales`) and message formatting (`formatMessage`, `$format`) logic is present.\n*   Default configuration structure (`ef`) matches svelte-i18n.\n*   It utilizes `@formatjs/intl-messageformat` internally."
        },
        {
          "name": "@formatjs/intl-messageformat",
          "motivation": "The code explicitly uses the `IntlMessageFormat` class (defined in module 53109) for parsing and formatting ICU messages.\n*   Includes the `Parser` class and associated logic for parsing ICU message syntax.\n*   Defines formatjs-specific error types like `FormatError`, `InvalidValueError`, `MissingValueError`.\n*   This library is a dependency of `svelte-i18n`."
        }
      ]
    },
    {
      "file": "_next/static/chunks/708-2a8eca8937387d2a.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code imports React (`a(67294)`) and uses its core hooks like `o.useState`, `o.useRef`, `o.useEffect`, `o.useCallback`, and `o.forwardRef`. Component structures also follow React patterns."
        },
        {
          "name": "Material UI (Mui)",
          "motivation": "The code extensively uses components and styling utilities prefixed with `Mui`, such as `MuiAutocomplete`, `MuiChip`, `MuiContainer`, `MuiLinearProgress`, `MuiButtonBase`, `MuiTextField`. It references Material UI's theme structure (`theme.palette`, `theme.typography`, `theme.breakpoints`, `theme.spacing`) and uses Material UI specific utility functions like `(0,Z.ZP)` (likely `styled`) and `(0,$.Z)` (likely `useThemeProps`). Specific components like `Autocomplete` (`a(20656)`), `Chip` (`a(20656)`), `Container` (`a(65582)`), and `LinearProgress` (`a(81458)`) are defined or imported."
        }
      ]
    },
    {
      "file": "_next/static/chunks/7091.0622aae1ebf9ffff.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code uses JSX syntax (`(0,l.jsx)`, `(0,o.jsxs)`) and React hooks like `(0,o.useContext)` and `(0,s.useEffect)` imported via `n(67294)`."
        },
        {
          "name": "Next.js Router",
          "motivation": "The code imports and uses `useRouter` from `n(11163)` which corresponds to `next/router` (`let e=(0,a.useRouter)())`."
        },
        {
          "name": "Next.js Link",
          "motivation": "The code imports `Link` from `n(41664)` (`i=n.n(r)`) which corresponds to `next/link` and uses it as a component `(0,l.jsx)(i(), ...)`."
        },
        {
          "name": "Material UI (or similar UI Component Library)",
          "motivation": "The code imports and uses various UI components like `c.Z`, `u.Z`, `L.Z`, `h.Z`, `C.Z`, `x.Z` (`n(69417)`, `n(15861)`, `n(34386)`, `n(53219)`, `n(25416)`) with props like `variant`, `sx`, `mb`, `fontSize`, `color`, `component`, which are characteristic of MUI or a similar component library."
        },
        {
          "name": "Safe{Wallet} Interaction Logic",
          "motivation": "The code imports a function `c.ed` from `n(76349)` used within a `RejectTx` component (`49166`). This function is called with `txNonce` (`(0,c.ed)(t)`) and its result is used with `setSafeTx` and `setSafeTxError` from a context `o.J`, indicating interaction with Safe transaction logic, likely fetching transaction details."
        }
      ]
    },
    {
      "file": "_next/static/chunks/7131.2bb6b1ed600a9292.js",
      "occurences": [
        {
          "name": "WalletConnect V2 Connector",
          "motivation": "The code explicitly calls a function `walletConnectV2` which initializes a connector with `version: 2` and uses a `projectId` (`n.pN`). It configures `qrModalOptions` and `requiredChains`, typical parameters for WalletConnect V2 setup, likely using a library like `@walletconnect/ethereum-provider` or a wrapper from a connection manager."
        },
        {
          "name": "Injected Wallet Connector (e.g., MetaMask)",
          "motivation": "The code references `u.n.INJECTED` and `a.lN.MetaMask` and calls `(0,a.ZP)()`. This pattern suggests the use of a library to connect to browser-injected wallets like MetaMask, possibly `@web3-react/injected-connector` or similar."
        },
        {
          "name": "Coinbase Wallet Connector",
          "motivation": "The code references `u.n.COINBASE` and calls `(0,r.Z)()`, passing a `darkMode` option. This indicates the integration of a Coinbase Wallet specific connector library, like `@web3-react/coinbase-wallet`."
        },
        {
          "name": "Ledger Connector",
          "motivation": "The code references `u.n.LEDGER` and calls `(0,d.Z)()`. This points to the use of a library for connecting Ledger hardware wallets, such as `@web3-react/ledger-connector`."
        },
        {
          "name": "Trezor Connector",
          "motivation": "The code references `u.n.TREZOR` and calls `(0,i.Z)()`, passing `appUrl` and `email`. This indicates the use of a library for connecting Trezor hardware wallets, like `@web3-react/trezor-connector`."
        },
        {
          "name": "Keystone Connector",
          "motivation": "The code references `u.n.KEYSTONE` and calls `(0,o.Z)()`. This suggests the integration of a library for connecting Keystone hardware wallets."
        }
      ]
    },
    {
      "file": "_next/static/chunks/7608.963d82f2392f21be.js",
      "occurences": [
        {
          "name": "webpack",
          "motivation": "The code uses the `self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)` pattern, which is characteristic of JavaScript code bundled using Webpack, specifically in a Next.js environment (`_N_E`)."
        }
      ]
    },
    {
      "file": "_next/static/chunks/7670.b097eec1ee2aeefc.js",
      "occurences": [
        {
          "name": "Next.js (via Webpack)",
          "motivation": "The code uses the `self.webpackChunk_N_E = self.webpackChunk_N_E || []).push(...)` pattern, which is characteristic of how Next.js manages and loads code-split JavaScript chunks via Webpack."
        }
      ]
    },
    {
      "file": "_next/static/chunks/7690.db3bfa2bded41056.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code imports and uses functions from `t(67294)`, which corresponds to the `react` library (e.g., `r.useContext`, `r.useEffect`)."
        },
        {
          "name": "Next.js",
          "motivation": "The code is wrapped in `self.webpackChunk_N_E=self.webpackChunk_N_E||[]`, a pattern typical for code chunks generated by Next.js using Webpack. It also imports from `t(23401)` which corresponds to `next/link` (`l.Z`)."
        },
        {
          "name": "Safe{Core} SDK (or related Safe libraries)",
          "motivation": "The code imports and uses multiple functions and constants specific to Safe operations:\n*   `t(56564)`: `u.OperationType` (likely from `@safe-global/safe-core-sdk-types`)\n*   `t(59883)`: `(0,h.rK)` and `(0,h.s0)` are used to get contract deployments/instances (likely `getSingletonDeployment` and `getSafeContract` from `@safe-global/safe-deployments` or SDK).\n*   `t(48296)`: `(0,f.WW)` likely corresponds to `assertValidSafeVersion`.\n*   `t(91692)`: `p.SAFE_FEATURES` likely maps to Safe feature flags.\n*   `t(47671)`: `(0,g.Nu)` likely corresponds to `supportsFeature`.\n*   `t(75684)`: `c.Wu` seems to be a constant representing the target Safe contract version.\n*   Functions like `createUpdateSafeTxs`, `getChangeFallbackHandlerCallData` explicitly interact with Safe contract ABIs (`encode(\"setFallbackHandler\", ...)`)."
        },
        {
          "name": "UI Component Library",
          "motivation": "The code imports and uses components like `Z` from `t(15861)`, `t(76349)`, `t(26558)`, and `t(4487)`. These are used for rendering UI elements (text, layout, icons) typical of libraries like Material UI, Chakra UI, or a custom internal library."
        }
      ]
    },
    {
      "file": "_next/static/chunks/7744.ceb48a8350c0271e.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code uses `t(67294)` which typically corresponds to the `react` package in Webpack bundles. It also uses React hooks like `(0,r.useState)`, `(0,r.useCallback)`, `(0,r.useMemo)`, `(0,r.useEffect)`, `(0,r.useContext)`, `(0,r.useId)` where `r = t(67294)`."
        },
        {
          "name": "Material UI",
          "motivation": "The code imports and uses numerous Material UI components, such as `t(15861)` (Typography), `t(69417)` (Button), `t(87109)` (InputAdornment), `t(33841)` (InputLabel), `t(57709)` (Input), `t(93946)` (IconButton), `t(53219)` (SvgIcon), `t(94054)` (FormControl), `t(67720)` (Divider), `t(61903)` (Select), `t(18972)` (MenuItem), `t(20656)` (Autocomplete), `t(14701)` (TextField), `t(86886)` (Grid), `t(68061)` (RadioGroup), `t(50480)` (FormControlLabel), `t(34386)` (Tooltip), `t(36872)` (Radio), and icons like `t(81402)` (AddCircleOutlineIcon) and `t(25416)` (HelpOutlineIcon)."
        },
        {
          "name": "React Hook Form",
          "motivation": "The code uses functions like `(0,h.Gc)()` (likely `useFormContext`), `(0,h.Qr)` (likely `Controller`), `(0,h.U2)` (likely `get`), `(0,h.cI)` (likely `useForm`), `(0,p.RV)` (likely `FormProvider`) where `h = t(87536)` and `p = t(87536)`, which are characteristic of the `react-hook-form` library."
        },
        {
          "name": "Safe{Core} SDK & Related Components/Hooks",
          "motivation": "The code utilizes various hooks and functions related to Gnosis Safe / Safe{Wallet}, such as `t(59243)` (`useSafeBalances`), `t(12768)` (`useIsSafeOwner`), `t(1694)` (`useWeb3`), `t(57024)` (`selectSpendingLimits`), `t(89773)` (`useAppSelector` - likely with Redux Toolkit state managed by the Safe app), `t(76349)` (containing functions like `proposeSafeTx`, `simulateTx`, `executeSpendingLimitTx`), `t(63186)` (`useWeb3ReadOnly`), `t(74358)` (`getSpendingLimitModuleContract`), `t(77782)` (`useChainId`), `t(93532)` (`useEstimateTransactionGas`), `t(53234)` (`useSafeInfo`), `t(90477)` (`useGasPrice`), `t(98941)` (`getSpendingLimitContract`), `t(12562)` (`useWeb3Signer`). These suggest integration with the Safe{Core} SDK and the Safe{Wallet} application's infrastructure."
        },
        {
          "name": "ethers.js",
          "motivation": "The code references operations commonly handled by ethers.js, such as `estimateGas` (`s.estimateGas.executeAllowanceTransfer`), BigNumber operations (`t(2593)` which is likely `ethers.BigNumber` via `c.O$`), parsing units (`t(61744)` likely `parseUnits`), and contract interaction patterns (`t(74358)` `getSpendingLimitModuleContract`, `t(98941)` `getSpendingLimitContract`). While not directly imported as 'ethers', its functionalities are used, often via the Safe SDK or related hooks."
        }
      ]
    },
    {
      "file": "_next/static/chunks/7895.3348dfd51add0f12.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code uses `(0,r.jsx)` which corresponds to `jsx` from `react/jsx-runtime`, `(0,d.useContext)` and `(0,d.useEffect)` which correspond to React hooks (`useContext`, `useEffect`), indicating the use of the React library."
        },
        {
          "name": "Material UI (MUI)",
          "motivation": "The code imports and uses components like `Grid` (referenced as `l.ZP`) with props like `container`, `gap`, `alignItems`, `item`, `xs` and `Typography` (referenced as `a.Z`) with props like `variant`, `my`. These are characteristic components and props of the Material UI library."
        },
        {
          "name": "Gnosis Safe / Safe{Core} SDK related",
          "motivation": "The code calls a function `(0,u.p$)(s.address)` within a component named `ReviewRemoveModule` and uses the result to set transaction data (`setSafeTx`). This function takes an address and returns a Promise, suggesting interaction with Safe contracts or the Safe Transaction Service API, likely part of a Safe SDK or related utility library to prepare or fetch details about a module removal transaction."
        }
      ]
    },
    {
      "file": "_next/static/chunks/8036.da47922fc1f1bdb2.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code uses the `self.webpackChunk_N_E` structure, which is characteristic of Webpack's module loading, often seen in projects built with frameworks like Next.js."
        }
      ]
    },
    {
      "file": "_next/static/chunks/8121.37792209cac32f2d.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code uses React's JSX syntax (transpiled to functions like `(0,l.jsxs)` and `(0,l.jsx)`) and hooks like `(0,a.useContext)` and `(0,a.useEffect)` (where `a` likely corresponds to the `react` module)."
        },
        {
          "name": "Material UI (MUI)",
          "motivation": "The code imports and uses components with patterns commonly associated with MUI, such as `s.Z` (likely `Box`), `a.Z` (likely `SvgIcon`), `d.Z` (likely `Typography`), `l.Z` (likely a layout component), `m.ZP` (likely `Grid`), `u.Z` (likely `Typography`), `h.Z` (likely a custom component using MUI), `c.Z` (likely `AddressLabel` or similar using MUI). The usage of `variant`, `color`, `gap`, `container`, `item`, `md` props aligns with MUI's API."
        },
        {
          "name": "ethers.js / viem",
          "motivation": "The code interacts with Ethereum concepts. It calls `(0,o.xl)().encodeFunctionData(\"deleteAllowance\", [t.beneficiary, t.token.address])` which is characteristic of encoding contract call data using libraries like `ethers.js` (via `Interface.encodeFunctionData`) or `viem` (`encodeFunctionData`). The presence of addresses, tokens, and allowance management further suggests an Ethereum interaction library."
        },
        {
          "name": "Safe{Wallet} SDK/Hooks",
          "motivation": "The code uses context related to Safe{Wallet}: `(0,a.useContext)(d.J)` retrieves `setSafeTx` and `setSafeTxError`. It also prepares transaction data specifically for a Safe transaction via `(0,b.VQ)({to:e,value:\"0\",data:l}).then(n).catch(r)`, where `n` is likely `setSafeTx`. Hooks like `(0,s.ZP)` (potentially `useSafeAppsSDK` or similar) and `(0,p.Z)` (fetching balances, likely `useBalances`) are used within this Safe context."
        },
        {
          "name": "Date/Time Formatting Utility",
          "motivation": "The code uses a function `(0,f.GV)(t.lastResetMin,t.resetTimeMin)` to format time values related to the spending limit reset, indicating a utility or library for date/time formatting."
        }
      ]
    },
    {
      "file": "_next/static/chunks/8171.47cd9dd32608b6c7.js",
      "occurences": [
        {
          "name": "@ledgerhq/hw-transport",
          "motivation": "The code defines a `Transport` base class and a `TransportWebUSB` class extending it. It includes methods like `exchange`, `open`, `close`, `setScrambleKey`, handles Ledger device models (`nanoS`, `nanoX`, etc.), uses specific error classes (e.g., `c.PS`, `c.rZ`), and implements HID framing (`hid_framing`) for communication, all characteristic of the Ledger Hardware Transport library, specifically for WebUSB interaction (`navigator.usb`)."
        },
        {
          "name": "EventEmitter (minified)",
          "motivation": "The code initializes `this._events = new(s())` within the `Transport` constructor and uses methods `on`, `off`, and `emit` on `this._events`. This pattern strongly indicates the use of an event emitter library, although it's minified (`s`)."
        },
        {
          "name": "Buffer",
          "motivation": "The code explicitly imports and uses `Buffer` via `n(48764).Buffer` (assigned to `a` and `b`) for operations like `a.alloc()`, `a.from()`, `a.concat()`, `s.readUInt16BE()`, and `t.toString('hex')`. This indicates the usage of the Buffer library, likely a polyfill for the browser environment."
        },
        {
          "name": "semver (minified)",
          "motivation": "The code imports a module via `n(81249)` (assigned to `h`, then `f=n.n(h)`) and uses methods like `f().lt(...)` (less than) and `f().coerce(...)` when determining block size based on firmware version (`getBlockSize:e=>{var t;return f().lt(null!==(t=f().coerce(e))&&void 0!==t?t:\"\",\"2.0.0\")?4096:2048}`). These functions are typical of the `semver` library for version comparison."
        }
      ]
    },
    {
      "file": "_next/static/chunks/825.56e6e85410c669a5.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code uses the `self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)` structure, which is characteristic of JavaScript code bundled by Webpack."
        },
        {
          "name": "Next.js",
          "motivation": "The specific webpack chunk name format `self.webpackChunk_N_E` is commonly associated with applications built using the Next.js framework."
        }
      ]
    },
    {
      "file": "_next/static/chunks/8300.446a65ab16b0c6a4.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code uses the `self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)` pattern, which is characteristic of code bundled by Webpack."
        }
      ]
    },
    {
      "file": "_next/static/chunks/8500.ac8ab5ef1f076558.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code uses the `self.webpackChunk_N_E.push` pattern, which is characteristic of how Webpack manages and loads code chunks, especially in frameworks like Next.js."
        },
        {
          "name": "Next.js (implied)",
          "motivation": "The specific chunk naming convention `self.webpackChunk_N_E` and the file path `_next/static/chunks/...` strongly suggest this code is part of a Next.js application build output."
        }
      ]
    },
    {
      "file": "_next/static/chunks/8689.2b9a1b9931e7bf97.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code imports and uses `React` (identified by `t(67294)` which is commonly `react` in webpack bundles) and JSX (`t(85893)` which is commonly `react/jsx-runtime`). It uses React concepts like `forwardRef`, `useContext`, `useRef`, `useMemo`, `useState` (implied by `(0,l.Z)` which seems to be `useControlled`), and functional components."
        },
        {
          "name": "Material UI",
          "motivation": "The code explicitly imports and uses several Material UI components and utilities: `CardActions` (`t(62023)`), `FormGroup` (`t(53457)`), `Radio` (`t(36872)`), `RadioGroup` (`t(68061)`), `SvgIcon` (`t(82066)`), `createSvgIcon` (`t(91941)`), `useThemeProps` (`t(71657)`), `styled` (`t(90948)`), `generateUtilityClass` (`t(34867)`), `generateUtilityClasses` (`t(1588)`), `useFormControl` (`t(74423)`), `formControlState` (`t(15704)`), `capitalize` (`t(98216)`), `useControlled` (`t(49299)`), `useForkRef` (`t(51705)`), `useId` (`t(27909)`), `ButtonBase` (`t(21964)`), `alpha` (`t(41796)`). The class names like `MuiCardActions`, `MuiFormGroup`, `MuiRadio` further confirm its use."
        },
        {
          "name": "clsx",
          "motivation": "The code uses `(0,i.Z)` which is often the minified representation of the `clsx` library (or a similar class name joining utility) for conditionally joining CSS classes, seen in `(0,i.Z)(d.root,s)` and `(0,i.Z)(h.root,n)` and `(0,i.Z)(j.root,w)`."
        }
      ]
    },
    {
      "file": "_next/static/chunks/8768.f5cf29f61ad05112.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code imports `react` (identified by `l(67294)`) and `react/jsx-runtime` (identified by `l(85893)`). It uses core React concepts like `useState`, `useMemo`, `useCallback`, `useEffect`, `useContext`, functional components, and JSX syntax (`(0,f.jsx)`)."
        },
        {
          "name": "Material UI (MUI)",
          "motivation": "The code imports and uses various components that are characteristic of Material UI, such as `ListItem` (`l(97212)` -> `y.ZP`), `Paper` (`l(67358)` -> `Z.Z`), `Accordion` (`l(38895)` -> `w.Z`), `AccordionSummary` (`l(80822)` -> `O.Z`), `AccordionDetails` (`l(22797)` -> `I.Z`), `IconButton` (`l(47739)` -> `D.Z`), `Box` (`l(80822)` -> `O.Z`), `SvgIcon` (`l(53219)` -> `B.Z`), and icons like `ExpandMoreIcon` (`l(23508)` -> `E.Z`). Styling props like `sx` are also used."
        },
        {
          "name": "Zustand",
          "motivation": "The code defines and uses a custom hook `useDraftBatch` which likely interacts with a Zustand store. This hook utilizes functions imported via `l(77782)` (`g.ZP`), `l(50080)` (`j.Z`), and `l(89773)` (`b.CG`). The pattern `(0, b.CG)(l => (0, L.De)(l, e, t))` strongly suggests selecting state from a store, a common pattern in Zustand. The imported functions `g.ZP` and `j.Z` might be hooks like `useChainId` and `useSafeAddress` often used alongside Zustand in web3 contexts."
        },
        {
          "name": "Gnosis Safe related library/utilities",
          "motivation": "The code imports `OperationType.Call` from `l(56564)` (`v`), a specific constant used in Gnosis Safe transactions. It defines a function `getData` to format transaction parameters (`to`, `value`, `data`, `operation`) suitable for Safe interactions. The `ConfirmBatch` component calls a function `(0, p.Fh)(e)` (imported from `l(76349)`) which takes an array of these transaction objects and likely uses a Safe SDK (like `safe-core-sdk` or similar) internally to prepare a batched transaction (e.g., via MultiSend) as indicated by the subsequent call to `setSafeTx`."
        }
      ]
    },
    {
      "file": "_next/static/chunks/9022.5e4f15c11258caba.js",
      "occurences": [
        {
          "name": "RxJS",
          "motivation": "The code defines functions `take` and `takeUntil`, which are standard operators in the RxJS library. It also uses concepts like `subscribe`, `complete`, and `next`, common in reactive programming and specifically in RxJS's Observable implementation. The dependencies referenced (e.g., `e(80663).y`, `e(31107).e`) likely correspond to internal RxJS modules within the webpack bundle."
        }
      ]
    },
    {
      "file": "_next/static/chunks/9343.0d66ff3a77c521ec.js",
      "occurences": [
        {
          "name": "WalletConnectModal",
          "motivation": "The code explicitly defines a class `WalletConnectModal` (`class d{constructor(e){...}}`). It references WalletConnect concepts like `walletConnectUri`, `WALLETCONNECT_DEEPLINK_CHOICE`, `setWalletConnectDeepLink`, and makes API calls to `explorer-api.walletconnect.com`. It also dynamically creates a `<wcm-modal>` HTML element (`document.createElement(\"wcm-modal\")`). The overall structure with controllers like `ConfigCtrl`, `ExplorerCtrl`, etc., manages the state and configuration for a WalletConnect modal interface."
        },
        {
          "name": "Internal Proxy-Based State Management",
          "motivation": "The code defines functions like `proxy`, `subscribe`, and `buildProxyFunction` to create reactive state objects (`p`, `m`, `v`, `I`, `_`, `$`, `q`, `Q`). These functions and the associated `WeakMap` usage (`i`, `c`) indicate a custom or internal state management system used throughout the controllers (`ConfigCtrl`, `ExplorerCtrl`, `OptionsCtrl`, etc.) to manage and react to state changes."
        }
      ]
    },
    {
      "file": "_next/static/chunks/9513.cc01238f383b2ad4.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code uses the `self.webpackChunk_N_E` pattern, which is characteristic of JavaScript code bundled using Webpack, commonly seen in Next.js applications (`_N_E`)."
        }
      ]
    },
    {
      "file": "_next/static/chunks/9550.99c5a2822184920e.js",
      "occurences": [
        {
          "name": "elliptic",
          "motivation": "The code explicitly instantiates and uses the elliptic curve library for secp256k1 operations: `new (l(86266)).ec(\"secp256k1\")` and uses its methods like `keyFromPrivate`, `getPublic`, `sign`, `verify`, `derive` via internal modules (`l(38363)`)."
        },
        {
          "name": "eth-crypto",
          "motivation": "The main module `69264` exports a suite of functions (`createIdentity`, `encryptWithPublicKey`, `decryptWithPrivateKey`, `sign`, `recover`, `publicKeyByPrivateKey`, `signTransaction`) that closely match the API and functionality of the `eth-crypto` library, utilizing lower-level crypto (like `l(86215)` for ECIES) and elliptic curve operations."
        },
        {
          "name": "Buffer",
          "motivation": "The code frequently uses `Buffer` (e.g., `l(48764).Buffer`) for handling binary data, including methods like `Buffer.from`, `Buffer.concat`, `Buffer.isBuffer`, indicating the use of the Node.js `buffer` polyfill."
        },
        {
          "name": "crypto",
          "motivation": "The code uses cryptographic primitives like hashing (`createHash`), HMAC (`createHmac`), random byte generation (`randomBytes`), and AES encryption/decryption (`createCipheriv`, `createDecipheriv`) via an internal module `l(42474)`, consistent with the Node.js `crypto` polyfill."
        },
        {
          "name": "EthereumJS libraries (Util, Tx, etc.)",
          "motivation": "The code utilizes various utility functions commonly found in EthereumJS libraries, imported via webpack modules: Address generation/validation (`pubToAddress`, `toChecksumAddress`, `generateAddress`, `privateToPublic` from `l(22751)`), transaction signing (`Transaction.fromTxData`, `.sign` from `l(66052)`), signature handling (`splitSignature`, `joinSignature` from `l(16441)`), and Keccak hashing (`keccak256` from `l(38197)`, `l(46352)`)."
        },
        {
          "name": "secp256k1 (JS binding)",
          "motivation": "Module `l(89190)` wraps lower-level secp256k1 operations (`l(38363)`) providing functions like `publicKeyConvert`, `ecdsaSign`, `ecdsaVerify`, `ecdsaRecover`, likely using a WebAssembly or pure JS implementation."
        },
        {
          "name": "vm-browserify",
          "motivation": "The code includes module `l(51951)`, which is the `vm-browserify` package, providing functionality to run JavaScript code in a sandboxed context (`Script`, `runInContext`). This is indicated by the structure and exported functions within that module."
        }
      ]
    },
    {
      "file": "_next/static/chunks/9579.13f67ca86b2dc90c.js",
      "occurences": [
        {
          "name": "Next.js (via Webpack)",
          "motivation": "The code uses the `self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push` pattern, which is characteristic of code bundled by Webpack, specifically within a Next.js application (indicated by the `_N_E` suffix)."
        }
      ]
    },
    {
      "file": "_next/static/chunks/9627-00c4ffb20ca58149.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code uses React hooks like `b.forwardRef`, `b.useEffect`, `b.useState`, `b.useRef`, `b.useReducer`, `b.useCallback`, `b.useMemo` and functions like `b.createElement`, `b.Fragment`. The variable `b` is likely referencing the React library imported elsewhere."
        },
        {
          "name": "Material UI (MUI)",
          "motivation": "The code uses functions and patterns characteristic of MUI, such as `getCollapseUtilityClass`, component naming conventions (`MuiCollapse`), styling functions like `(0,j.ZP)` (likely `styled`), theme access (`theme.transitions`), and utility functions like `(0,$.Z)`, `(0,K.Z)`, `(0,U.Z)`."
        },
        {
          "name": "Papaparse",
          "motivation": "A significant portion of the code contains the minified source of the Papaparse library. This is evident from the presence of functions like `b.parse`, `b.unparse`, classes like `E` (Parser), `h` (Streamer base), `l` (NetworkStreamer), `c` (FileStreamer), `p` (StringStreamer), and constants like `b.RECORD_SEP`, `b.DEFAULT_DELIMITER`, `b.WORKERS_SUPPORTED`. It is also explicitly called using `f().parse` and `f().unparse` where `f` is likely the imported Papaparse module."
        },
        {
          "name": "react-csv-reader / react-dropzone derivative",
          "motivation": "The code defines React components `CSVReader` and `CSVDownloader` within a hook `z()`. `CSVReader` uses React hooks (`useRef`, `useReducer`, `useEffect`, `useCallback`) to manage file input state (drag state, file processing, progress). It handles file input events (`onChange`, `onClick`), drag and drop events (`onDrop`, `onDragEnter`, `onDragLeave`, `onDragOver`), and provides props getters (`getRootProps`, `getRemoveFileProps`). It internally uses Papaparse (`f().parse`) for CSV processing and includes file validation logic (size, type, count). These patterns are common in libraries like `react-csv-reader` or `react-dropzone`."
        }
      ]
    },
    {
      "file": "_next/static/chunks/9698.a7d6d17b73adc052.js",
      "occurences": [
        {
          "name": "Ledger Hardware Wallet Transport Layer (@ledgerhq/hw-transport or similar)",
          "motivation": "```markdown\nThe code defines a base `Transport` class and a specific implementation `TransportU2F` extending it. It includes typical transport methods like `exchange`, `close`, `setScrambleKey`, event handling (`on`, `off`, `emit`), and transport-specific error types (`TransportError`, `TransportStatusError`, `TransportRaceCondition`). This structure is characteristic of Ledger's hardware wallet transport libraries. The `TransportU2F` class specifically implements communication via the U2F standard.\n```"
        },
        {
          "name": "U2F Communication Library (u2f-api or similar)",
          "motivation": "```markdown\nModules `t(71823)`, `t(63845)`, and `t(49145)` implement U2F communication logic. Module `t(63845)` explicitly defines U2F message types (`U2F_REGISTER_REQUEST`, `U2F_SIGN_REQUEST`), error codes, and logic to communicate with a U2F Chrome Extension (ID: `kmendfapggjehodndflmmgagdbamhnfd`) or an iframe for U2F operations. Module `t(49145)` wraps this, providing promise-based `sign` and `register` functions that interact with either the native browser `window.u2f` object or the extension communication layer from module `t(63845)`.\n```"
        },
        {
          "name": "events",
          "motivation": "```markdown\nThe code initializes an `_events` property using `new (a())`, where `a` is imported via `t(17187)`. This `_events` object is subsequently used with methods like `this.on`, `this.off`, and `this.emit`, which are standard methods for an event emitter pattern implementation, commonly provided by libraries like Node.js's 'events' module or similar packages.\n```"
        },
        {
          "name": "buffer",
          "motivation": "```markdown\nThe code imports Buffer functionality via `t(48764)` (assigned to `l` and `d`). It uses methods like `d.from()`, `d.alloc()`, `l.from()`, `l.concat()`, and `l.readUInt16BE()` to manipulate binary data, specifically for constructing and parsing APDU commands exchanged with the Ledger device via U2F. This indicates the use of a Buffer implementation, similar to Node.js's 'buffer' module.\n```"
        }
      ]
    },
    {
      "file": "_next/static/chunks/972.ae78b24b706d9b25.js",
      "occurences": [
        {
          "name": "@keystonehq/keystone-sdk",
          "motivation": "The code imports `KeystoneSDK` from `keystone-sdk` or a related package (`er(35300)`, `er(6858)`). It initializes and uses the SDK instance (`this.keystoneSDK = ep.getSdk()`), calling methods like `read`, `play`, `readCryptoHDKeyOrCryptoAccount`, and `requestSignature`.\n\n```javascript\nvar ep=e(er(14178)),em=er(59147),ey=e(em),ev=e(er(49715)),e_=er(17187),ew=er(578),eE=e(er(86224)),eT=er(16139);\n// ...\nvar w=()=>{let[$,{read:er,play:en,cameraReady:eo}]=(()=>{var $;let er=em.useMemo(()=>new e_.EventEmitter,[]),\n// ...\net.default={bootstrap:()=>{/*...*/},getSdk:()=>{if(eA)return{read:eB,play:eD,cameraReady:eR};throw Error(\"SDK is not initialized\")}}},\n// ...\nlet o=class o{constructor(){if(this.keystoneSDK=void 0,this.readCryptoHDKeyOrCryptoAccount=async()=>{let $=await this.keystoneSDK.read([eu.SupportedResult.UR_CRYPTO_HDKEY,eu.SupportedResult.UR_CRYPTO_ACCOUNT],{/*...*/});\n// ...\nthis.requestSignature=async($,et,er)=>{if(await this.keystoneSDK.play($.toUR(),{/*...*/})===eu.PlayStatus.canceled)throw Error(\"#ktek_error[play-cancel]: play canceled\");\n// ...\n```"
        },
        {
          "name": "ur-registry",
          "motivation": "The code heavily utilizes classes and functions related to the UR (Uniform Resource) specification, commonly found in the `ur-registry` or `@ngraveio/bc-ur` libraries. Examples include `URRegistryDecoder`, `UR`, `UREncoder`, `CryptoHDKey`, `CryptoAccount`, `DataItem`, `RegistryTypes`, `fromCBOR`, `toUR`, etc. This indicates processing of data encoded in UR format, often used for air-gapped communication like QR codes.\n\n```javascript\nlet eE={ETH_SIGN_REQUEST:new ey.RegistryType(\"eth-sign-request\",401),ETH_SIGNATURE:new ey.RegistryType(\"eth-signature\",402),ETH_NFT_ITEM:new ey.RegistryType(\"eth-nft-item\",403)},{decodeToDataItem:eT,RegistryTypes:eC}=ey.extend;\n// ...\nlet URRegistryDecoder=class URRegistryDecoder extends en.URDecoder{constructor(){super(...arguments),this.resultRegistryType=()=>{let $=this.resultUR();switch($.type){case es.RegistryTypes.BYTES.getType():return eo.Bytes.fromCBOR($.cbor);\n// ...\nthis.toUR=()=>new en.UR(this.toCBOR(),this.getRegistryType().getType()),\n// ...\n```"
        },
        {
          "name": "@ethereumjs/tx",
          "motivation": "The code imports and uses transaction classes like `TransactionFactory`, `FeeMarketEIP1559Transaction`, `AccessListEIP2930Transaction`, and `Transaction` (legacy). It constructs transaction objects, calls methods like `fromTxData`, `serialize`, `getMessageToSign`, `hash`, `getSenderPublicKey`, and interacts with transaction properties (`nonce`, `gasLimit`, `to`, `value`, `data`, `v`, `r`, `s`, `chainId`, `maxFeePerGas`, `maxPriorityFeePerGas`, `accessList`). This points to the usage of the `@ethereumjs/tx` library for creating and managing Ethereum transactions.\n\n```javascript\nvar ep=er(28916);\nObject.defineProperty(et,\"AccessListEIP2930Transaction\",{enumerable:!0,get:function(){return es(ep).default}});\nvar em=er(3738);\nObject.defineProperty(et,\"TransactionFactory\",{enumerable:!0,get:function(){return es(em).default}});\nvar ey=er(77905);\nObject.defineProperty(et,\"FeeMarketEIP1559Transaction\",{enumerable:!0,get:function(){return es(ey).default}});\n// ...\nreturn ey.TransactionFactory.fromTxData({...et.toJSON(),type:et.type,r:ew,s:eE,v:eT},{common:et.common})\n```"
        },
        {
          "name": "ethereumjs-util",
          "motivation": "The code uses numerous utility functions commonly found in `ethereumjs-util` (or its successor `@ethereumjs/util`). Functions like `toBuffer`, `publicToAddress`, `keccak256`, `ecrecover`, `rlp` (for encoding/decoding), `BN` (from the `bn.js` dependency often used with it), `bufferToHex`, `stripHexPrefix`, `bnToHex`, `bnToUnpaddedBuffer` are frequently called.\n\n```javascript\nvar em=es(er(2832)),ey=er(22751),ev=er(86688),e_=function(){function BaseTransaction($){this.cache={hash:void 0,dataFee:void 0},this.activeCapabilities=[],this.DEFAULT_CHAIN=em.Chain.Mainnet,this.DEFAULT_HARDFORK=em.Hardfork.Istanbul;\nvar et=$.nonce,er=$.gasLimit,en=$.to,eo=$.value,es=$.data,eu=$.v,ep=$.r,ev=$.s,e_=$.type;\nthis._type=new ey.BN((0,ey.toBuffer)(e_)).toNumber();\n// ...\nthis.nonce=new ey.BN((0,ey.toBuffer)(\"\"===et?\"0x\":et)),this.gasLimit=new ey.BN((0,ey.toBuffer)(\"\"===er?\"0x\":er)),\n// ...\ner=0===et.type?em.rlp.encode(et.getMessageToSign(!1)):et.getMessageToSign(!1);\n// ...\nreturn(0,ep.ecrecover)(er,eo.addn(27),(0,ep.bnToUnpaddedBuffer)(es),(0,ep.bnToUnpaddedBuffer)(eu))\n```"
        },
        {
          "name": "hdkey",
          "motivation": "The code imports a module aliased as `ep` (likely `hdkey` or a similar BIP32 implementation like `@metamask/bip32-keyring`) using `er(49840)`. It then calls methods like `fromExtendedKey` and `derive` to perform hierarchical deterministic key derivation based on paths (`this.hdk.derive(\"`${$}/${er}`\"). This indicates the use of a BIP32 HD wallet library.\n\n```javascript\nvar eo,es,eu,ep=(eo=er(49840))&&\"object\"==typeof eo&&\"default\"in eo?eo.default:eo,em=er(22751),ey=er(28916),ev=er(13982),e_=er(97466);\n// ...\nif(this.keyringMode===es.hd){this.checkKeyring(),this.hdk||(this.hdk=ep.fromExtendedKey(this.xpub));let er=this.childrenPath.replace(\"*\",String(et)).replace(/\\*/g,\"0\"),en=this.hdk.derive(`${$}/${er}`),eo=\"0x\"+em.publicToAddress(en.publicKey,!0).toString(\"hex\");return em.toChecksumAddress(eo)}\n```"
        },
        {
          "name": "React",
          "motivation": "The code contains numerous calls to `ey.createElement` (where `ey` is likely `React` imported via `er(59147)`), uses hooks like `ey.useState`, `ey.useMemo`, `ey.useEffect`, `ey.Suspense`, and defines components (`class ModalPortal extends eu.Component`). This is characteristic of a React application.\n\n```javascript\nvar em=er(59147),ey=e(em)\n// ...\nlet[$,et]=em.useState(!1),[er,en]=em.useState([]),[eo,es]=em.useState(new eT.URDecoder),[eu,ep]=em.useState(\"\"),ev=em.useMemo(()=>new e_.EventEmitter,[]),\n// ...\n[en?ey.createElement(\"div\",{style:{display:\"flex\",flexDirection:\"column\",alignItems:\"center\"}}\n// ...\n```"
        },
        {
          "name": "react-dom",
          "motivation": "The code includes references to functions like `ep.default.createPortal` and `ep.default.unstable_renderSubtreeIntoContainer` (where `ep` is likely `react-dom` imported via `er(14178)`). It also mentions `ReactDOM.render` within the `bootstrap` function (`ep.render(ey.createElement(w),et)`). These are core functions for interacting with the DOM in a React application.\n\n```javascript\nep=_interopRequireDefault(er(14178))\n// ...\nvar getCreatePortal=function(){return ex?ep.default.createPortal:ep.default.unstable_renderSubtreeIntoContainer};\n// ...\net.default={bootstrap:()=>{let $=document.getElementsByTagName(\"body\").item(0),et=document.createElement(\"div\");et.id=\"kv_sdk_container\",$.appendChild(et),ev.setAppElement(\"#kv_sdk_container\"),ep.render(ey.createElement(w),et)},getSdk:()=>{/*...*/}}\n```"
        },
        {
          "name": "qrcode.react",
          "motivation": "The code defines a component `c` which renders a `QRCode` component (`ey.createElement(eE,{value:et,size:$,level:er})`) likely imported from `qrcode.react` (represented by `eE=e(er(86224))`). This component takes props like `value`, `size`, and `level`, typical for QR code generation libraries in React.\n\n```javascript\nvar eE=e(er(86224)),eT=er(16139);\nlet c=({size:$=200,data:et=\"\",ecl:er=\"L\"})=>ey.createElement(eE,{value:et,size:$,level:er});\n```"
        },
        {
          "name": "react-modal",
          "motivation": "The code imports and uses a `Modal` component (likely from `react-modal` represented by `er(49715)` and `er(45408)`), calls `Modal.setAppElement`, and uses props like `isOpen`, `onRequestClose`, `style`, `portalClassName`, `overlayClassName`, `contentLabel`, `ariaHideApp`, which are characteristic of the `react-modal` library.\n\n```javascript\nvar ev=e(er(49715))\n// ...\neS.propTypes={isOpen:em.default.bool.isRequired,style:em.default.shape({content:em.default.object,overlay:em.default.object}),portalClassName:em.default.string,bodyOpenClassName:em.default.string,htmlOpenClassName:em.default.string,className:em.default.oneOfType([em.default.string,em.default.shape({base:em.default.string.isRequired,afterOpen:em.default.string.isRequired,beforeClose:em.default.string.isRequired})]),overlayClassName:em.default.oneOfType([em.default.string,em.default.shape({base:em.default.string.isRequired,afterOpen:em.default.string.isRequired,beforeClose:em.default.string.isRequired})]),appElement:em.default.oneOfType([em.default.instanceOf(ew.default),em.default.instanceOf(e_.SafeHTMLCollection),em.default.instanceOf(e_.SafeNodeList),em.default.arrayOf(em.default.instanceOf(ew.default))]),onAfterOpen:em.default.func,onRequestClose:em.default.func,closeTimeoutMS:em.default.number,ariaHideApp:em.default.bool,shouldFocusAfterRender:em.default.bool,shouldCloseOnOverlayClick:em.default.bool,shouldReturnFocusAfterClose:em.default.bool,preventScroll:em.default.bool,parentSelector:em.default.func,aria:em.default.object,data:em.default.object,role:em.default.string,contentLabel:em.default.string,shouldCloseOnEsc:em.default.bool,overlayRef:em.default.func,contentRef:em.default.func,id:em.default.string,overlayElement:em.default.func,contentElement:em.default.func};\n// ...\nlet[$,{read:er,play:en,cameraReady:eo}]=(()=>{/*...*/})();\nreturn[ey.createElement(ev,{isOpen:en,style:eI},\n// ...\n```"
        },
        {
          "name": "uuid",
          "motivation": "The code imports a module (`er(97466)`) and uses functions like `v4` and `parse`, which are standard functions for generating and parsing UUIDs, commonly provided by the `uuid` library.\n\n```javascript\nvar ev=er(97466);\n// ...\neu=e_.v4(),\n// ...\nrequestId:eo?ep.from(ev.parse(eo)):void 0,\n```"
        },
        {
          "name": "cbor",
          "motivation": "The code imports and utilizes functions like `cborEncode` and `cborDecode` (likely from a library like `cbor-js` or `cbor`, represented by `er(2474)` and `er(28333)`). This indicates the handling of data in the Concise Binary Object Representation (CBOR) format.\n\n```javascript\nlet eo=er(2474),cborEncode=$=>eo.encode($);et.cborEncode=cborEncode;let cborDecode=$=>eo.decode(en.isBuffer($)?$:en.from($,\"hex\"));et.cborDecode=cborDecode\n// ...\nBytes.fromCBOR=$=>{let et=en.decodeToDataItem($);return Bytes.fromDataItem(et)}\n// ...\nCryptoHDKey.fromCBOR=$=>{let et=em.decodeToDataItem($);return CryptoHDKey.fromDataItem(et)}\n```"
        }
      ]
    },
    {
      "file": "_next/static/chunks/9756.4e85ae84ec0c62dd.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code uses the `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)` structure, which is characteristic of Webpack's module bundling system."
        },
        {
          "name": "Next.js",
          "motivation": "The specific webpack chunk name `webpackChunk_N_E` is commonly used by applications built with the Next.js framework."
        }
      ]
    },
    {
      "file": "_next/static/chunks/9859.821f13ab9a5261cb.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code uses the `self.webpackChunk_N_E` construct, which is a common pattern for code bundled by Webpack, particularly within Next.js applications (`_N_E` often signifies Next.js)."
        }
      ]
    },
    {
      "file": "_next/static/chunks/9864.7f9abfbeeb9163bb.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code uses the `self.webpackChunk_N_E.push` structure, which is a standard pattern for loading modules in applications bundled with Webpack."
        },
        {
          "name": "Next.js",
          "motivation": "The specific chunk name pattern `self.webpackChunk_N_E` is commonly used by Next.js applications built with Webpack. While this chunk only defines an SVG, its structure indicates it's part of a larger Next.js project."
        }
      ]
    },
    {
      "file": "_next/static/chunks/9961.ed13b4a098a34008.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code uses `React.createElement` (minified as `i.createElement`), JSX syntax (`(0,r.jsx)`, `(0,r.jsxs)`), and React hooks like `useState` (minified as `(0,s.useState)`), `useId` (minified as `(0,s.useId)`), `useMemo` (minified as `(0,s.useMemo)`), `useEffect` (minified as `(0,w.useEffect)`), and `useContext` (minified as `(0,w.useContext)`)."
        },
        {
          "name": "Material UI (MUI)",
          "motivation": "The code imports and uses various MUI components, identified by their names (often minified) and props: `Grid` (`l.ZP`), `Box`/`Paper` (`d.Z`), `Typography` (`p.Z`), `InputLabel` (`i.Z`), `Input`/`OutlinedInput` (`o.Z`), `InputAdornment` (`a.Z`), `IconButton` (`d.Z`), `SvgIcon` (`c.Z`), `Button` (`f.Z`), `Autocomplete` (`v.Z`), `TextField` (`y.Z`), `FormControl` (`u.Z`). Usage of props like `variant`, `sx`, `position`, `elevation` further confirms MUI."
        },
        {
          "name": "React Hook Form",
          "motivation": "The code utilizes functions characteristic of React Hook Form, such as `useForm` (minified as `(0,x.cI)`), `useFormContext` (minified as `(0,j.Gc)`), `watch` (minified as `(0,j.qo)`), `Controller` (minified as `(0,j.Qr)`), and `FormProvider` (minified as `(0,x.RV)`)."
        },
        {
          "name": "Safe{Core/Apps} SDK",
          "motivation": "The code calls functions like `createErc721TransferTransaction` (minified as `(0,C.o5)`), `createMultiSendTransaction` (minified as `(0,N.Fh)`), and `createTransaction` (minified as `(0,N.VQ)`), which are part of the Safe{Core/Apps} SDKs used for creating Gnosis Safe transactions. It also uses a context likely related to Safe (`(0,O.J)`)."
        }
      ]
    },
    {
      "file": "_next/static/chunks/fec483df.8edcb58121553525.js",
      "occurences": [
        {
          "name": "asn1.js",
          "motivation": "The code includes functions like `Entity.prototype._createNamed`, references `i.decoders[e]`, `i.encoders[e]`, defines `DERDecoder`, `PEMDecoder`, `DEREncoder`, `PEMEncoder`, and uses ASN.1 specific terms like `seq`, `set`, `objid`, `utctime`, `int`, `bitstr`, `octstr`, `tagClass`, `tagByName` which are characteristic of the `asn1.js` library."
        },
        {
          "name": "bn.js",
          "motivation": "The code defines and uses a `BN` constructor extensively. It includes methods typical of `bn.js` like `_init`, `clone`, `iadd`, `isub`, `imul`, `idivn`, `modn`, `redPow`, `toRed`, `fromRed`, `isBN`, and handles big number arithmetic operations. Two versions (likely vendored or polyfilled) are present, one at `_.711` and another at `_.1670`."
        },
        {
          "name": "browserify-aes / crypto-browserify",
          "motivation": "The code defines functions like `createCipheriv`, `createDecipheriv`, `AES`, `Cipher`, `Decipher`, and implements various AES modes (ECB, CBC, CFB, OFB, CTR, GCM). This strongly suggests the use of browserified Node.js crypto modules, likely via `crypto-browserify` and its dependency `browserify-aes`."
        },
        {
          "name": "browserify-sign",
          "motivation": "The code contains `createSign`, `createVerify`, `Sign`, `Verify` functions and handles different signing algorithms (`rsa`, `dsa`, `ecdsa`) and hashing algorithms (`sha256`, etc.), which is characteristic of the `browserify-sign` package."
        },
        {
          "name": "create-hash",
          "motivation": "The code references `createHash`, `Hash`, `sha1`, `sha256`, `sha384`, `sha512`, `md5`, `ripemd160`, indicating the use of the `create-hash` library or its underlying hash implementations."
        },
        {
          "name": "create-hmac",
          "motivation": "The presence of `createHmac` and `Hmac` functions points to the usage of the `create-hmac` library for HMAC generation."
        },
        {
          "name": "diffie-hellman",
          "motivation": "Functions like `createDiffieHellman`, `DiffieHellman`, `getDiffieHellman`, and references to `modp` groups indicate the use of the `diffie-hellman` library."
        },
        {
          "name": "elliptic",
          "motivation": "The code includes classes and functions like `EC`, `ECDH`, `KeyPair`, `Signature`, references to elliptic curve points (`Point`, `JPoint`), curve names (`p256`, `secp256k1`, `ed25519`), and performs operations like `mul`, `add`, `sign`, `verify`, `derive`, characteristic of the `elliptic` library."
        },
        {
          "name": "parse-asn1",
          "motivation": "The code uses specific ASN.1 structure definitions like `RSAPrivateKey`, `RSAPublicKey`, `SubjectPublicKeyInfo`, `PrivateKeyInfo`, `ECPrivateKey`, `DSAPrivateKey`, often associated with the `parse-asn1` library for parsing keys and certificates."
        },
        {
          "name": "pbkdf2",
          "motivation": "The presence of `pbkdf2` and `pbkdf2Sync` functions indicates the usage of the `pbkdf2` library or a compatible implementation."
        },
        {
          "name": "public-encrypt",
          "motivation": "Functions like `publicEncrypt` and `privateDecrypt`, along with RSA padding logic (PKCS1, OAEP), suggest the use of the `public-encrypt` library."
        },
        {
          "name": "randombytes / randomfill",
          "motivation": "The code includes references to `randomBytes` and `randomFill`, likely using the `randombytes` or `randomfill` packages for cryptographic random number generation in the browser."
        },
        {
          "name": "readable-stream",
          "motivation": "The code defines classes like `Readable`, `Writable`, `Duplex`, `Transform`, `PassThrough`, and uses internal state objects like `_readableState` and `_writableState`, along with stream methods like `push`, `read`, `write`, `pipe`, `on('data')`, `on('end')`, which are hallmarks of the `readable-stream` package (a polyfill for Node.js streams)."
        },
        {
          "name": "safe-buffer",
          "motivation": "The code explicitly imports and wraps the native Buffer with a `SafeBuffer` implementation, a common practice for older environment compatibility, indicating the use of the `safe-buffer` library."
        }
      ]
    },
    {
      "file": "_next/static/chunks/framework-b78bc773b89d3272.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code includes the `@license React` comment, uses `React` functions like `createElement`, `Component`, `useState`, `useEffect`, etc., and defines React-specific symbols like `Symbol.for(\"react.element\")`."
        },
        {
          "name": "ReactDOM",
          "motivation": "The code contains the filename `react-dom.production.min.js` in comments, references `react-dom` internals (`__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED`), and implements DOM manipulation logic specific to React's rendering, such as event handling (`addEventListener`, `dispatchEvent`), attribute setting (`setAttribute`, `removeAttribute`), and DOM node management (`appendChild`, `removeChild`, `insertBefore`). It also exports functions like `createRoot` and `hydrateRoot`."
        },
        {
          "name": "Scheduler",
          "motivation": "The code includes the `@license React` comment for `scheduler.production.min.js` and uses functions prefixed with `unstable_` like `unstable_scheduleCallback`, `unstable_cancelCallback`, `unstable_now`, `unstable_shouldYield`, which are characteristic of React's Scheduler package."
        }
      ]
    },
    {
      "file": "_next/static/chunks/pages/404-6428e5608f1669da.js",
      "occurences": [
        {
          "name": "Next.js",
          "motivation": "The code uses the `self.webpackChunk_N_E` structure, pushes page definitions to `window.__NEXT_P` (specifically `[\"/404\", function(){return n(67988)}]`), and uses `next/router` (identified via `n(11163)` and assigned to `r`, then called as `(0,r.useRouter)()`). This structure and API usage are characteristic of a Next.js application."
        },
        {
          "name": "React",
          "motivation": "The code uses React hooks like `useState` and `useEffect` (identified via `n(67294)` and assigned to `i`, then called as `(0,i.useState)`, `(0,i.useEffect)`). It also uses JSX syntax, indicated by the `(0,c.jsx)` calls (where `c` likely refers to the jsx-runtime, identified as `n(85893)`)."
        }
      ]
    },
    {
      "file": "_next/static/chunks/pages/_app-cd8fbfe0c719e16b.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code imports modules commonly associated with React (`C(67294)`) and uses React hooks like `createContext`, `forwardRef`, `useContext`, `createElement`, `useRef`, `useState`, `useEffect`, `useInsertionEffect`, `useLayoutEffect`."
        },
        {
          "name": "Emotion",
          "motivation": "The code includes functions like `createCache`, `withEmotionCache`, and manipulation of style elements with `data-emotion` attributes, which are characteristic of the Emotion CSS-in-JS library. Keywords like `keyframes`, `css`, `@emotion/cache`, `@emotion/react`, `@emotion/styled` are present in the bundled code structure."
        },
        {
          "name": "ethers.js",
          "motivation": "The code contains numerous references and function calls typical of ethers.js v5:\n*   ABI handling: `AbiCoder`, `Interface`, `Fragment`, `ParamType`.\n*   Address utilities: `getAddress`, `getContractAddress`, `computeAddress`.\n*   Provider/Signer abstractions: `Provider`, `Signer`, `VoidSigner`, `BaseProvider`, `JsonRpcProvider`, `JsonRpcSigner`, `WebSocketProvider`.\n*   HD Wallet functions: `HDNode`, `mnemonicToSeed`, `entropyToMnemonic`, `getAccountPath`.\n*   Signing utilities: `SigningKey`, `computePublicKey`, `recoverPublicKey`, `ecsign`, `ecrecover`, `hashMessage`, `_signTypedData`.\n*   Hashing: `keccak256`, `id`.\n*   Byte manipulation: `arrayify`, `concat`, `hexlify`, `hexZeroPad`, `splitSignature`, `joinSignature`.\n*   BigNumber/FixedNumber: `BigNumber`, `FixedNumber`.\n*   String utilities: `toUtf8Bytes`, `toUtf8String`.\n*   Networking: `fetchJson`, `_fetchData`.\n*   Constants: `AddressZero`, `HashZero`.\n*   Logging and error handling patterns match ethers.js (`Logger`, specific error codes)."
        },
        {
          "name": "Material UI (MUI)",
          "motivation": "The code contains numerous references to MUI component classes (e.g., `MuiAlert`, `MuiButton`, `MuiCard`, `MuiDialog`, `MuiDivider`, `MuiFormControl`, `MuiLink`, `MuiListItem`, `MuiMenu`, `MuiPaper`, `MuiPopover`, `MuiSelect`, `MuiSkeleton`, `MuiStack`, `MuiSvgIcon`, `MuiSwitch`, `MuiTextField`, `MuiTypography`) and utility functions/hooks (`useThemeProps`, `createTheme`, `styled`, `useSlotProps`)."
        },
        {
          "name": "Safe Core SDK",
          "motivation": "The presence of `Safe`, `EthersAdapter`, `EthSafeSignature` classes and related contract interaction logic indicates the use of the Safe Core SDK (`@safe-global/safe-core-sdk-kit`)."
        },
        {
          "name": "Safe Protocol Kit",
          "motivation": "Functions like `predictSafeAddress` and `encodeSetupCallData` are part of the Safe Protocol Kit (`@safe-global/protocol-kit`)."
        },
        {
          "name": "Safe Service Client",
          "motivation": "Functions like `getSafeInfo`, `proposeTransaction`, `getTransactionHistory`, `getSafeApps` suggest interaction with the Safe Transaction Service via the `@safe-global/safe-service-client`."
        },
        {
          "name": "Safe Deployments",
          "motivation": "Code references functions like `getSafeContractDeployment`, `getProxyFactoryContractDeployment`, `getMultiSendContractDeployment` which indicates usage of Safe contract deployment addresses, likely from `@safe-global/safe-deployments`."
        },
        {
          "name": "Redux Toolkit",
          "motivation": "The code imports and uses functions like `configureStore`, `createSlice`, `createAction`, `createListenerMiddleware`, and `createAsyncThunk` which are core parts of Redux Toolkit."
        },
        {
          "name": "Immer",
          "motivation": "The structure of reducer functions within `createSlice` (direct state mutation patterns) and internal Immer utility functions suggest Immer is used, likely bundled within Redux Toolkit."
        },
        {
          "name": "@noble/hashes",
          "motivation": "The code includes implementations or calls related to cryptographic hash functions like `keccak256`, `sha256`, `sha512`, `ripemd160`, `hmac`, consistent with the @noble/hashes library (potentially bundled within ethers.js or safe-sdk)."
        },
        {
          "name": "@noble/secp256k1",
          "motivation": "The code includes direct references and usage patterns for secp256k1 elliptic curve operations (`ecsign`, `ecrecover`, point manipulation), indicating the use of @noble/secp256k1 (potentially bundled within ethers.js or safe-sdk)."
        },
        {
          "name": "Sentry",
          "motivation": "The code includes error reporting integrations (`InboundFilters`, `FunctionToString`, `GlobalHandlers`, `TryCatch`, `Breadcrumbs`, `LinkedErrors`, `HttpContext`, `Dedupe`), transport creation (`makeFetchTransport`, `makeXHRTransport`), and client initialization (`init`, `showReportDialog`) characteristic of the Sentry browser SDK (`@sentry/browser`)."
        },
        {
          "name": "ethers.js",
          "motivation": "The code explicitly exports numerous functions and objects characteristic of the `ethers.js` library (version 5.7.0 is mentioned in logger strings). Exports include `Wallet`, `getDefaultProvider`, `providers`, `utils`, `constants`, `errors`, `BigNumber`, `Contract`, `ContractFactory`, various cryptographic functions (`keccak256`, `sha256`, `computeHmac`, `SigningKey`), address utilities (`getAddress`, `getContractAddress`), ENS resolution (`resolveName`), transaction handling (`serializeTransaction`, `parseTransaction`), ABI encoding/decoding (`AbiCoder`, `Interface`), and networking helpers (`fetchJson`). A snippet `null==m._ethers&&(m._ethers=L)` attempts to assign the imported ethers library (L) to a global `window._ethers` variable."
        },
        {
          "name": "React",
          "motivation": "The code references module `C(67294)` which is typically React in Next.js bundles. Additionally, it uses `hoist-non-react-statics` (module `C(8679)`) and `react-is` (module `C(21296)`), which are common utilities in the React ecosystem. Terms like `createElement`, `useState`, `useContext`, `useEffect`, `useMemo`, `useRef`, `useCallback`, `forwardRef` are indicative of React usage, although not directly visible in this snippet, they are likely used elsewhere in the application this chunk belongs to."
        },
        {
          "name": "Next.js",
          "motivation": "The file path `_next/static/chunks/pages/_app-cd8fbfe0c719e16b.js` follows the standard Next.js build output structure, strongly indicating the use of the Next.js framework."
        },
        {
          "name": "web3-onboard",
          "motivation": "The code includes modules that seem related to wallet connection and management, specifically mentioning `setChain`, `connectWallet`, `disconnectWallet`, `setWalletModules`. While not explicitly named 'web3-onboard', the presence of these functions and patterns like `useInitOnboard` strongly suggests the use of web3-onboard or a similar library for wallet connections."
        },
        {
          "name": "zksync-web3",
          "motivation": "The code imports and uses modules specifically related to zkSync, such as `Provider`, `Web3Provider`, `ContractFactory`, `Contract`, `Signer`, `L1Signer`, `EIP712Signer` from a zkSync context (implied by surrounding code structure often seen in zkSync SDK integrations). It includes zkSync-specific functions like `estimateGasL1ToL2Execute`, `getMainContractAddress`, `getL2TransactionFromPriorityOp`, `serialize` (for EIP712 transactions), and constants like `EIP712_TX_TYPE`, `CONTRACT_DEPLOYER_ADDRESS`, suggesting the use of the `zksync-web3` library."
        },
        {
          "name": "@reduxjs/toolkit",
          "motivation": "The code imports `createSlice` (`oM`) and `createSelector` (`P1`) from module `C(77236)` and `C(68697)` respectively, which are characteristic exports of `@reduxjs/toolkit`, suggesting its use for state management."
        },
        {
          "name": "react-redux",
          "motivation": "The code imports `Provider` (`zt`) and hooks like `useDispatch` (`I0`) and `useSelector` (`v9`) from module `C(9473)`, which correspond to the `react-redux` library used for connecting React components to a Redux store."
        },
        {
          "name": "@mui/material",
          "motivation": "The code imports various UI components and utilities like `Box`, `Button`, `Dialog`, `DialogActions`, `DialogContent`, `DialogTitle`, `Typography`, `CircularProgress`, `Link`, `IconButton`, `Tooltip`, `SvgIcon`, `Skeleton`, `Alert`, `AlertTitle`, `Select`, `MenuItem`, `ListSubheader`, `Card`, `CardHeader`, `CardContent`, `List`, `ListItem`, `ListItemButton`, `ListItemIcon`, `ListItemText`, `Badge`, `CssBaseline`, `ThemeProvider`, `createTheme`, `useTheme`, `useMediaQuery` from Material UI (`@mui/material`), indicated by the common component names and structure (`C(85893)`, `C(6514)`, etc.)."
        },
        {
          "name": "Lodash",
          "motivation": "The code includes a large, self-contained bundle of Lodash (version 4.17.21 is mentioned). Functions like `isEqual`, `debounce`, `throttle`, `memoize`, `pickBy`, `cloneDeep`, `get`, `set`, `unset`, `defaultsDeep`, `isEmpty`, `isObject`, `isArray`, `isString`, `isFunction`, `toNumber`, `toString`, `merge`, `zipObject`, `keyBy`, `groupBy`, `partition`, `map`, `filter`, `reduce`, `find`, `sortBy`, `uniq`, `chain`, `property`, `constant`, `identity`, `noop` are present within this bundled section."
        },
        {
          "name": "react-hook-form",
          "motivation": "The code imports and utilizes functions like `useForm`, `useFormContext`, `FormProvider`, `useWatch`, `useController`, `Controller`, `useFieldArray`, `get` (for form state), `set` (for form state), `unset` (for form state), indicating the use of the `react-hook-form` library for form management."
        },
        {
          "name": "swr",
          "motivation": "The code defines functions `useSWRConfig`, `mutate`, and utilizes caching patterns often associated with `swr`, suggesting its use for data fetching and caching."
        },
        {
          "name": "clsx",
          "motivation": "Module `C(90512)` exports a function that combines class names, matching the behavior and typical usage pattern of the `clsx` library."
        },
        {
          "name": "bn.js",
          "motivation": "The code includes module `C(13550)` which appears to be the `bn.js` library, used for arbitrary-precision integer arithmetic, often required by cryptographic or blockchain libraries."
        },
        {
          "name": "js-sha3",
          "motivation": "Module `C(91094)` includes code that defines and exports functions like `keccak_256`, `sha3_256`, `shake128`, `cshake128`, `kmac128`, matching the functionality and structure of the `js-sha3` library."
        },
        {
          "name": "secp256k1",
          "motivation": "The code imports module `C(17221)` which wraps `C(58573)`. Module `58573` contains code related to elliptic curve operations (`ec`, `secp256k1`, `publicKeyCreate`, `ecdsaSign`, `ecdsaVerify`, `ecdh`), characteristic of the `secp256k1` library used for Bitcoin/Ethereum cryptography."
        },
        {
          "name": "react-dropzone",
          "motivation": "The code imports `useDropzone` from module `C(34704)`, which is the primary hook provided by the `react-dropzone` library for creating file drag-and-drop areas."
        },
        {
          "name": "lru-cache",
          "motivation": "Module `C(39593)` implements an LRU cache with methods like `set`, `get`, `reset`, `dump`, `load`, matching the API of the `lru-cache` library."
        },
        {
          "name": "semver",
          "motivation": "Module `C(81249)` contains a large block of code defining classes `SemVer`, `Range`, `Comparator` and functions like `compare`, `satisfies`, `valid`, `inc`, `diff`, `major`, `minor`, `patch`, which are exports of the `semver` library for semantic versioning."
        },
        {
          "name": "safe-buffer",
          "motivation": "Modules `C(89509)` and `C(55)` provide a ponyfill/shim for the Node.js `Buffer` API, matching the purpose of the `safe-buffer` library."
        },
        {
          "name": "node-polyfill-crypto",
          "motivation": "Module `C(61798)` provides `randomBytes`, likely polyfilling Node.js crypto for the browser."
        },
        {
          "name": "hash.js",
          "motivation": "Module `C(33715)` imports and re-exports various hashing algorithms (`sha1`, `sha256`, `ripemd160`, `hmac`) from sub-modules (`C(89041)`, `C(12949)`, `C(52344)`), which is characteristic of the `hash.js` library structure."
        },
        {
          "name": "react-loadable",
          "motivation": "Module `C(1342)` wraps module `C(24304)`, which implements dynamic component loading logic similar to `react-loadable` or `@loadable/component`. It defines `Loadable`, `LoadableSubscription`, `preloadAll`, `preloadReady`."
        }
      ]
    },
    {
      "file": "_next/static/chunks/pages/_offline-a24c7ebb85d0aab8.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code uses `jsx` syntax (e.g., `(0,r.jsx)(i.Z,{...})`) and component patterns typical of React applications. The entry point `(window.__NEXT_P=window.__NEXT_P||[]).push([\"/_offline\",function(){return t(15062)}])` also suggests a framework built on React, likely Next.js, which is confirmed by the `_next` path in the file name."
        },
        {
          "name": "Material UI (MUI) or similar UI library",
          "motivation": "The code imports and uses components like `Box` (likely `i.Z`), `Paper` (likely `r.Z`), `Typography` (likely `a.Z`), and an icon (`s.Z`, `WifiOff`). Props like `sx`, `display`, `justifyContent`, `p`, `mb`, `maxWidth`, `variant`, `textAlign`, `mt`, and `fontSize` are characteristic of MUI."
        },
        {
          "name": "Webpack",
          "motivation": "The code uses the `self.webpackChunk_N_E` structure, which is a clear indicator of Webpack being used as the module bundler."
        }
      ]
    },
    {
      "file": "_next/static/chunks/pages/addOwner-1470c1d37064c96a.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code uses `React` hooks like `(0,a.useContext)` and `(0,a.useEffect)` (where `a` is likely the imported `react` module) and JSX syntax `(0,t.jsx)`."
        },
        {
          "name": "Next.js Router",
          "motivation": "The code imports and uses the `useRouter` hook from Next.js: `(0,i.useRouter)()`, where `i` likely corresponds to the `next/router` module (`r(11163)`)."
        },
        {
          "name": "Next.js Head",
          "motivation": "The code uses `(0,t.jsx)(s(), ...)` where `s` likely corresponds to `next/head` (`r(9008)`) to manage the document head (`<title>`)."
        }
      ]
    },
    {
      "file": "_next/static/chunks/pages/address-book-34552962bcfd1f60.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code uses `l(67294)` which commonly corresponds to the `react` package in webpack builds, and `l(85893)` for `jsx-runtime`. It extensively uses React hooks like `(0,E.useState)`, `(0,E.useMemo)`, `(0,E.useContext)`, and JSX syntax like `(0,_.jsx)` and `(0,_.jsxs)`."
        },
        {
          "name": "Material UI",
          "motivation": "The code imports and uses numerous components that are characteristic of Material UI (MUI), such as `Box` (`l(80822)`), `Table` (`l(7906)`), `TableHead` (`l(53184)`), `TableRow` (`l(53816)`), `TableCell` (`l(53252)`), `TableSortLabel` (`l(26280)`), `TablePagination` (`l(8896)`), `Typography` (`l(15861)`), `Link` (`l(23401)`), `Button` (`l(69417)`), `IconButton` (`l(93946)`), `SvgIcon` (`l(53219)`), `TextField` (`l(61903)`), `InputAdornment` (`l(87109)`), `Dialog` (`l(89482)`), `DialogContent` (`l(6514)`), `DialogActions` (`l(31425)`), `Grid` (`l(86886)`), `Tooltip` (`l(34386)`), and icons like `KeyboardArrowLeft` (`l(67070)`), `KeyboardArrowRight` (`l(56686)`)."
        },
        {
          "name": "next/head",
          "motivation": "The code imports `l(9008)` as `w` and uses it as `(0,_.jsx)(w(), ...)` with a `<title>` tag inside, which is the standard pattern for using `next/head` to manage document head elements in Next.js applications."
        },
        {
          "name": "react-csv",
          "motivation": "The code imports `l(4893)` as `L` and uses methods like `L.W6()` which returns `CSVDownloader` and `L.ds()` which returns `CSVReader`. These components are used within the Export and Import dialogs for handling CSV file operations."
        },
        {
          "name": "clsx",
          "motivation": "The code uses `l(94184)` as `b` and calls it like `b()({ sticky: i.sticky, [C().collapsedCell]: e.collapsed })`. This pattern of calling a function with an object to conditionally join class names is typical of the `clsx` library or similar classnames utilities."
        }
      ]
    },
    {
      "file": "_next/static/chunks/pages/balances/nfts-ba8c7d1f61715849.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code extensively uses React concepts like `(0,c.useState)`, `(0,c.useCallback)`, `(0,c.useMemo)`, `(0,c.useContext)`, `i.forwardRef`, `i.cloneElement`, `i.createElement`, and JSX syntax like `(0,s.jsx)` and `(0,s.jsxs)`. The import `n(67294)` typically corresponds to the `react` package in webpack bundles."
        },
        {
          "name": "@mui/material",
          "motivation": "Numerous Material UI components and utilities are imported and used, indicated by imports like `n(1048)`, `n(32793)`, `n(90512)`, `n(94780)`, `n(41796)`, etc., and usage of components like `Grid` (`l.ZP`), `Table` (`u.Z`), `TableCell` (`Z.Z`), `Checkbox` (`k.Z`), `Button` (`V.Z`), `Tooltip` (`x.Z`), `Dialog` (`W.Z`), `SvgIcon` (`g.Z`), `Typography` (`S.Z`), `Skeleton` (`L.Z`), `Box` (`C.Z`), `TextField` (`w.Z`), etc."
        },
        {
          "name": "@safe-global/safe-apps-react-sdk",
          "motivation": "The code uses a hook `hooks_useCollectibles` which calls `(0,h.CG)(p.g, m.isEqual)`. `h.CG` (from import `n(89773)`) likely represents a hook from the Safe Apps SDK (like `useSafeAppsSDK` or a related data-fetching hook) to retrieve Safe-specific data, specifically collectibles (`p.g` from `n(34485)`). The context `J.i` (`n(94315)`) is likely the `SafeAppContext`."
        },
        {
          "name": "lodash.isequal",
          "motivation": "The code explicitly imports and uses `m.isEqual` (from import `n(23201)`) within the `hooks_useCollectibles` function."
        },
        {
          "name": "Next.js",
          "motivation": "The code structure `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)`, the file path `_next/static/chunks/pages/balances/nfts-ba8c7d1f61715849.js`, and the use of `(window.__NEXT_P=window.__NEXT_P||[]).push(...)` are characteristic of a Next.js application. The import `n(9008)` (`r`) is likely `next/head` for managing the document head."
        }
      ]
    },
    {
      "file": "_next/static/chunks/pages/balances-0dfc73dfaa4d35d3.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "Code uses `(0,l.jsx)` which is the transpiled output for React's JSX syntax, and imports from `react` (`t(67294)`)."
        },
        {
          "name": "Next.js",
          "motivation": "The file path (`_next/static/chunks/pages/...`) and the presence of `window.__NEXT_P` indicate usage of the Next.js framework. `t(9008)` likely corresponds to `next/head`."
        },
        {
          "name": "@mui/material",
          "motivation": "Multiple imports point to Material UI components like `Box` (`t(80822)`), `Table` (`t(7906)`), `Button` (`t(69417)`), `Tooltip` (`t(34386)`), `Skeleton` (`t(88078)`), `Typography` (`t(15861)`), `Select` (`t(18360)`), etc."
        },
        {
          "name": "@apollo/client",
          "motivation": "The code uses a hook `(0,M.CG)` which corresponds to `useQuery` (`t(89773)`) to fetch data using a GraphQL query (`t(90972)`, `t(18446)`), characteristic of Apollo Client."
        },
        {
          "name": "clsx",
          "motivation": "The code uses `b()` (`t(94184)`) with object arguments to conditionally join class names, a pattern typical of the `clsx` library."
        }
      ]
    },
    {
      "file": "_next/static/chunks/pages/imprint-c10abc9675df5530.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code uses JSX syntax `(0,a.jsx)(...)` and `(0,a.jsxs)(...)`, which are transpiled forms of React's element creation functions."
        },
        {
          "name": "Next.js",
          "motivation": "The code uses `self.webpackChunk_N_E` and `window.__NEXT_P`, which are specific to Next.js's runtime. It also imports `next/head` (as `n(9008)`) and `next/link` (as `n(41664)`)."
        },
        {
          "name": "UI Component Library (likely Material UI or similar)",
          "motivation": "The code imports components referenced as `s.Z` (used with props like `variant`, `mb`, `mt`) and `o.Z` (used as a styled link component). This pattern, especially the props `variant` and spacing (`mb`, `mt`), is common in UI libraries like Material UI, often used in Safe Wallet forks."
        }
      ]
    },
    {
      "file": "_next/static/chunks/pages/index-20740d4545e53ac7.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code uses `(0, o.jsx)` which corresponds to JSX syntax transpiled, and `t(67294)` which is typically the chunk ID for the `react` package, specifically importing `useLayoutEffect` (`a.useLayoutEffect`)."
        },
        {
          "name": "Next.js Router",
          "motivation": "The code imports and uses `useRouter` from `t(11163)`, which is characteristic of the `next/router` package (`(0,c.useRouter)()` is called)."
        },
        {
          "name": "Safe Integration Hooks",
          "motivation": "The code imports and uses hooks like `useLastSafe` (defined inline using `t(90477).Ul`) and `useConfigs` (`t(90477).ZP`). Variable names like `safe`, `chain`, `chainId`, `shortName` suggest integration with the Safe ecosystem."
        },
        {
          "name": "State Management (Redux-like)",
          "motivation": "The code uses a hook `(0,i.CG)` (imported from `t(89773)`) which seems to be a selector function, possibly similar to `useSelector` in Redux. It selects state based on another import `l.re` (from `t(81880)`), which could represent a reducer or state slice."
        }
      ]
    },
    {
      "file": "_next/static/chunks/pages/new-safe/load-426eda54f7ff5d71.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code extensively uses `(0,s.jsx)`, `(0,r.jsxs)` (JSX syntax transpiled), React hooks like `(0,t.useState)`, `(0,t.useEffect)`, `(0,t.useMemo)`, `(0,t.useCallback)`, `(0,t.useId)`, and `u.forwardRef`."
        },
        {
          "name": "Next.js",
          "motivation": "Presence of `(0,c.useRouter)` for routing, `(0,l.jsx)(d(), ...)` likely corresponds to `next/head` for manipulating the document head, `(0,l.jsx)(ec(), {href: el.$.imprint, ...})` is characteristic of `next/link`, and the file structure `_next/static/chunks/pages/...` is standard for Next.js."
        },
        {
          "name": "Material UI (MUI)",
          "motivation": "Numerous components with `Mui` prefixes are used implicitly via short variable names (e.g., `s.Z` for InputLabel, `o.Z` for OutlinedInput, `l.Z` for InputAdornment, `i.Z` for Typography, `d.Z` for IconButton, `c.Z` for SvgIcon, `f.Z` for Box, `w.Z` for Card, `m.ZP` for Grid, `T.Z` for Button, `K.Z` for TextField). Specific imports like `getAvatarUtilityClass` and the structure of style generation (`(0,S.ZP)`, `(0,k.Z)`) also point to MUI."
        },
        {
          "name": "React Hook Form",
          "motivation": "Usage of functions like `(0,D.cI)` (likely `useForm`), `(0,D.RV)` (likely `FormProvider`), `(0,D.Dq)` (likely `useFieldArray`), and hooks/properties like `handleSubmit`, `control`, `watch`, `setValue`, `getValues`, `formState: { errors, isValid }` are characteristic of React Hook Form."
        },
        {
          "name": "Redux / Redux Toolkit",
          "motivation": "Functions like `(0,es.CG)` and `(0,es.TL)` appear to be Redux selectors, likely created using Redux Toolkit's `createSelector` or similar, used to access state from a Redux store (e.g., `(0,es.CG)(e=>(0,eo.hi)(e,s))` to get existing safes, `(0,es.TL)()` likely `useDispatch`)."
        },
        {
          "name": "SWR",
          "motivation": "The pattern `[f,x,g]=(0,ep.Z)(async () => { ... }, [deps])` strongly resembles the usage of the `useSWR` hook for data fetching, where `f` is data, `x` is error, and `g` is isValidating/isLoading."
        },
        {
          "name": "ethers.js / viem",
          "motivation": "Functions like `(0,eu.f9)(provider, address, chainId)` (likely fetching Safe info) and `(0,eS.PW)(safeSdk, safeInfo)` (likely processing Safe SDK data) suggest interaction with Ethereum contracts and blockchain data. Hooks like `(0,eh.tM)()` and `(0,eh.vY)()` likely provide Web3 providers (ethers/viem instances). The function `(0,s.oC)(a,u)` within `useAddressResolver` likely performs ENS resolution, which uses RPC calls."
        },
        {
          "name": "clsx",
          "motivation": "The code `d=a.n(i), className:d()(m().container...)` where `i=a(94184)` is typical pattern for using the `clsx` library (or a similar utility like `classnames`) to conditionally join CSS class names."
        }
      ]
    },
    {
      "file": "_next/static/chunks/pages/settings/appearance-a261f719f5e9fd52.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code imports and uses `React` features like `(0,a.forwardRef)` (`t(67294)` is likely React) and JSX syntax (`(0,h.jsx)`)."
        },
        {
          "name": "Next.js",
          "motivation": "The code imports and uses components/hooks from Next.js, such as `next/link` (`t(41664)` aliased as `n`), `next/router` (`t(11163)` with `(0,d.useRouter)()`), and `next/head` (`t(9008)` aliased as `p`). The file path `_next/static/chunks/pages/settings/appearance-a261f719f5e9fd52.js` also indicates a Next.js build output."
        },
        {
          "name": "@mui/material",
          "motivation": "The code extensively uses Material UI components and utilities. Evidence includes:\n*   Importing specific components like `Checkbox` (`t(69368)`), `FormGroup` (`t(53457)`), `Grid` (`t(86886)`), `Typography` (`t(15861)`), `FormControlLabel` (`t(50480)`), `Switch` (`t(45843)`), `Tabs` (`t(88409)`), `Tab` (`t(40044)`), `Card` (`t(80822)`).\n*   Using MUI's styling solution (`(0,Z.ZP)`) and utility functions like `getCheckboxUtilityClass`, `getFormGroupUtilityClass`, `useUtilityClasses` (`(0,l.Z)`), and theme integration (`({theme:e,ownerState:r})=>...`).\n*   References to MUI-specific props and concepts like `variant`, `fontWeight`, `color`, `size`, `sx`, `ownerState`."
        },
        {
          "name": "@emotion/styled",
          "motivation": "Material UI relies on Emotion for its styling engine. The code uses `(0,Z.ZP)` which is characteristic of Emotion's `styled` component factory, often used internally by MUI."
        },
        {
          "name": "Redux (or similar state management)",
          "motivation": "The code uses hook patterns like `(0,u.TL)()` and `(0,u.CG)(m.vi)` (`t(89773)` and `t(81880)`). These strongly resemble `useDispatch` and `useSelector` from `react-redux`, commonly used for managing application state with Redux."
        },
        {
          "name": "classnames",
          "motivation": "The code uses `(0,n.Z)(P.root,a)` and `l()(c().container,{[c().border]:!n})` (`t(94184)` aliased as `l`) which is the typical usage pattern for the `classnames` library to conditionally join CSS class names."
        }
      ]
    },
    {
      "file": "_next/static/chunks/pages/settings/data-4128babc76b8c719.js",
      "occurences": [
        {
          "name": "Next.js",
          "motivation": "Code uses `window.__NEXT_P`, imports `next/link` (identified as `a(41664)`), `next/router` (identified as `a(11163)` used with `useRouter`), and follows Next.js file structure (`_next/static/chunks/pages/...`)."
        },
        {
          "name": "React",
          "motivation": "Code uses JSX syntax (`(0,s.jsx)`, `(0,s.jsxs)`), `React.forwardRef` (identified as `a(67294)` used with `forwardRef`), and React component patterns."
        },
        {
          "name": "Material UI",
          "motivation": "Code imports and uses components like `Tabs` (identified as `a(88409)`), `Tab` (identified as `a(40044)`), and `Typography` (identified as `a(15861)`), which are common Material UI components."
        },
        {
          "name": "Webpack",
          "motivation": "The code uses `self.webpackChunk_N_E` which is the standard way Webpack manages chunks in the browser."
        },
        {
          "name": "classnames",
          "motivation": "The pattern `i()(o().container,{[o().border]:!l})` strongly suggests the use of the `classnames` library (or a similar utility) for conditional CSS class application, where `i` is likely the imported library (`a(94184)`)."
        }
      ]
    },
    {
      "file": "_next/static/chunks/pages/settings/environment-variables-afe9085178b2ff4d.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code uses `(0,s.jsx)` and `(0,s.jsxs)` for JSX transformations, imports `React` functionalities like `useState`, `useEffect`, `forwardRef` via `r(67294)`, and follows component-based patterns typical of React applications."
        },
        {
          "name": "Next.js",
          "motivation": "The code uses `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)` which is the webpack bootstrapping method used by Next.js. It also imports `next/link` (likely via `r(41664)`), `next/router` (via `r(11163)` providing `useRouter`), and `next/head` (likely via `r(9008)`)."
        },
        {
          "name": "Material UI (MUI)",
          "motivation": "The code imports and uses various components like `Grid` (`r(86886)`), `Typography` (`r(15861)`), `TextField` (`r(61903)`), `Button` (`r(69417)`), `IconButton` (`r(93946)`), `Tooltip` (`r(34386)`), `SvgIcon` (`r(53219)`), `Tabs` (`r(88409)`), `Tab` (`r(40044)`), `Paper` (`r(80822)`), `Link` (`r(23795)`), `InputAdornment` (`r(87109)`). It uses the `sx` prop for styling and component props like `variant`, `color`, `placement`, which are characteristic of MUI."
        },
        {
          "name": "react-hook-form",
          "motivation": "The code calls `(0,d.cI)({ mode: \"onChange\", values: ... })` which likely maps to `useForm` from `react-hook-form`. It destructures `register`, `handleSubmit`, `formState`, `setValue`, `watch` from the result, and uses a `FormProvider` component (likely `d.RV`). These are core APIs of `react-hook-form`."
        },
        {
          "name": "Redux Toolkit (or similar state management)",
          "motivation": "The code uses hooks like `(0,b.CG)(g.vi)` and `(0,b.TL)()` which likely correspond to `useSelector` and `useDispatch` respectively, common in Redux setups. Actions like `g.sG`, `g.XL`, `g.eP` are dispatched using the dispatch function `L`. This pattern strongly suggests a Redux-based state management, likely with Redux Toolkit given the common usage with Safe{Wallet}."
        },
        {
          "name": "clsx",
          "motivation": "The code uses `a()(d().container,{[d().border]:!i})` (where `a` is `r(94184)`) which is a common pattern for conditionally joining CSS class names, typical of the `clsx` library."
        }
      ]
    },
    {
      "file": "_next/static/chunks/pages/settings/modules-6e972b1794106686.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code uses `(0,n.jsx)` and `(0,n.jsxs)` which are indicative of JSX transpilation (likely React's `jsx-runtime`), and imports `react` (identified as `r(67294)`) and `react/jsx-runtime` (identified as `r(85893)`)."
        },
        {
          "name": "Next.js",
          "motivation": "The code includes webpack chunk loading specific to Next.js (`self.webpackChunk_N_E=self.webpackChunk_N_E||[]`), registers a Next.js page (`window.__NEXT_P.push([\"/settings/modules\", ...])`), and uses Next.js components like `next/link` (identified as `r(41664)`) and hooks like `next/router` (identified as `r(11163)`)."
        },
        {
          "name": "Material UI (MUI)",
          "motivation": "The code imports and uses multiple components from the Material UI library, such as `Tabs` (`r(88409)`), `Tab` (`r(40044)`), `Typography` (`r(15861)`), `Box` (`r(80822)`), `Grid` (`r(86886)`), `IconButton` (`r(93946)`), `SvgIcon` (`r(53219)`), `Paper` (`r(90629)`), and `Alert` (`r(46901)`)."
        },
        {
          "name": "semver",
          "motivation": "The code imports and uses a function from the `semver` library, specifically `gte` (greater than or equal), identified as `r(45712)` (`S()(s.version, \">=1.1.1\")`)."
        }
      ]
    },
    {
      "file": "_next/static/chunks/pages/settings/security-login-f59f38298eedcc40.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code uses `(0,l.jsx)` and `(0,l.jsxs)` which are transpiled JSX syntax, a hallmark of React. It also imports React itself (`n(67294)`) and uses hooks like `useState`, `useMemo`, `useContext`."
        },
        {
          "name": "Next.js",
          "motivation": "The code starts with `(window.__NEXT_P=window.__NEXT_P||[]).push([\"/settings/security-login\",...])`, which is characteristic of Next.js page bundles. It also uses Next.js specific features like `n(9008)` (next/head), `n(41664)` (next/link), and `n(11163)` (next/router via `useRouter`)."
        },
        {
          "name": "Material UI (MUI)",
          "motivation": "The code imports and uses numerous components commonly associated with Material UI, such as `n(80822)` (Box), `n(15861)` (Typography), `n(53252)` (TableCell), `n(72882)` (TableContainer), `n(53184)` (TableHead), `n(8896)` (TablePagination), `n(53816)` (TableRow), `n(26280)` (TableSortLabel), `n(90629)` (Paper), `n(88409)` (Tabs), `n(40044)` (Tab), `n(69417)` (Button), `n(86886)` (Grid), `n(88078)` (Skeleton), `n(53219)` (SvgIcon), `n(93946)` (IconButton). The use of the `sx` prop for styling is also typical of MUI."
        },
        {
          "name": "Redux / Redux Toolkit",
          "motivation": "The code uses `(0,G.v9)(X.UQ)` and `(0,G.v9)(X.Pc)`. `G.v9` likely maps to `useAppSelector` or a similar hook from `react-redux` (often used with Redux Toolkit), which is used to select data (`X.UQ`, `X.Pc` representing selectors like `selectSpendingLimits`, `selectSpendingLimitsLoading`) from the Redux store."
        },
        {
          "name": "date-fns",
          "motivation": "The code imports date formatting functions like `relativeTime` (`(0,l.Z)`) from `n(26555)` and `formatWithSchema` (`(0,i.Z)`) from `n(58091)`. The function signatures and usage patterns (`relativeTime`, `formatWithSchema`) are consistent with the `date-fns` library, specifically `formatRelative` or similar and `format`."
        },
        {
          "name": "classnames",
          "motivation": "The code imports a function aliased as `x` (`n(94184)`) and uses it like `className:x()({...})` to conditionally apply CSS classes, which is the standard usage pattern for the `classnames` library."
        },
        {
          "name": "ethers.js (or similar BigNumber library)",
          "motivation": "The code uses `T.O$.from(...)` (`n(2593)`) which suggests instantiation of a BigNumber object, likely from a library like `ethers.js` used for handling large numbers common in blockchain interactions. It also uses a formatting function `(0,N.kV)` from `n(50053)` which likely formats these BigNumbers."
        }
      ]
    },
    {
      "file": "_next/static/chunks/pages/settings/setup-a34e595db03bb64f.js",
      "occurences": [
        {
          "name": "Next.js",
          "motivation": "The code structure uses `self.webpackChunk_N_E` and `window.__NEXT_P`, which are characteristic of Next.js builds. The filename `_next/static/chunks/pages/settings/setup-a34e595db03bb64f.js` also indicates a Next.js page component chunk. Imports like `s(9008)` (likely `next/head`), `s(11163)` (likely `next/router`), and `s(41664)` (likely `next/link`) are used."
        },
        {
          "name": "React",
          "motivation": "The code extensively uses React concepts and syntax. Imports like `s(67294)` (React), `s(85893)` (likely `jsx-runtime`) are fundamental. Functions like `(0,r.useState)`, `(0,r.useMemo)`, `(0,r.useContext)`, `(0,r.forwardRef)` (`s(67294)`) and JSX syntax `(0,l.jsx)`, `(0,l.jsxs)` confirm React usage."
        },
        {
          "name": "MUI (Material UI)",
          "motivation": "Numerous imports point to MUI components, such as `s(90629)` (Paper), `s(86886)` (Grid), `s(15861)` (Typography), `s(34386)` (Tooltip), `s(88078)` (Skeleton), `s(80822)` (Box), `s(46901)` (Alert), `s(92401)` (AlertTitle), `s(23795)` (Link), `s(18831)` (likely Safe related constants/enums used with UI), `s(60888)` (CheckCircleIcon), `s(89482)` (Dialog), `s(51194)` (TextField), `s(6514)` (DialogContent), `s(31425)` (DialogActions), `s(93946)` (IconButton), `s(69417)` (Button), `s(88409)` (Tabs), `s(40044)` (Tab). The code uses these components extensively for layout and UI elements."
        },
        {
          "name": "@safe-global/safe-apps-react-sdk",
          "motivation": "The code uses hooks and context related to Safe, like `(0,b.Z)` (likely `useSafeAppsSDK` or a similar custom hook consuming its context from `s(53234)`), accessing `safe` properties (`safe:e`, `e.implementationVersionState`, `e.version`, `e.nonce`, `e.owners`, `e.threshold`). Constants like `w.Wu` and `w.ve` (from `s(75684)`) likely correspond to Safe contract versions or URLs defined in Safe SDK packages. The code interacts with Safe state (owners, threshold, nonce, version)."
        },
        {
          "name": "react-hook-form",
          "motivation": "The `EditOwnerDialog` component utilizes functions `(0,L.cI)` (likely `useForm`) and `(0,L.RV)` (likely `FormProvider`) from `s(87536)`, along with `handleSubmit`, `formState`, and `watch`, which are characteristic APIs of the `react-hook-form` library."
        },
        {
          "name": "clsx",
          "motivation": "The code uses `Z()` which is assigned `s.n(m)` where `m=s(94184)`. This pattern often indicates the use of the `clsx` library (or a similar utility) for conditionally joining class names, as seen in `className:Z()({sticky:e.sticky})`."
        },
        {
          "name": "csv-stringify",
          "motivation": "The export functionality uses `(0,y.D$)` from `s(4893)` to convert owner data into CSV format before creating a Blob. This strongly suggests the use of a CSV stringification library, likely `csv-stringify` or a similar one, aliased as `y`."
        }
      ]
    },
    {
      "file": "_next/static/chunks/pages/settings-b0ced22875b8b87a.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code uses JSX syntax `(0,u.jsx)` and React hooks like `(0,r.useEffect)` and `(0,r.useState)` (implied by hook usage pattern, though `useState` isn't explicitly called in this snippet, the structure suggests React component logic). The variables `u` and `r` are conventional minified references to React or related modules."
        },
        {
          "name": "Next.js",
          "motivation": "The code structure `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)` and `window.__NEXT_P` are characteristic of Next.js applications. It specifically imports and uses `next/head` (`t(9008)`) for manipulating the document head and `next/router` (`t(11163)`, `(0,i.useRouter)`) for client-side navigation (`e.push`). The file path `_next/static/chunks/pages/settings-...js` also indicates a Next.js build output."
        }
      ]
    },
    {
      "file": "_next/static/chunks/pages/transactions/history-4d9e84d48d4e90ea.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code extensively uses JSX syntax `(0,a.jsx)` and imports modules commonly associated with React, such as `n(67294)` (likely React itself) and `n(85893)` (likely the JSX runtime)."
        },
        {
          "name": "Next.js",
          "motivation": "The code uses constructs like `(window.__NEXT_P=window.__NEXT_P||[]).push`, imports `n(41664)` as `l` used as a Link component `(0,a.jsx)(l(), ...)` (likely `next/link`), imports `n(11163)` as `d` and calls `d.useRouter()` (likely `next/router`), and imports `n(9008)` as `s` used like `(0,a.jsx)(s(), ...)` (likely `next/head`). The filename `_next/static/chunks/pages/transactions/history-...` also indicates a Next.js project structure."
        },
        {
          "name": "Material UI (MUI)",
          "motivation": "The code imports and uses components with names and props characteristic of MUI, such as `Tabs` (`n(88409)`), `Tab` (`n(40044)`), `Typography` (`n(15861)`), `Box` (`n(80822)`), and `Skeleton` (`n(88078)`)."
        },
        {
          "name": "classnames/clsx",
          "motivation": "The code imports `n(94184)` as `i` and uses it in the pattern `i()(c().container,{[c().border]:!l})`, which is typical for utility libraries like `classnames` or `clsx` used for conditionally joining CSS class names."
        }
      ]
    },
    {
      "file": "_next/static/chunks/pages/transactions/queue-debdbd459f98a837.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code imports `React` (`n(67294)`) and uses JSX syntax (`n(85893)`), including functional components, hooks (`useState`, `useEffect`, `forwardRef`), which are core features of React."
        },
        {
          "name": "Next.js",
          "motivation": "The code includes `(window.__NEXT_P=window.__NEXT_P||[]).push([\"/transactions/queue\", ...])`, which is characteristic of Next.js page loading. It also imports specific Next.js modules like `next/link` (`n(41664)` as `s`), `next/router` (`n(11163)` as `u`), and `next/head` (`n(9008)` as `l`). The file path `_next/static/chunks/pages/transactions/queue-...` also indicates a Next.js build structure."
        },
        {
          "name": "Material UI (MUI)",
          "motivation": "The code imports and uses various components that are standard in MUI, such as `Tabs` (`n(88409)` as `i`), `Tab` (`n(40044)` as `o`), `Typography` (`n(15861)` as `c`), `Box` or `Paper` (`n(80822)` as `L`), and `Skeleton` (`n(88078)` as `m`). Component props like `variant`, `color`, `fontWeight`, `sx` are common MUI patterns."
        },
        {
          "name": "clsx/classnames",
          "motivation": "The code uses `i()(c().container,{[c().border]:!s})` (`n(94184)` as `i`) which is a common pattern for conditionally joining CSS class names, typical of libraries like `clsx` or `classnames` used alongside CSS Modules (`n(70070)`)."
        }
      ]
    },
    {
      "file": "_next/static/chunks/pages/transactions-aa9de749d6d90611.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "Code uses `(0,a.jsx)` and `(0,a.jsxs)` which are transpiled JSX syntax, common React patterns like `(0,r.forwardRef)`, `(0,r.useState)`, and `(0,r.useEffect)`, and imports likely related to React's core (`n(85893)`, `n(67294)`)."
        },
        {
          "name": "Next.js",
          "motivation": "Code imports and uses `next/link` (`n(41664)`), `next/router` (`n(11163)` via `(0,d.useRouter)()`), and `next/head` (`n(9008)`). The file path `_next/static/chunks/pages/transactions-aa9de749d6d90611.js` and the `(window.__NEXT_P=window.__NEXT_P||[]).push([\"/transactions\",...])` pattern are characteristic of Next.js page bundles."
        },
        {
          "name": "Material UI (MUI)",
          "motivation": "Code uses components with names and props characteristic of MUI, such as `Tabs` (`n(88409)`), `Tab` (`n(40044)`), `Typography` (`n(15861)`), `Container` (`n(80822)`), `Skeleton` (`n(88078)` with `sx` prop), `Alert` (`n(60194)`), and potentially `Box` or `Stack`. It also uses CSS-in-JS patterns often associated with MUI (`n(94184)`, `n(70070)`)."
        }
      ]
    },
    {
      "file": "_next/static/chunks/pages/welcome/social-login-5f4ba3a69b5994f4.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code uses `React`'s core functionalities like `useState`, `useEffect`, `useRef`, `useContext`, `useMemo`, `forwardRef`, `Fragment` and JSX syntax (`(0,s.jsx)` which typically corresponds to `react/jsx-runtime`). Imports like `r(67294)` (React) and `r(85893)` (JSX runtime) confirm this."
        },
        {
          "name": "Next.js",
          "motivation": "The code structure `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)` is characteristic of Next.js. It uses Next.js specific components like `next/image` (`r(23271)`, `r(645)`, `r(25675)`) and potentially `next/link` (`r(41664)`). The presence of `_next/static/chunks` in the file path and image paths like `/_next/image/` and `/_next/static/media/` further indicate Next.js usage. The code also references `RouterContext` (`r(11823)`)."
        },
        {
          "name": "Material UI (MUI)",
          "motivation": "The code imports and uses various components commonly found in Material UI, such as `Button` (`r(69417)`), `Typography` (`r(15861)`), `Grid` (`r(86886)`), `Drawer` (`r(77533)`), `TextField` (`r(87109)`), `InputAdornment` (`r(87109)`), `IconButton` (`r(93946)`), `Tooltip` (`r(34386)`), and icons like `ChevronLeft` (`r(19572)`) and `RotateLeft` (`r(83335)`)."
        },
        {
          "name": "React Hook Form",
          "motivation": "The code imports and uses functions like `useForm` (`r(87536).cI`) and `FormProvider` (`r(87536).RV`), which are key exports from the `react-hook-form` library for managing form state and validation."
        },
        {
          "name": "Redux Toolkit (or similar state manager)",
          "motivation": "The code uses hook-like functions `(0,g.CG)` and `(0,g.TL)` (`r(89773)`) to access state and dispatch actions, respectively. This pattern is common with Redux Toolkit (`useSelector`, `useDispatch`) or similar state management libraries like Zustand, often used alongside React."
        }
      ]
    },
    {
      "file": "_next/static/chunks/pages/welcome-4ef3c46179d23259.js",
      "occurences": [
        {
          "name": "Next.js",
          "motivation": "```javascript\n(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)\n(window.__NEXT_P=window.__NEXT_P||[]).push([\"/welcome\",...])\n```\nThese patterns are characteristic of a Next.js application's chunk loading and page registration mechanism. Imports like `n(9008)` (likely `next/head`) also suggest Next.js."
        },
        {
          "name": "React",
          "motivation": "```javascript\nvar r=n(85893) // likely react/jsx-runtime\nvar l=n(67294) // likely react\n// ...\nlet [t,n]=(0,l.useState)(!1)\nreturn (0,r.jsxs)(r.Fragment,{...})\n```\nThe code extensively uses JSX syntax (`(0,r.jsx)`, `(0,r.jsxs)`), React hooks like `useState` and `useEffect` (`(0,l.useState)`, `(0,L.useEffect)`), and component structures, indicating the use of the React library."
        },
        {
          "name": "Material UI (MUI)",
          "motivation": "```javascript\nvar i=n(27257) // likely MUI component\nvar s=n(80822) // likely Card\nvar o=n(15861) // likely Typography\nvar a=n(23795) // likely Link\nvar u=n(69417) // likely Button\nvar _=n(61903) // likely TextField\nvar b=n(87109) // likely InputAdornment\nvar v=n(93946) // likely IconButton\nvar d=n(86886) // likely Grid\n// ...\n(0,r.jsx)(o.ZP,{variant:\"temporary\",anchor:\"left\",open:t,onClose:closeSidebar,...})\n(0,r.jsx)(u.Z,{href:h.$.newSafe.load,sx:{minHeight:\"42px\"},variant:\"contained\",...})\n(0,l.jsx)(_.Z,{...h(\"rpc\",...),variant:\"outlined\",type:\"url\",InputProps:{...}})\n```\nThe code imports and uses numerous components with names and props characteristic of Material UI, such as `Drawer` (`o.ZP`), `Button` (`u.Z`), `Typography` (`o.Z`), `Card` (`s.Z`), `TextField` (`_.Z`), `Grid` (`d.ZP`), `Link` (`a.Z`), `IconButton` (`v.Z`), `InputAdornment` (`b.Z`), `SvgIcon` (`j.Z`), `Tooltip` (`p.Z`)."
        },
        {
          "name": "Redux / Redux Toolkit",
          "motivation": "```javascript\nvar x=n(89773) // likely state management hooks (e.g., react-redux)\nvar f=n(81880) // likely state slice / actions\n// ...\nlet e=(0,u.CG)(h.o7) // Likely useSelector(mapStateToProps)\nvar s=(0,Z.ZP)() // Likely useSelector or similar hook\nvar a=(0,x.CG)(f.vi) // Likely useSelector(state => state.someSlice)\nvar c=(0,x.TL)() // Likely useDispatch()\nlet P=m(e=>{c((0,f.sG)({chainId:s,rpc:e.rpc})),i()}) // Likely dispatch(someActionCreator(...))\n```\nThe code uses functions aliased as `x.CG` and `x.TL`, which commonly correspond to `useSelector` and `useDispatch` in minified code using `react-redux`. It accesses state slices (`f.vi`, `f.re`, `h.o7`) and dispatches actions (`f.sG`), typical patterns for Redux Toolkit or a similar Redux setup."
        },
        {
          "name": "react-hook-form",
          "motivation": "```javascript\nvar y=n(87536)\n// ...\nvar d=(0,y.cI)({mode:\"onChange\",values:{rpc:...}})\nconst {register:h,handleSubmit:m,formState:w,setValue:L,watch:S}=d;\nS(\"rpc\");\nlet P=m(e=>{...});\nreturn(0,l.jsx)(y.RV,{...d,children:(0,l.jsxs)(\"form\",{onSubmit:P,...})\n(0,l.jsx)(_.Z,{...h(\"rpc\",{required:!0,validate:e=>e.startsWith(\"http\")}),...})\n```\nThe code explicitly calls `useForm` (likely aliased as `y.cI`), destructures its return value (`register`, `handleSubmit`, `formState`, `setValue`, `watch`), uses the `register` function (`h(\"rpc\",...)`) on an input field, wraps the form in a `FormProvider` (likely `y.RV`), and uses the `handleSubmit` function (`m(...)`) for form submission. These are hallmarks of the `react-hook-form` library."
        }
      ]
    },
    {
      "file": "_next/static/chunks/polyfills-c67a75d1b6f99dc8.js",
      "occurences": [
        {
          "name": "core-js",
          "motivation": "The code extensively polyfills modern JavaScript features (ES6+), including `Symbol`, `Promise`, `Map`, `Set`, `Array.prototype.find`, `Array.prototype.includes`, `Object.assign`, `Object.entries`, `String.prototype.padStart`, `Reflect`, etc. This is characteristic of the `core-js` library used to provide compatibility for older browsers. Specific signs include the `__core-js_shared__` string, the structure for defining polyfills (`Lt({...})`), and the explicit mention of the core-js version (`version:\"3.6.5\"`) within the shared store setup."
        },
        {
          "name": "Fetch API Polyfill (whatwg-fetch or similar)",
          "motivation": "The code defines `fetch`, `Headers`, `Request`, and `Response` constructors and prototypes, mimicking the standard Fetch API. It includes logic (`_l` function) to implement `fetch` using `XMLHttpRequest` for environments where `fetch` is not natively available or needs patching. This is typical behavior of fetch polyfills like `whatwg-fetch`."
        },
        {
          "name": "URL/URLSearchParams Polyfill",
          "motivation": "The code provides implementations for the `URL` and `URLSearchParams` constructors and their associated methods (like `append`, `get`, `getAll`, `toString`, `sort`, `href`, `searchParams`, etc.). This indicates polyfilling for URL parsing and manipulation APIs, often included alongside fetch polyfills or core-js for broader browser compatibility (`Lt({global:!0,forced:!Cu},{URLSearchParams:ys})`, `Lt({global:!0,forced:!Cu,sham:!i},{URL:Pc})`)."
        }
      ]
    },
    {
      "file": "_next/static/chunks/webpack-5a12f770408bb36f.js",
      "occurences": [
        {
          "name": "webpack",
          "motivation": "The code contains numerous functions prefixed with `__webpack_require__` (e.g., `__webpack_require__.e`, `__webpack_require__.u`, `__webpack_require__.l`, `__webpack_require__.O`), which are standard webpack runtime functions for module loading, chunk management, and other bundling tasks."
        },
        {
          "name": "Next.js",
          "motivation": "The code references `self.webpackChunk_N_E` and uses the variable `t = \"_N_E:\"` when setting script attributes (`data-webpack`). The file path `/_next/static/chunks/webpack-....js` is the standard location for webpack runtime code within a Next.js application build output."
        }
      ]
    },
    {
      "file": "sw.js",
      "occurences": [
        {
          "name": "Workbox",
          "motivation": "The code imports `./workbox-83b758e3` and extensively uses functions aliased from this import, such as `e.clientsClaim()`, `e.precacheAndRoute()`, `e.cleanupOutdatedCaches()`, `e.registerRoute()`, and classes like `e.NetworkFirst`, `e.CacheFirst`, `e.StaleWhileRevalidate`, `e.ExpirationPlugin`. These are standard APIs provided by the Workbox library for service workers."
        }
      ]
    }
  ],
  "urls": [],
  "ethereum": [
    {
      "file": "_next/static/chunks/1778.b9443fa2f35b8504.js",
      "occurences": [
        {
          "count": 26
        }
      ]
    },
    {
      "file": "_next/static/chunks/5811.987125dd4dc8fef8.js",
      "occurences": [
        {
          "count": 1
        }
      ]
    },
    {
      "file": "_next/static/chunks/pages/_app-cd8fbfe0c719e16b.js",
      "occurences": [
        {
          "count": 2
        }
      ]
    }
  ],
  "fallbacks": []
}