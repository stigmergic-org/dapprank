{
  "version": 2,
  "contentHash": "bafybeietmris6hnjhhuf774nfteeajnxdrcprd5ixv3zhzwqrpdgij3oh4",
  "timestamp": 1748881481,
  "blockNumber": 22618159,
  "rootMimeType": "inode/directory",
  "totalSize": 5681606,
  "favicon": "favicon.png",
  "title": "Ethereum R1",
  "distributionPurity": {
    "externalScripts": [],
    "externalMedia": []
  },
  "networkingPurity": [
    {
      "file": "_next/static/chunks/1416-49299d90b45ab4fe.js",
      "occurences": [
        {
          "method": "WebSocket",
          "urls": [
            "ws://127.0.0.1:8545"
          ],
          "library": "Viem",
          "type": "rpc",
          "motivation": "A Viem client `N` is configured with a WebSocket transport `(0,m.j)(\"ws://127.0.0.1:8545\")` to connect to a local Hardhat development node. This is a direct RPC connection."
        },
        {
          "method": "fetch",
          "urls": [
            "a.env.NEXT_PUBLIC_ETHEREUM_RPC_URL"
          ],
          "library": "Viem/Wagmi",
          "type": "rpc",
          "motivation": "The Wagmi configuration allows overriding the RPC URL for Ethereum mainnet (`r.R.id`) using the environment variable `NEXT_PUBLIC_ETHEREUM_RPC_URL`. If provided, this URL is used with Viem's `http` transport, which internally uses `fetch`."
        },
        {
          "method": "fetch",
          "urls": [
            "a.env.NEXT_PUBLIC_SEPOLIA_RPC_URL"
          ],
          "library": "Viem/Wagmi",
          "type": "rpc",
          "motivation": "Similarly, the Wagmi configuration allows overriding the RPC URL for Sepolia testnet (`s.F.id`) using `NEXT_PUBLIC_SEPOLIA_RPC_URL`. This URL, if set, is used by Viem's `http` transport (`fetch`)."
        },
        {
          "method": "fetch",
          "urls": [
            "https://eth-mainnet.g.alchemy.com/v2/",
            "https://eth-sepolia.g.alchemy.com/v2/"
          ],
          "library": "Viem/Wagmi",
          "type": "rpc",
          "motivation": "The code constructs Alchemy RPC URLs using `F=e=>A.default.alchemyApiKey&&U[e]?\"https://\".concat(U[e],\".g.alchemy.com/v2/\").concat(A.default.alchemyApiKey):void 0`. These URLs (for `eth-mainnet` and `eth-sepolia` based on configured chains) are used with Viem's `http` transport (`fetch`) if an Alchemy API key is provided and no override is set for the respective chains (mainnet, sepolia)."
        },
        {
          "method": "fetch",
          "urls": [
            "https://cloudflare-eth.com"
          ],
          "library": "Viem/Wagmi",
          "type": "rpc",
          "motivation": "Viem's `http()` transport, when called without a specific URL for the mainnet chain (`r.R`), defaults to the chain's public RPC URL, which is `https://cloudflare-eth.com`. This is used as a fallback in the Wagmi client configuration and by the `q` client for price fetching."
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.sepolia.org"
          ],
          "library": "Viem/Wagmi",
          "type": "rpc",
          "motivation": "Viem's `http()` transport, when called without a specific URL for the Sepolia chain (`s.F`), defaults to the chain's public RPC URL, `https://rpc.sepolia.org`. This is used as a fallback in the Wagmi client configuration."
        },
        {
          "method": "WebSocket",
          "urls": [
            "wss://relay.walletconnect.com"
          ],
          "library": "Wagmi/RainbowKit",
          "type": "auxiliary",
          "motivation": "The application uses RainbowKit with a `walletConnectProjectId`. The WalletConnect connector, managed by Wagmi/RainbowKit, establishes WebSocket connections to WalletConnect's relay server (`wss://relay.walletconnect.com`) for communication with mobile wallets."
        },
        {
          "method": "fetch",
          "urls": [
            "https://ipfs.io/ipfs/"
          ],
          "library": "Viem/Wagmi",
          "type": "auxiliary",
          "motivation": "Wagmi's `useEnsAvatar` hook, which internally uses Viem's `getEnsAvatar`, may resolve ENS avatar URIs. If an avatar is an `ipfs://` URI, Viem's `normalizeEnsAvatar` can convert it to an HTTPS URL using a gateway, which defaults to `https://ipfs.io/ipfs/`. The browser or a fetch call would then retrieve the image from this URL."
        }
      ]
    },
    {
      "file": "_next/static/chunks/245-298a505156a30a82.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://eth.merkle.io",
            "https://rpc.ankr.com/eth_goerli",
            "https://sepolia.drpc.org",
            "https://mainnet.optimism.io",
            "https://goerli.optimism.io",
            "https://sepolia.optimism.io",
            "https://arb1.arbitrum.io/rpc",
            "https://goerli-rollup.arbitrum.io/rpc",
            "https://sepolia-rollup.arbitrum.io/rpc",
            "https://polygon-rpc.com",
            "https://rpc.ankr.com/polygon_mumbai",
            "https://forno.celo.org",
            "https://alfajores-forno.celo-testnet.org",
            "https://rpc.gnosischain.com",
            "https://moonbeam.public.blastapi.io",
            "https://rpc.ankr.com/bsc",
            "https://api.avax.network/ext/bc/C/rpc",
            "https://goerli.base.org",
            "https://mainnet.base.org",
            "https://rpc.zora.energy",
            "https://sepolia.rpc.zora.energy",
            "https://public-node.rsk.co",
            "https://rpc.blast.io",
            "https://mainnet.era.zksync.io",
            "https://worldchain-mainnet.g.alchemy.com/public",
            "https://sepolia.unichain.org"
          ],
          "library": "Wagmi",
          "type": "rpc",
          "motivation": "Wagmi's HTTP transport (found in module `72694`, function `o.x`) uses `fetch` to send JSON-RPC requests. The URL is dynamically determined by `x=e||m?.rpcUrls.default.http[0]`, where `m` is the chain object. The listed URLs are examples taken directly from the `chains` definitions within module `98158` and `79016` (Uniswap SDK chain configs) which are used by Wagmi."
        },
        {
          "method": "WebSocket",
          "urls": [
            "wss://mainnet.gateway.tenderly.co",
            "wss://goerli.gateway.tenderly.co",
            "wss://sepolia.gateway.tenderly.co",
            "wss://optimism.gateway.tenderly.co",
            "wss://optimism-goerli.gateway.tenderly.co",
            "wss://optimism-sepolia.gateway.tenderly.co",
            "wss://arbitrum.gateway.tenderly.co",
            "wss://arbitrum-goerli.gateway.tenderly.co",
            "wss://arbitrum-sepolia.gateway.tenderly.co",
            "wss://polygon.gateway.tenderly.co",
            "wss://polygon-mumbai.gateway.tenderly.co",
            "wss://gnosis.gateway.tenderly.co",
            "wss://bsc.gateway.tenderly.co",
            "wss://base.gateway.tenderly.co",
            "wss://base-goerli.gateway.tenderly.co",
            "wss://zora.gateway.tenderly.co",
            "wss://zora-sepolia.gateway.tenderly.co"
          ],
          "library": "Wagmi",
          "type": "rpc",
          "motivation": "Wagmi's WebSocket transport (found in module `72694`, function `u` which calls `l`) uses `new WebSocket(e)`. The URL `e` is dynamically determined by `g=e||f?.rpcUrls.default.webSocket?.[0]`, where `f` is the chain object. The listed URLs are examples from WebSocket RPCs defined or implied by the chain configurations in module `98158` and `79016` (Uniswap SDK chain configs)."
        },
        {
          "method": "fetch",
          "urls": [
            "https://ipfs.io/ipfs/{CID_OR_PATH}",
            "https://arweave.net/{TX_ID_OR_PATH}",
            "http(s)://<user-defined-domain>/<path-to-metadata>.json",
            "http(s)://<user-defined-domain>/<path-to-image>.<ext>"
          ],
          "library": "Wagmi/RainbowKit (ENS Avatar Logic)",
          "type": "auxiliary",
          "motivation": "The ENS avatar resolution logic in module `96698` (functions `m`, `y`, `g`, `f`) involves fetching data. If an ENS avatar record points to an HTTP URL, or an IPFS/Arweave URI, it's resolved. IPFS/Arweave URIs are converted to gateway URLs (defaults: `https://ipfs.io/ipfs/` and `https://arweave.net/`). `fetch` is used in function `y` to get JSON metadata (`fetch(t).then(e=>e.json())`) and in function `f` to perform a HEAD request (`fetch(e,{method:\"HEAD\"})`) to check image content types from these resolved URLs."
        }
      ]
    },
    {
      "file": "_next/static/chunks/4e88bc13-7e27d50c88f8729d.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://enhanced-provider.rainbow.me/v1/resolve-ens"
          ],
          "library": "RainbowKit internal utility",
          "type": "auxiliary",
          "motivation": "The code defines a generic HTTP client class `e$` and uses it to create an instance `e3` configured with `baseUrl: \"https://enhanced-provider.rainbow.me\"`. A call `e3.get(\"/v1/resolve-ens\", ...)` is made to resolve ENS names. This uses an underlying `fetch` call implemented in the `eG` function."
        },
        {
          "method": "fetch",
          "urls": [
            "Configured RPC endpoint for the current chain via Wagmi"
          ],
          "library": "viem (via Wagmi)",
          "type": "rpc",
          "motivation": "The code extensively uses Wagmi hooks such as `(0,g.K)` (useBalance), `(0,L.Q)` (useSignMessage), `(0,A.o)` (useSwitchChain), and `(0,s.m)` (useAccount). These hooks interact with an Ethereum node by making JSON-RPC requests. Wagmi, typically using `viem` as its client, employs `fetch` for its default HTTP transport to communicate with the RPC endpoint configured by the application."
        },
        {
          "method": "fetch",
          "urls": [
            "/_next/static/chunks/3055.js",
            "/_next/static/chunks/2285.js",
            "/_next/static/chunks/4501.js",
            "/_next/static/chunks/7850.js",
            "/_next/static/chunks/8080.js",
            "/_next/static/chunks/2673.js"
          ],
          "library": "Webpack runtime",
          "type": "self",
          "motivation": "The code uses Webpack's dynamic import mechanism `n.e(CHUNK_ID)` (e.g., `n.e(3055)`, `n.e(4501)`) to lazy-load JavaScript chunks. These calls trigger `fetch` requests to relative URLs, typically following a pattern like `/_next/static/chunks/[chunkId].[hash].js`, to load translations, icons, and other code-split modules. The listed URLs are examples based on chunk IDs found in the code, representing the path to the JavaScript files being fetched."
        }
      ]
    },
    {
      "file": "_next/static/chunks/588.238b76aa288ad206.js",
      "occurences": [
        {
          "method": "WebSocket",
          "urls": [],
          "library": "Native API",
          "type": "auxiliary",
          "motivation": "The code actively searches for and exports the native `WebSocket` constructor. It checks `WebSocket` in the global scope, then `global.WebSocket`, `window.WebSocket`, and `self.WebSocket`. While this specific snippet does not instantiate a WebSocket connection with a URL (e.g., `new WebSocket(url)`), the `WebSocket` networking API is 'detected' because it is being programmatically accessed and prepared for potential use by other parts of the application. No specific URL is used in this snippet."
        }
      ]
    },
    {
      "file": "_next/static/chunks/6275.f83fb72d5f956738.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://explorer.walletconnect.com/v2/wallets"
          ],
          "library": "WalletConnect Modal Internal (`ExplorerCtrl`)",
          "type": "auxiliary",
          "motivation": "The code invokes `await t$.ExplorerCtrl.getWallets({page:..., entries:..., search:..., version:2, chains:...})`. This asynchronous call, taking parameters like `page`, `entries`, `search`, and `version: 2`, strongly suggests a `fetch` request to a REST API. The purpose is to retrieve a list of wallets from the WalletConnect explorer service. The domain `explorer.walletconnect.com` is inferred from the constant `e8.EXPLORER_WALLET_URL`, and `/v2/wallets` is a best guess for the path based on the `version: 2` parameter and common API design patterns."
        },
        {
          "method": "fetch",
          "urls": [
            "https://explorer.walletconnect.com/v2/recommended_wallets"
          ],
          "library": "WalletConnect Modal Internal (`ExplorerCtrl`)",
          "type": "auxiliary",
          "motivation": "The code calls `await t$.ExplorerCtrl.getRecomendedWallets()`. This asynchronous operation likely uses `fetch` to retrieve a list of recommended wallets from the WalletConnect explorer service. The domain `explorer.walletconnect.com` is inferred, and `/v2/recommended_wallets` is a plausible API endpoint for fetching such data, consistent with a versioned API structure."
        }
      ]
    },
    {
      "file": "_next/static/chunks/7172.04f16ef6b5c24ecc.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://verify.walletconnect.org/v3/attestation"
          ],
          "library": "@walletconnect/core (Verify API module)",
          "type": "auxiliary",
          "motivation": "The `verify-api` module (`nh` class) in WalletConnect SDK calls `fetch` with a URL constructed as `${this.verifyUrlV3}/attestation?projectId=...&origin=...&id=...&decryptedId=...`. `this.verifyUrlV3` is initialized to `rB` which is `https://verify.walletconnect.org/v3`. This is used for registering an attestation for link mode."
        },
        {
          "method": "fetch",
          "urls": [
            "https://verify.walletconnect.org/attestation/"
          ],
          "library": "@walletconnect/core (Verify API module)",
          "type": "auxiliary",
          "motivation": "The `verify-api` module (`nh` class) in WalletConnect SDK calls `fetch` in its `fetchAttestation` method with a URL constructed as `${t}/attestation/${e}?v2Supported=true`. The base URL `t` is obtained from `this.getVerifyUrl()` which defaults to `rF` (i.e., `https://verify.walletconnect.org`). The path includes a dynamic hash. This is used to resolve attestations."
        },
        {
          "method": "fetch",
          "urls": [
            "https://verify.walletconnect.org/v3/public-key"
          ],
          "library": "@walletconnect/core (Verify API module)",
          "type": "auxiliary",
          "motivation": "The `verify-api` module (`nh` class) in WalletConnect SDK calls `fetch` in its `fetchPublicKey` method with a URL constructed as `${this.verifyUrlV3}/public-key`. `this.verifyUrlV3` is initialized to `https://verify.walletconnect.org/v3`. This fetches the public key for JWT attestation validation."
        },
        {
          "method": "fetch",
          "urls": [
            "https://echo.walletconnect.com/"
          ],
          "library": "@walletconnect/core (EchoClient module)",
          "type": "auxiliary",
          "motivation": "The `EchoClient` module (`nl` class) in WalletConnect SDK calls `fetch` in its `registerDeviceToken` method with a URL `https://echo.walletconnect.com/${this.projectId}/clients`. The path includes a dynamic project ID. This is used to register device tokens for push notifications."
        },
        {
          "method": "fetch",
          "urls": [
            "https://pulse.walletconnect.org/batch"
          ],
          "library": "@walletconnect/core (EventClient/Telemetry module)",
          "type": "auxiliary",
          "motivation": "The `EventClient` module (`nm` class) in WalletConnect SDK calls `fetch` in its `sendEvent` method with the URL `https://pulse.walletconnect.org/batch?projectId=...&st=events_sdk&sv=...`. This is used for sending telemetry data."
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/bundler"
          ],
          "library": "@walletconnect/universal-provider",
          "type": "bundler",
          "motivation": "The `EthereumProvider` (class `s$`, part of UniversalProvider) in its `getCallStatus` method may call `getUserOperationReceipt`. This function fetches from a bundler URL, which can be derived from `this.getBundlerUrl(e.chainId,n)` or `sessionProperties?.bundler_url`. The `getBundlerUrl` constructs `https://rpc.walletconnect.org/v1/bundler?projectId=...&chainId=...&bundler=...` using the `su` variable (defined as `${sa}bundler` where `sa` is `https://rpc.walletconnect.org/v1/`). This is for ERC-4337 user operation receipts."
        },
        {
          "method": "fetch",
          "urls": [
            "https://rpc.walletconnect.org/v1/"
          ],
          "library": "@walletconnect/universal-provider",
          "type": "rpc",
          "motivation": "The `UniversalProvider` (class `s4`) and its specific chain provider implementations (e.g., `EthereumProvider` - class `s$`) make RPC requests using `fetch`. The URL is constructed by the `sD(e,t,r)` function, which defaults to `${sa}?chainId=${n.namespace}:${n.reference}&projectId=${r}` where `sa` is `https://rpc.walletconnect.org/v1/`. This is used for standard JSON-RPC calls to various chains."
        },
        {
          "method": "WebSocket",
          "urls": [
            "wss://relay.walletconnect.org"
          ],
          "library": "@walletconnect/core (Relayer module)",
          "type": "auxiliary",
          "motivation": "The `Relayer` module (class `i6`) in WalletConnect SDK establishes a WebSocket connection. The URL is constructed in its `createProvider` method using `this.relayUrl` (which defaults to `rM`, i.e., `wss://relay.walletconnect.org`) and an auth token. This connection is crucial for real-time messaging via WalletConnect's relay service."
        }
      ]
    },
    {
      "file": "_next/static/chunks/9284.7c78cfedd2e55485.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "[CONFIGURED_RPC_ENDPOINT]"
          ],
          "library": "Coinbase Wallet SDK",
          "type": "rpc",
          "motivation": "The SDK's signer implementations (`el` for SCW, `eV` for WalletLink) use `fetch` (via the `ei` utility function) to send JSON-RPC requests to an Ethereum RPC endpoint. The URL is dynamically determined at runtime from `this.chain.rpcUrl` or `this.jsonRpcUrl`, which are populated based on the connected wallet's current chain configuration or persisted settings. Requests are HTTP POST with a JSON body. Headers `X-Cbw-Sdk-Version` (e.g., \"4.3.0\") and `X-Cbw-Sdk-Platform` (e.g., \"@coinbase/wallet-sdk\") are included."
        },
        {
          "method": "fetch",
          "urls": [
            "http://rpc.wallet.coinbase.com"
          ],
          "library": "Coinbase Wallet SDK",
          "type": "auxiliary",
          "motivation": "The SDK makes a `fetch` call to `http://rpc.wallet.coinbase.com` specifically for the `wallet_getCallsStatus` RPC method (in class `e8`). This suggests a Coinbase-specific backend service for querying the status of wallet operations. The request is an HTTP POST with a JSON body."
        },
        {
          "method": "fetch",
          "urls": [
            "https://www.walletlink.org/events/{eventId}/seen"
          ],
          "library": "Coinbase Wallet SDK",
          "type": "auxiliary",
          "motivation": "Within the WalletLink communication logic (class `ef`), a `fetch` POST request is made to an endpoint constructed from `this.linkAPIUrl` (defaulting to `https://www.walletlink.org`) and a path like `/events/{eventId}/seen`. This is used to mark specific WalletLink events as seen by the client, using an `Authorization` header."
        },
        {
          "method": "fetch",
          "urls": [
            "https://www.walletlink.org/events?unseen=true"
          ],
          "library": "Coinbase Wallet SDK",
          "type": "auxiliary",
          "motivation": "The WalletLink component (class `ef`) uses `fetch` to poll for unseen events from an endpoint derived from `this.linkAPIUrl` (defaulting to `https://www.walletlink.org`) with the path `/events?unseen=true`. This request includes an `Authorization` header."
        },
        {
          "method": "fetch",
          "urls": [
            "[CURRENT_PAGE_URL]"
          ],
          "library": "Coinbase Wallet SDK",
          "type": "self",
          "motivation": "The SDK includes a utility (`e0`, `checkCrossOriginOpenerPolicy`) that performs a `fetch` HEAD request to the current page's own URL (`${window.location.origin}${window.location.pathname}`). This is done to inspect the `Cross-Origin-Opener-Policy` HTTP header of the hosting page for compatibility reasons."
        },
        {
          "method": "WebSocket",
          "urls": [
            "wss://www.walletlink.org/rpc"
          ],
          "library": "Coinbase Wallet SDK",
          "type": "auxiliary",
          "motivation": "The WalletLink communication manager (class `eg`, used by `em`) establishes a WebSocket connection. The URL is constructed by taking `linkAPIUrl` (which defaults to `https://www.walletlink.org`), replacing `http` with `ws` (or `https` with `wss`), and appending `/rpc`. This WebSocket is crucial for the real-time bidirectional communication between the dApp (via SDK) and the Coinbase Wallet mobile application for relaying requests and responses."
        }
      ]
    },
    {
      "file": "_next/static/chunks/app/blockexplorer/page-95ed5e56cc336662.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "http://127.0.0.1:8545",
            "http://localhost:8545"
          ],
          "library": "Wagmi/Viem",
          "type": "rpc",
          "motivation": "The `wagmi/viem` public client (obtained via `(0,d.t)` and subsequently used for `n.getTransaction(...)`) makes Ethereum RPC calls. This client, and likely the one used internally by the `(0,h.lp)()` hook (for fetching blocks and transaction receipts), uses `fetch` for HTTP/HTTPS transports. \nThe code's logic and error messages (e.g., `Cannot connect to local provider`, `Did you forget to run yarn chain?`, and checks against `i.c.id` which appears to represent the localhost chain ID) strongly imply that the target RPC URL is a local development node. Common default URLs for such nodes (e.g., Hardhat, Anvil) are `http://127.0.0.1:8545` or `http://localhost:8545`. \nData is passed as JSON-RPC payloads; for example, the transaction hash `e` is passed to `n.getTransaction({hash:e})` for the `eth_getTransactionByHash` RPC method. Other calls like `eth_getBlockByNumber` and `eth_getTransactionReceipt` are implicitly made by `(0,h.lp)()`."
        }
      ]
    },
    {
      "file": "_next/static/chunks/app/page-cce2e81fc74959c1.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://0000000000.org/donations"
          ],
          "library": "otherwise",
          "type": "auxiliary",
          "motivation": "A direct `fetch` call is made to the URL 'https://0000000000.org/donations' within the `H` async function. This call is part of the application's custom logic to retrieve donation data, and the URL is explicitly hardcoded in the script."
        },
        {
          "method": "fetch",
          "urls": [
            "https://0000000000.org/transfers"
          ],
          "library": "otherwise",
          "type": "auxiliary",
          "motivation": "A direct `fetch` call is made to the URL 'https://0000000000.org/transfers' within the `H` async function. This call is part of the application's custom logic to retrieve transfer data, and the URL is explicitly hardcoded in the script."
        },
        {
          "method": "fetch",
          "urls": [
            "https://cloudflare-eth.com",
            "https://rpc.sepolia.org"
          ],
          "library": "Viem",
          "type": "rpc",
          "motivation": "The `simulateContract` method is called on a Viem public client instance (`t`). This client is created using `(0,l.v)` (identified as `createPublicClient`) and configured with `(0,o.d)()` (identified as Viem's `http` transport). Viem's `http` transport internally uses `fetch` to send JSON-RPC requests. Since `http()` is called without an explicit URL argument, Viem defaults to using the RPC URL specified in the chain definition object passed to `createPublicClient`. The code uses conditional logic for the chain (`y===c.F?c.F:i.R`), where `i.R` likely represents the Mainnet chain object (Viem default RPC: 'https://cloudflare-eth.com') and `c.F` likely represents the Sepolia chain object (Viem default RPC: 'https://rpc.sepolia.org')."
        }
      ]
    },
    {
      "file": "_next/static/chunks/main-daa4e9d8980da834.js",
      "occurences": [
        {
          "method": "WebSocket",
          "urls": [
            "ws(s)://<host_or_cdn_domain><normalized_asset_prefix_path><hmr_endpoint_path>"
          ],
          "library": "Next.js",
          "type": "self",
          "motivation": "A WebSocket connection is established for Hot Module Replacement (HMR) during development. The URL is dynamically constructed: `getSocketUrl(assetPrefix)` (from module `53721`) determines the base (e.g., `ws://localhost:3000/_next` if `assetPrefix` is `/_next`, or `wss://cdn.example.com/assets` if `assetPrefix` is a full URL like `https://cdn.example.com/assets`). A specific HMR path (e.g., `/webpack-hmr`, passed as `e.path` in `connectHMR` from module `45303`) is then appended to this base."
        },
        {
          "method": "fetch",
          "urls": [
            "<asset_prefix_value_or_empty>./_next/<path_to_css_from_build_manifest><optional_deployment_id_query>"
          ],
          "library": "Next.js",
          "type": "self",
          "motivation": "The Next.js route loader (`createRouteLoader` in module `32856`) fetches CSS files. URLs are formed by concatenating the `assetPrefix` (which can be empty, a relative path, or a full URL), the literal string `./_next/`, a path to a CSS file derived from the build manifest (e.g., `static/css/main.123.css`), and potentially a deployment ID query string. This is for loading application-specific stylesheets."
        },
        {
          "method": "fetch",
          "urls": [
            "<basePath_value_or_empty>/_next/data/<buildId>/<locale_prefixed_page_route_as_filename>.json<query_string>"
          ],
          "library": "Next.js",
          "type": "self",
          "motivation": "Next.js's client-side router (module `29668`) fetches JSON data for pages (props from `getServerSideProps` or `getStaticProps`). The `pageLoader.getDataHref` method constructs these URLs. Any configured `basePath` is prepended to a path like `/_next/data/<buildId>/<locale_prefix_if_any>/<page_route_transformed_to_filename>.json`, and relevant query parameters are appended. This facilitates dynamic page hydration."
        }
      ]
    },
    {
      "file": "_next/static/chunks/polyfills-42372ed130431b0a.js",
      "occurences": [
        {
          "method": "XMLHttpRequest",
          "urls": [],
          "library": "Fetch API Polyfill",
          "type": "auxiliary",
          "motivation": "The `fetch` polyfill function (`hb`) explicitly creates an `XMLHttpRequest` object (e.g., `var i=new XMLHttpRequest;`) and calls its `open` method (e.g., `i.open(o.method,o.url,!0)`). The URL (`o.url`) passed to `open` is derived from the first argument (`t`) of the polyfilled `fetch` function. Since this argument is dynamic and its value is not statically defined within this script, no specific URL from this codebase can be listed. The call originates from the identified 'Fetch API Polyfill'."
        }
      ]
    }
  ],
  "libraryUsage": [
    {
      "file": "404/index.html#inline-script-3",
      "occurences": [
        {
          "name": "Next.js",
          "motivation": "The code `self.__next_f.push([1,\"...\"])` is a pattern commonly found in Next.js applications. `__next_f` is an array used by Next.js for managing client-side rendering tasks, including loading critical resources like CSS. The paths `\"./_next/static/css/b30489573339f853.css\"` and `\"./_next/static/css/06fcc46807dabc5c.css\"` are standard Next.js build output paths for static assets."
        }
      ]
    },
    {
      "file": "404/index.html#inline-script-4",
      "occurences": [
        {
          "name": "Next.js",
          "motivation": "The code uses `self.__next_f.push([...])`. This is a known internal mechanism of Next.js for handling data related to its React Server Components (RSC) implementation, often referred to as 'Flight' data. The `__next_f` variable is specific to Next.js's client-side runtime for processing streamed RSC payloads."
        },
        {
          "name": "React",
          "motivation": "Next.js is fundamentally a React framework. The data structure pushed to `self.__next_f` includes identifiers like `ThemeProvider` and `ScaffoldEthAppWithProviders`. These are conventional names for React components. The entire `self.__next_f` mechanism is part of the React Server Components architecture, which Next.js heavily utilizes."
        },
        {
          "name": "WAGMI (or similar Ethereum React hooks library)",
          "motivation": "The data includes an identifier `ScaffoldEthAppWithProviders`. This name strongly suggests a React Context Provider component designed to set up and manage Ethereum-related state and functionality within a React application. Libraries like WAGMI (and alternatives such as `web3-react` or custom hooks built with `ethers.js`/`viem`) provide such context and hooks for wallet connections, network information, and contract interactions. Boilerplate projects like `scaffold-eth` commonly integrate these types of libraries to create components with similar names and purposes."
        }
      ]
    },
    {
      "file": "404/index.html#inline-script-5",
      "occurences": [
        {
          "name": "Next.js",
          "motivation": "The code uses `self.__next_f.push(...)`, which is a characteristic mechanism for Next.js to stream server-rendered page data and flight instructions to the client. The structure of the pushed data, a serialized string, contains elements like `buildId`, `assetPrefix`, `initialTree`, `initialSeedData`, `parallelRouterKey`, and internal identifiers like `\"$L3\"`, `\"$L4\"`, which are indicative of Next.js's internal data format for page hydration and Server Components."
        },
        {
          "name": "React",
          "motivation": "The serialized data pushed via Next.js's mechanism describes a tree of UI components. Structures like `[\"$\",\"div\",null,{\"style\":{...},\"children\":[...]}]` strongly resemble a serialized form of React elements (e.g., `React.createElement('div', { style: {...} }, ...children)`). The presence of common React props and concepts such as `dangerouslySetInnerHTML`, `className`, `suppressHydrationWarning`, and the `children` prop for nesting components further indicates that React is the underlying UI library used to define and render these components."
        }
      ]
    },
    {
      "file": "404/index.html#inline-script-6",
      "occurences": [
        {
          "name": "Next.js",
          "motivation": "The code uses `self.__next_f.push()`. This is a known internal mechanism used by the Next.js framework, typically for streaming data chunks from the server for Server-Side Rendering (SSR) hydration or for client-side page construction. The data being pushed, `d:[[...]]`, appears to be a serialized representation of HTML meta and link tags, which Next.js's client-side runtime would process to update the document's head."
        }
      ]
    },
    {
      "file": "404.html#inline-script-3",
      "occurences": [
        {
          "name": "Next.js",
          "motivation": "The code `self.__next_f.push([1,\"...\"])` is a pattern commonly found in Next.js applications. `__next_f` is an array used by Next.js for managing client-side rendering tasks, including loading critical resources like CSS. The paths `\"./_next/static/css/b30489573339f853.css\"` and `\"./_next/static/css/06fcc46807dabc5c.css\"` are standard Next.js build output paths for static assets."
        }
      ]
    },
    {
      "file": "404.html#inline-script-4",
      "occurences": [
        {
          "name": "Next.js",
          "motivation": "The code uses `self.__next_f.push([...])`. This is a known internal mechanism of Next.js for handling data related to its React Server Components (RSC) implementation, often referred to as 'Flight' data. The `__next_f` variable is specific to Next.js's client-side runtime for processing streamed RSC payloads."
        },
        {
          "name": "React",
          "motivation": "Next.js is fundamentally a React framework. The data structure pushed to `self.__next_f` includes identifiers like `ThemeProvider` and `ScaffoldEthAppWithProviders`. These are conventional names for React components. The entire `self.__next_f` mechanism is part of the React Server Components architecture, which Next.js heavily utilizes."
        },
        {
          "name": "WAGMI (or similar Ethereum React hooks library)",
          "motivation": "The data includes an identifier `ScaffoldEthAppWithProviders`. This name strongly suggests a React Context Provider component designed to set up and manage Ethereum-related state and functionality within a React application. Libraries like WAGMI (and alternatives such as `web3-react` or custom hooks built with `ethers.js`/`viem`) provide such context and hooks for wallet connections, network information, and contract interactions. Boilerplate projects like `scaffold-eth` commonly integrate these types of libraries to create components with similar names and purposes."
        }
      ]
    },
    {
      "file": "404.html#inline-script-5",
      "occurences": [
        {
          "name": "Next.js",
          "motivation": "The code uses `self.__next_f.push(...)`, which is a characteristic mechanism for Next.js to stream server-rendered page data and flight instructions to the client. The structure of the pushed data, a serialized string, contains elements like `buildId`, `assetPrefix`, `initialTree`, `initialSeedData`, `parallelRouterKey`, and internal identifiers like `\"$L3\"`, `\"$L4\"`, which are indicative of Next.js's internal data format for page hydration and Server Components."
        },
        {
          "name": "React",
          "motivation": "The serialized data pushed via Next.js's mechanism describes a tree of UI components. Structures like `[\"$\",\"div\",null,{\"style\":{...},\"children\":[...]}]` strongly resemble a serialized form of React elements (e.g., `React.createElement('div', { style: {...} }, ...children)`). The presence of common React props and concepts such as `dangerouslySetInnerHTML`, `className`, `suppressHydrationWarning`, and the `children` prop for nesting components further indicates that React is the underlying UI library used to define and render these components."
        }
      ]
    },
    {
      "file": "404.html#inline-script-6",
      "occurences": [
        {
          "name": "Next.js",
          "motivation": "The code uses `self.__next_f.push()`. This is a known internal mechanism used by the Next.js framework, typically for streaming data chunks from the server for Server-Side Rendering (SSR) hydration or for client-side page construction. The data being pushed, `d:[[...]]`, appears to be a serialized representation of HTML meta and link tags, which Next.js's client-side runtime would process to update the document's head."
        }
      ]
    },
    {
      "file": "_next/static/chunks/1148.e09bd1a08c4d0839.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code structure `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)` is the standard way Webpack uses to load and define JavaScript modules (chunks) in a bundled application."
        },
        {
          "name": "Next.js",
          "motivation": "The file path `_next/static/chunks/1148.e09bd1a08c4d0839.js` is characteristic of a Next.js application structure. Additionally, the `_N_E` suffix in `self.webpackChunk_N_E` is commonly associated with Next.js internals (e.g., Next Export or similar identifiers used by Next.js when working with Webpack)."
        }
      ]
    },
    {
      "file": "_next/static/chunks/1274.0bd4f7acbbf1c4b6.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code structure `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)` is the standard way Webpack defines and loads asynchronous chunks or modules. This indicates the code is part of a Webpack-bundled application."
        },
        {
          "name": "Next.js",
          "motivation": "The `_N_E` suffix in `self.webpackChunk_N_E` is a common convention used by Next.js for its Webpack chunks, suggesting this code is part of a Next.js application."
        }
      ]
    },
    {
      "file": "_next/static/chunks/1416-49299d90b45ab4fe.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code uses transpiled JSX syntax like `(0,r.jsx)` and `(0,r.jsxs)`, and React hooks such as `(0,a.useState)` (imported as `eJ` or `useState`), `(0,I.useEffect)` (imported as `d4` or `useEffect`), and `(0,A.useRef)` (imported as `mT` or `useRef`). These are characteristic of React applications."
        },
        {
          "name": "Next.js",
          "motivation": "The code is wrapped in `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)`, which is the standard webpack chunk loading mechanism used by Next.js. The file path `_next/static/chunks/...` is also indicative of a Next.js build output."
        },
        {
          "name": "Viem",
          "motivation": "The code utilizes various functions typical of Viem, such as `(0,x.K)` for `getAddress`, utilities for byte and hex conversions (e.g., `(0,v.v)` for `isBytes`, `(0,N.rR)` for `bytesToHex`), and configuration of blockchain clients with transports like `(0,m.j)(\"ws://127.0.0.1:8545\")` (likely `webSocket` transport) and `(0,m.d)(URL)` (likely `http` transport). It's used for interacting with Ethereum."
        },
        {
          "name": "Wagmi",
          "motivation": "Numerous Wagmi hooks and actions are imported and used, including `(0,v.F)` (likely `useEnsName`), `(0,N.c)` (likely `useEnsAvatar`), `(0,o.N)` (likely `useBalance`), `(0,d.S)` (likely `useEnsAddress`), `(0,o.o)` (likely `useSwitchChain`), `(0,l.m)` (likely `useAccount`), `(0,v.q)` (likely `useDisconnect`), and configuration functions like `(0,v._)` (likely `createConfig`). It's used as a React layer on top of Viem for Ethereum interactions."
        },
        {
          "name": "RainbowKit",
          "motivation": "The code includes a component named `RainbowKitCustomConnectButton` and uses `(0,F.NL.Custom)` which corresponds to `ConnectButton.Custom` from RainbowKit. Wallet connector setup with `appName:\"scaffold-eth-2\"` and `projectId:u.default.walletConnectProjectId` further indicates RainbowKit usage for wallet connection UI."
        },
        {
          "name": "react-hot-toast",
          "motivation": "The code uses a notification system via `v.t6.error`, `v.t6.loading`, `v.t6.success`. `v.t6` is an alias for `$.t` from `n(23069)`, which itself uses `s.Am.custom`, `s.Am.dismiss`, `s.Am.remove` where `s` (from `n(69064)`) is `react-hot-toast`. This pattern is characteristic of `react-hot-toast`."
        },
        {
          "name": "blockies",
          "motivation": "The function `(0,s.Ld)(t)` (from `n(27551)`) is used to generate avatar images from an Ethereum address. This is the `makeBlockie` function or a similar utility from a blockies library for generating identicons."
        },
        {
          "name": "@tanstack/react-query",
          "motivation": "Wagmi, which is used extensively, internally relies on `@tanstack/react-query` for data fetching, caching, and state management. Hooks like `useQuery` (often wrapped by Wagmi hooks) and patterns like `query: { enabled: ..., gcTime: ... }` and `invalidateQueries` are indicative of its use."
        },
        {
          "name": "copy-to-clipboard",
          "motivation": "The code features a copy-to-clipboard functionality implemented with `(0,r.jsx)(i(),{text:n,onCopy:...})`, where `i` is imported from `n(29233)`. `i()` likely invokes the `copy` function from the `copy-to-clipboard` library."
        },
        {
          "name": "qrcode.react",
          "motivation": "A QR code is rendered using `(0,r.jsx)(E.t,{value:t,size:256})`, where `E` is imported from `n(35398)`. `E.t` is likely the `QRCodeSVG` or a similar component from the `qrcode.react` library for generating QR codes."
        },
        {
          "name": "Zustand",
          "motivation": "The code defines a state store using `(0,r.U)(e=>({nativeCurrency:{...}}))` where `r` is from `n(3011)`. This `create` function signature is characteristic of Zustand. State is accessed using selectors like `(0,l.j)(e=>e.nativeCurrency.price)` (where `l` is from `n(26786)`)."
        }
      ]
    },
    {
      "file": "_next/static/chunks/1511.276125cc7be3e065.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code snippet uses the `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)` pattern. This is the characteristic mechanism Webpack employs for asynchronously loading and integrating JavaScript modules (chunks) into an application. The arguments `l, e, a` and calls like `a.r(e)` and `a.d(e, ...)` are typical of Webpack's boilerplate for defining modules and their exports within a bundle."
        },
        {
          "name": "Next.js",
          "motivation": "The global variable `webpackChunk_N_E` includes `_N_E` as a suffix. This is a common naming convention used by the Next.js framework for its Webpack-generated chunks. Additionally, the file path provided in the prompt (`_next/static/chunks/...`) is the standard directory structure for static assets and chunks in a Next.js application."
        }
      ]
    },
    {
      "file": "_next/static/chunks/1922.5b0277c8221bb3fa.js",
      "occurences": [
        {
          "name": "webpack",
          "motivation": "The code uses the `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)` pattern. This is a characteristic signature of how Webpack bundles and manages JavaScript modules, indicating its use as a module bundler for this codebase."
        }
      ]
    },
    {
      "file": "_next/static/chunks/1982.c4bdc22fe54a3530.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code uses the pattern `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)`, which is the standard mechanism used by Webpack for asynchronously loading and registering code chunks. The `_N_E` suffix in `webpackChunk_N_E` often indicates a Next.js application, which utilizes Webpack for bundling."
        }
      ]
    },
    {
      "file": "_next/static/chunks/2333.f908fb46dc546bb0.js",
      "occurences": [
        {
          "name": "Webpack Runtime",
          "motivation": "The code is structured as `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2333],{...}])`. This pattern is characteristic of Webpack's module loading runtime. The `push` method is used to register and load asynchronous chunks of code. The `_N_E` in `webpackChunk_N_E` typically indicates that this Webpack bundle is part of a Next.js application."
        }
      ]
    },
    {
      "file": "_next/static/chunks/245-298a505156a30a82.js",
      "occurences": [
        {
          "name": "Ethers.js (v5.8.0)",
          "motivation": "The code includes multiple Ethers.js v5.x modules by their characteristic versioned paths, such as `address/5.8.0`, `bytes/5.8.0`, `bignumber/5.8.0`, `logger/5.8.0`, `solidity/5.8.0`, and `strings/5.8.0`. It utilizes core Ethers.js functionalities like `getAddress` (checksumming, aliased as `Kn`), `getCreate2Address` (aliased as `I.hB` from `42246`), `keccak256` (aliased as `ef.w` from `25650`), `BigNumber.from` (aliased as `k.O$.from` from `92050`), `arrayify`, `hexlify`, `concat`, `solidityPack`-like functions (aliased as `eE` in `79016`), and `toUtf8Bytes`."
        },
        {
          "name": "BN.js",
          "motivation": "Module `44373` contains an implementation of BN.js, identifiable by `t.BN=i,i.BN=i,i.wordSize=26;` and methods like `_initNumber`, `_initArray`, `copy`, `clone`, `toString(16)`, `toNumber`, `toBuffer`, `toArray`, `bitLength`, `isNeg`, `add`, `sub`, `mul`, `div`, `mod`, `pow`, `gcd`, and `invm`. This is commonly used for big integer arithmetic in Ethereum-related libraries."
        },
        {
          "name": "Big.js",
          "motivation": "Module `83667` references Big.js through `d.Big=i`. It's used for arbitrary-precision decimal arithmetic, often alongside Decimal.js. Error messages like `[big.js] Invalid decimal places` are characteristic."
        },
        {
          "name": "Decimal.js",
          "motivation": "Module `35243` (imported by `83667`) defines Decimal.js, as seen by `e.exports=function(e){...e.format=...;return e}`. It's used for arbitrary-precision decimal arithmetic. Error messages like `[DecimalError] Invalid argument:` are present."
        },
        {
          "name": "qrcode.js (or similar QRCode generator)",
          "motivation": "Module `91060` exports `create`, `toCanvas`, `toDataURL`, `toString`. Internals for QR code generation (segments, error correction, matrix, etc.) are present in modules like `69007` (`QRCode.create`), `5929` (rendering to canvas/data URL), and `90339` (rendering to SVG string)."
        },
        {
          "name": "react-remove-scroll / body-scroll-lock (or similar)",
          "motivation": "Module `23911` (aliased as `K=$` where `$` is the component from this module) implements scroll locking functionality. It uses attributes like `data-scroll-locked` and class names such as `with-scroll-bars-hidden`, `right-scroll-bar-position`, and `width-before-scroll-bar`. This is common for modal components to prevent background scrolling."
        },
        {
          "name": "@vanilla-extract/sprinkles",
          "motivation": "Module `5091` includes static strings `importPath:\"@vanilla-extract/sprinkles/createUtils\"`, `importName:\"createNormalizeValueFn\"`, and `importName:\"createMapValueFn\"`, which are direct indicators of using `@vanilla-extract/sprinkles` for styling."
        },
        {
          "name": "UAParser.js",
          "motivation": "Module `62061` contains the UAParser.js library, identified by `J.VERSION=\"1.0.40\"` and its distinctive object structure for detecting browser, CPU, device, OS, and engine, along with methods like `getResult`, `getBrowser`, etc."
        },
        {
          "name": "copy-to-clipboard",
          "motivation": "Module `49211` (imported in `6337`) implements clipboard copying functionality. It uses `document.execCommand('copy')` and includes fallbacks typically found in such libraries, like handling `window.clipboardData` for older IE versions."
        },
        {
          "name": "react-hot-toast",
          "motivation": "Module `35398` (where an alias `ee` corresponds to `toast`) defines methods like `ee.error`, `ee.success`, `ee.loading`, and `ee.custom`. It also contains logic for toast management, including animations defined with CSS keyframes and specific class names, characteristic of `react-hot-toast`."
        },
        {
          "name": "@uniswap/sdk-core / @uniswap/v2-sdk / @uniswap/v3-sdk (or related SDKs)",
          "motivation": "Modules `76440` and `79016` define core Uniswap SDK entities: `Token` (with properties like `chainId`, `address`, `decimals`, `isNative`, `wrapped`), `CurrencyAmount`, `Fraction`, `Percent`, `Price`. Chain IDs and Uniswap-specific contract addresses (e.g., `V3_CORE_FACTORY_ADDRESS`, `NONFUNGIBLE_POSITION_MANAGER_ADDRESSES`, `UNIVERSAL_ROUTER_ADDRESS` from `79016`) are present. Logic for `computePairAddress` (aliased as `eG`) from UniswapV2 and `Pair` class logic (aliased as `eH`) are also strong indicators."
        },
        {
          "name": "EventEmitter3 (or similar event emitter)",
          "motivation": "Module `77625` implements a standard event emitter pattern with methods like `eventNames`, `listeners`, `listenerCount`, `emit`, `on`, `once`, and `removeListener`."
        },
        {
          "name": "js-sha3",
          "motivation": "Module `23883` is an explicit implementation of SHA-3 (Keccak), as indicated by its internal constants, padding schemes, and hashing functions (`Keccak`, `SHA3`, `SHAKE`)."
        },
        {
          "name": "dijkstrajs",
          "motivation": "Module `46946` implements Dijkstra's algorithm, evident from functions like `single_source_shortest_paths`, `extract_shortest_path_from_predecessor_list`, `find_path`, and a `PriorityQueue` helper class."
        },
        {
          "name": "@rainbow-me/rainbowkit",
          "motivation": "The codebase includes RainbowKit's theming (module `70451` defining `lightTheme`, `darkTheme` structures, and `19667` for styling utilities). Module `29559` contains a large JSON object with translation strings for UI elements like `connect_wallet`, `intro.title`, etc., which match RainbowKit's localization keys. Wallet connector setup involving `rainbowWallet`, `metaMaskWallet`, `coinbaseWallet`, etc., is also present."
        },
        {
          "name": "Wagmi",
          "motivation": "The code extensively uses Wagmi hooks (e.g., `useAccount`, `useConnect`, `useBalance`, `useBlockNumber`, `useWalletClient`, `useSignMessage`, `useSwitchChain`, `useWriteContract`), actions (e.g., `connect`, `disconnect`, `fetchBalance`, `multicall`, `readContract`, `sendTransaction`), and configuration utilities (`createConfig`, `http`). The presence of `WagmiProviderNotFoundError` (in `10231`) and specific Wagmi internal structures confirm its usage. The overall architecture points to Wagmi v2.x."
        },
        {
          "name": "Next.js",
          "motivation": "The code starts with `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)`, a common pattern for Next.js webpack bundles. Module `27648` imports from `next/link` and module `72972` implements the Next.js `Link` component. Module `19259` defines constants like `APP_DIR_ALIAS`, `PAGES_DIR_ALIAS`, `SERVER_RUNTIME`, typical of Next.js internals."
        }
      ]
    },
    {
      "file": "_next/static/chunks/2673.31ccbd3be2ddbc21.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code snippet uses `self.webpackChunk_N_E.push()`, a characteristic function of Webpack's runtime environment used for loading and registering code chunks (modules). Inside the module factory function, calls like `b.r(z)` (typically `__webpack_require__.r` for marking a module as an ES Module) and `b.d(z, {default:function(){return G}})` (typically `__webpack_require__.d` for defining exports) are Webpack-specific helper functions. These patterns confirm that the code is a module designed to operate within a Webpack-bundled application."
        }
      ]
    },
    {
      "file": "_next/static/chunks/2826.64f7b21bd97547ca.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code uses the `self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)` pattern, which is characteristic of JavaScript bundled by Webpack. This indicates that Webpack is used as the module bundler for this code."
        },
        {
          "name": "Next.js (implied)",
          "motivation": "The `_N_E` in `webpackChunk_N_E` is a common convention for chunks generated by Next.js, which utilizes Webpack internally. This suggests the code is part of a Next.js application."
        }
      ]
    },
    {
      "file": "_next/static/chunks/3055.0ce6dbe45a3c0dd0.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code uses the `self.webpackChunk_N_E.push()` pattern, which is a clear indicator of Webpack's module loading system. Additionally, within the module definition (`function(n, t, e)`), it utilizes Webpack's helper functions `e.r(t)` (to mark the module's exports as an ES module) and `e.d(t, { ... })` (to define getters for the exports). This structure is characteristic of code bundled by Webpack."
        }
      ]
    },
    {
      "file": "_next/static/chunks/3140.8f2e5faa38d26d48.js",
      "occurences": [
        {
          "name": "Next.js",
          "motivation": "The global variable `self.webpackChunk_N_E` is a naming convention commonly used by Next.js for its Webpack chunk loading mechanism (`webpackChunk` + `_N_E` for Next.js Export/Engine). This indicates the code snippet is part of a Next.js application bundle."
        },
        {
          "name": "Webpack",
          "motivation": "The code uses `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3140],{...}])`. This `push` method onto a global array (named `webpackChunk_N_E` here, often `webpackJsonp` or `webpackChunk<appName>` in other Webpack configurations) is Webpack's core mechanism for loading and registering code chunks asynchronously. \n\nFurthermore, the module definition `63140:function(a,l,c){c.r(l),c.d(l,{default:function(){return i}});...}` uses minified parameters typical of Webpack's module factory functions. Specifically:\n- `c.r(l)` likely corresponds to `__webpack_require__.r(exports)` which marks the module's `exports` object as an ES Module.\n- `c.d(l, {default: ...})` likely corresponds to `__webpack_require__.d(exports, {default: ...})` which defines properties on the `exports` object.\nThese are direct interactions with Webpack's runtime API for module management."
        }
      ]
    },
    {
      "file": "_next/static/chunks/3170.6af58d3105e21bd7.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code uses the `self.webpackChunk_N_E.push(...)` structure. This is a characteristic pattern of Webpack's runtime environment for loading and managing JavaScript modules (chunks). The functions `s.r` and `s.d` are aliases for Webpack's internal helper functions (`__webpack_require__.r` and `__webpack_require__.d`) used in module definitions."
        }
      ]
    },
    {
      "file": "_next/static/chunks/3432.14948bf02329e26d.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code uses `self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)`, which is a characteristic pattern of JavaScript code bundled by Webpack. This is Webpack's runtime mechanism for loading and defining modules."
        },
        {
          "name": "Next.js",
          "motivation": "The `webpackChunk_N_E` naming convention (specifically `_N_E`) is commonly used by Next.js for its Webpack chunks. This suggests the code is part of a Next.js application."
        }
      ]
    },
    {
      "file": "_next/static/chunks/3463.3f52daadc4a749f0.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code structure `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3463],{...}]);` is characteristic of Webpack's dynamic chunk loading mechanism. Inside the module function, `s.r(t)` and `s.d(t,...)` are minified representations of Webpack's runtime helper functions (`__webpack_require__.r` and `__webpack_require__.d`) used for defining module exports. This indicates the code is bundled and managed by Webpack, and uses its runtime."
        },
        {
          "name": "Next.js (framework inferred)",
          "motivation": "The specific variable name `self.webpackChunk_N_E` (where `_N_E` is a common identifier for Next.js internal webpack chunks) found in the code, along with the provided file path `_next/static/chunks/3463.3f52daadc4a749f0.js` which is standard for Next.js applications, strongly suggests this code is part of a Next.js application."
        }
      ]
    },
    {
      "file": "_next/static/chunks/3482.96d0f63c3c847875.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code is structured as a Webpack chunk, utilizing `self.webpackChunk_N_E.push()` for loading. Within the module definition (`function(n, t, i)`), it calls Webpack's internal helper functions (passed as argument `i`), such as `i.r` (to mark the module as an ES module) and `i.d` (to define properties on exports). This demonstrates direct usage of Webpack's module system and runtime."
        },
        {
          "name": "Next.js",
          "motivation": "The file path provided (`_next/static/chunks/3482.96d0f63c3c847875.js`) is a strong conventional indicator of a Next.js application's build output. The specific name of the Webpack chunk array, `webpackChunk_N_E`, is also commonly associated with Next.js projects. This suggests the analyzed code is a component of a larger Next.js application, although this specific chunk primarily exports a data string."
        }
      ]
    },
    {
      "file": "_next/static/chunks/3586.d9f54abd687cbfd9.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code snippet uses the `self.webpackChunk_N_E.push()` structure, which is characteristic of Webpack's runtime for loading asynchronous chunks. Additionally, within the module definition `function(l,a,c){...}`, `c.r(a)` and `c.d(a, ...)` are common shorthands for Webpack's internal helper functions (`__webpack_require__.r` for marking a module as a namespace object, and `__webpack_require__.d` for defining properties on an export). This indicates the code is managed and bundled by Webpack."
        }
      ]
    },
    {
      "file": "_next/static/chunks/3917.824dc6ce2186bab7.js",
      "occurences": [
        {
          "name": "Next.js",
          "motivation": "The code snippet uses `self.webpackChunk_N_E.push(...)`, a characteristic pattern for how Next.js loads its JavaScript code chunks. Next.js internally uses Webpack for bundling, and `_N_E` is a common suffix related to Next.js. The provided filename `_next/static/chunks/3917.824dc6ce2186bab7.js` also strongly indicates a Next.js application structure."
        }
      ]
    },
    {
      "file": "_next/static/chunks/3944.356ca62a6dee268a.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code uses the `self.webpackChunk_N_E.push()` structure, which is characteristic of Webpack's module bundling and lazy loading mechanism used for splitting code into chunks."
        },
        {
          "name": "Next.js",
          "motivation": "The `_N_E` suffix in `self.webpackChunk_N_E` is a common convention used by Next.js for its Webpack configuration and runtime."
        }
      ]
    },
    {
      "file": "_next/static/chunks/4029.55bdab72711aa4ed.js",
      "occurences": [
        {
          "name": "Next.js",
          "motivation": "The code uses the `self.webpackChunk_N_E.push` syntax, which is the mechanism Next.js utilizes for loading its JavaScript chunks. The file path `_next/static/chunks/...` is also characteristic of a Next.js project structure."
        },
        {
          "name": "React",
          "motivation": "This JavaScript file is identified as part of a Next.js application (due to its webpack chunk structure `self.webpackChunk_N_E.push` and file path `_next/...`). Next.js is a prominent framework built on React, making React a core library for the overall application context, even if this specific file primarily exports data."
        }
      ]
    },
    {
      "file": "_next/static/chunks/4040.6dcea46932bd23f4.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code uses the structure `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)`, which is characteristic of how Webpack manages and loads JavaScript chunks. The `_N_E` suffix might also indicate usage within a Next.js application, which uses Webpack internally."
        }
      ]
    },
    {
      "file": "_next/static/chunks/4071.3bb73eee7ad6e656.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code structure `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)` is the standard way Webpack lazy-loads chunks of JavaScript. This indicates that Webpack is the module bundler used in the project."
        }
      ]
    },
    {
      "file": "_next/static/chunks/4174.6f2c19b5d164cf1a.js",
      "occurences": [
        {
          "name": "Next.js",
          "motivation": "The file path `/_next/static/chunks/...` is the standard directory structure for static assets in a Next.js application. The `_N_E` in `webpackChunk_N_E` (part of `self.webpackChunk_N_E`) is also a common indicator of Next.js's webpack configuration. This suggests the application is built using the Next.js framework."
        },
        {
          "name": "React",
          "motivation": "Next.js is a framework built on top of React. Therefore, React is fundamentally used for rendering UI components in an application structured this way. While this specific code chunk primarily exports localization data, it's part of a larger React-based application."
        },
        {
          "name": "Wallet Connection UI Library (e.g., RainbowKit, Web3Modal)",
          "motivation": "The core content of this JavaScript module is a large JSON string. This string provides detailed localization text (in Thai) for a comprehensive wallet connection interface. It includes labels for connecting wallets, messages for various states (e.g., 'wrong_network', 'waiting for signature'), and instructional steps for numerous specific wallet providers (like MetaMask, Coinbase Wallet, Trust Wallet, WalletConnect). This data is clearly intended for consumption by a specialized JavaScript library that manages and displays user interfaces for wallet interactions in a decentralized application."
        },
        {
          "name": "Webpack",
          "motivation": "The code structure `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)` is the characteristic way Webpack bundles and loads JavaScript modules. This indicates that Webpack is used as the module bundler for the application."
        }
      ]
    },
    {
      "file": "_next/static/chunks/4229.cc87f6b4b3329828.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code is wrapped in a webpack module structure: `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)`. This is characteristic of code bundled by Webpack, which manages module loading and dependencies."
        },
        {
          "name": "Next.js",
          "motivation": "The naming convention `webpackChunk_N_E` is a specific identifier used by Next.js for its webpack chunks. Furthermore, the problem statement indicates the file path is `_next/static/chunks/4229.cc87f6b4b3329828.js`, which is a standard directory and file naming pattern for Next.js build artifacts."
        }
      ]
    },
    {
      "file": "_next/static/chunks/428.cfd7442f41a28940.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code includes `self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)`, which is the standard way Webpack loads chunks of JavaScript code. The `_N_E` suffix often indicates a Next.js project, which uses Webpack for bundling."
        }
      ]
    },
    {
      "file": "_next/static/chunks/4501.2035e7a052682607.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code snippet utilizes the `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)` pattern, which is a characteristic mechanism for Webpack to load and manage JavaScript modules dynamically in a bundled application. The arguments `t` (module), `e` (exports), and `i` (require), along with helper functions like `i.r(e)` (marking exports as ES module) and `i.d(e, ...)` (defining exports), are standard conventions in Webpack-bundled code."
        }
      ]
    },
    {
      "file": "_next/static/chunks/4527.8693ce87a8879691.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The JavaScript code is wrapped in a structure `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)`. This is the standard mechanism used by Webpack to dynamically load and define JavaScript modules (chunks). The functions `e.r(t)` and `e.d(t, ...)` within the module factory are also Webpack-specific helpers for managing module exports."
        },
        {
          "name": "Next.js",
          "motivation": "The file path `_next/static/chunks/4527.8693ce87a8879691.js` and the naming convention `self.webpackChunk_N_E` (specifically the `_N_E` suffix) are characteristic of applications built with the Next.js framework. Next.js uses Webpack for bundling its code, and these patterns are common in Next.js build outputs."
        }
      ]
    },
    {
      "file": "_next/static/chunks/4868.ea9e8f87ae1d612a.js",
      "occurences": [
        {
          "name": "Webpack Runtime",
          "motivation": "The code uses the `self.webpackChunk_N_E.push([...])` pattern. This is the mechanism by which Webpack chunks (modules) are defined and registered with the Webpack runtime environment. The module definition function itself `function(s,e,l){...}` uses `l.r(e)` and `l.d(e,...)` which are typically aliases for Webpack's internal helper functions like `__webpack_require__.r` (mark as ES module) and `__webpack_require__.d` (define property getters for harmony exports), further indicating reliance on the Webpack runtime environment."
        }
      ]
    },
    {
      "file": "_next/static/chunks/4886.408456926777edb3.js",
      "occurences": [
        {
          "name": "Next.js",
          "motivation": "The code snippet uses the `self.webpackChunk_N_E.push(...)` structure. `webpackChunk_N_E` is the default `jsonpFunction` name used by Webpack in Next.js applications for loading chunks. This indicates the code is part of a Next.js framework build."
        }
      ]
    },
    {
      "file": "_next/static/chunks/4e88bc13-7e27d50c88f8729d.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code extensively uses React's API, such as `r.createElement`, `r.useState`, `r.useEffect`, `r.useContext` (where `r` is the imported React library, aliased from `n(2265)`). JSX-like structures are built using these functions, indicating React as the core UI library."
        },
        {
          "name": "RainbowKit",
          "motivation": "The codebase includes UI components, theming, and logic characteristic of RainbowKit. This is evidenced by functions and components like `ao` (ConnectButton), modal dialogs for wallet connection (e.g., `n6`, `n8`), account details (`ns`), chain switching (`nf`), and transaction display (`nr`). Numerous CSS classes (e.g., `ju367v...` associated with RainbowKit's theming system `q`), local storage keys (e.g., `rk-ens-name-`, `rk-recent`, `rk-transactions`), and test IDs are prefixed with `rk-`. Specific RainbowKit concepts like themes (`tV`, `lightMode`, `darkMode`), app info (`tl`), and modal sizing (`tu`) are present."
        },
        {
          "name": "Wagmi",
          "motivation": "The code utilizes various hooks that are standard in Wagmi for Ethereum wallet interaction and blockchain data fetching. Examples include calls like `(0,s.m)()` (likely `useAccount` from `n(64707)`), `(0,f.Z)()` (likely `useChains` from `n(12364)`), `(0,S.$)()` (likely `useConnect` from `n(60542)`), `(0,L.Q)()` (likely `useSignMessage` from `n(19496)`), `(0,g.K)()` (likely `useBalance` from `n(52618)`), `(0,C.c)()` (likely `useEnsAddress` from `n(33507)`), and `(0,k.q)()` (likely `useDisconnect` from `n(99778)`). RainbowKit is built on top of Wagmi."
        },
        {
          "name": "WalletConnect (Client)",
          "motivation": "The code explicitly references 'walletConnect' as a connector ID (e.g., `\"walletConnect\"===e.id`), handles WalletConnect specific UI/modal flows (e.g., `e.walletConnectModalConnector`, `setIsWalletConnectModalOpen` from `at()`), and uses a local storage key `WALLETCONNECT_DEEPLINK_CHOICE` (`tP`). This indicates usage of the WalletConnect protocol/library for connecting to mobile wallets."
        },
        {
          "name": "TanStack Query (React Query)",
          "motivation": "The code contains patterns typical of TanStack Query's `useQuery` hook, specifically the call `(0,j.a)({ queryKey: ..., queryFn: ..., enabled: ..., staleTime: ..., retry: ... })`, where `j` is imported from `n(16593)`. Wagmi internally uses TanStack Query for managing asynchronous state, caching, and data fetching related to blockchain interactions."
        },
        {
          "name": "Vanilla Extract or similar CSS-in-JS library",
          "motivation": "The code defines styles using functions like `(0,i.d)` (from `n(5091)`) and `(0,c.$)` (from `n(37135)`), which process complex configuration objects for styles, including conditions (e.g., `smallScreen`, `largeScreen`, `hover`, `active`) and variants. This results in the generation of atomic CSS classes with hashed or structured names (e.g., `ju367v...`, `_12cbo8i6`). This pattern is characteristic of CSS-in-JS libraries like Vanilla Extract that compile styles."
        }
      ]
    },
    {
      "file": "_next/static/chunks/5070.fa1e58d8b8abae5b.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code utilizes `self.webpackChunk_N_E.push(...)`, a signature pattern of Webpack's runtime for asynchronous chunk loading. Additionally, helper functions like `t.r` and `t.d` (representing `__webpack_require__.r` and `__webpack_require__.d` respectively, used for defining module properties like `__esModule` and getters for exports) are present, which are Webpack internal mechanisms for its module system."
        },
        {
          "name": "Next.js",
          "motivation": "The specific naming pattern `webpackChunk_N_E` (where `_N_E` typically stands for 'Next Export') in the Webpack runtime is a convention used by Next.js. Furthermore, the provided file path `_next/static/chunks/5070.fa1e58d8b8abae5b.js` follows the standard directory structure for static assets and chunks in a Next.js application. Next.js is a popular React framework that uses Webpack for bundling."
        }
      ]
    },
    {
      "file": "_next/static/chunks/5075.bf20870c8ddc62e4.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code is structured as a Webpack chunk. This is evident from the `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([...])` pattern, which is Webpack's mechanism for asynchronously loading code chunks and registering modules. The `_N_E` suffix in `webpackChunk_N_E` typically indicates a Next.js environment, which uses Webpack. Furthermore, the module factory function `function(o,t,s){...}` receives an argument `s` (commonly `__webpack_require__` or a related utilities object) and uses its methods like `s.r` (to mark the module as an ES module) and `s.d` (to define exports). These are direct interactions with the Webpack runtime environment."
        }
      ]
    },
    {
      "file": "_next/static/chunks/5117.a9f7f8f39fc4e6aa.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code uses the `self.webpackChunk_N_E.push` method, which is characteristic of Webpack's module loading and bundling system. The file structure itself is a Webpack chunk."
        }
      ]
    },
    {
      "file": "_next/static/chunks/5134.02dba0b0c380eff6.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code utilizes Webpack's module bundling system. This is evident from the `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)` structure, which is how Webpack chunks register themselves with the Webpack runtime. Additionally, within the module factory function, calls like `r.r(t)` and `r.d(t, ...)` are Webpack helper functions (typically bound to `__webpack_require__.r` and `__webpack_require__.d`) used for defining module properties like `__esModule` and exports."
        }
      ]
    },
    {
      "file": "_next/static/chunks/5265.51de1916a713367a.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code structure `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[5265],{...}])` is characteristic of how Webpack bundles and loads JavaScript modules (chunks). This indicates that Webpack is used as the module bundler for the project."
        }
      ]
    },
    {
      "file": "_next/static/chunks/5539.c35141e1a9ff9159.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code uses the `self.webpackChunk_N_E.push(...)` structure. This is the standard way Webpack uses to dynamically load and define JavaScript modules (chunks) in the browser. The `webpackChunk_N_E` variable is a global array that Webpack uses to manage these chunks."
        },
        {
          "name": "Next.js",
          "motivation": "The naming convention `webpackChunk_N_E` (where `_N_E` often refers to Next.js) and the file path `_next/static/chunks/...` (as indicated by the `File:` comment) are strong indicators that this code is part of a Next.js application. Next.js uses Webpack as its underlying bundler."
        }
      ]
    },
    {
      "file": "_next/static/chunks/5581.90e528a1c0bfdffc.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code is structured as a Webpack chunk, using `self.webpackChunk_N_E.push(...)`. Inside the module factory function, it calls Webpack's helper functions (passed as `e`) like `e.r` (equivalent to `__webpack_require__.r`) and `e.d` (equivalent to `__webpack_require__.d`) to define its exports. This directly shows Webpack's runtime module system being used."
        },
        {
          "name": "Next.js",
          "motivation": "The specific naming convention `webpackChunk_N_E` (where `_N_E` typically indicates Next.js) is characteristic of applications built with the Next.js framework. Next.js uses Webpack internally for bundling, and this naming pattern is a common artifact of its build process."
        }
      ]
    },
    {
      "file": "_next/static/chunks/5685.6d23c65ff108ff31.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code snippet uses `self.webpackChunk_N_E.push(...)`, which is the standard mechanism for Webpack to load and register asynchronous chunks of code. The `_N_E` suffix is commonly associated with Next.js projects, which use Webpack as their bundler."
        }
      ]
    },
    {
      "file": "_next/static/chunks/5800.3d0f4f05c39b505d.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code snippet uses `self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)`, which is the standard runtime mechanism for Webpack to asynchronously load and register JavaScript modules (chunks). This indicates that the project is built and managed using Webpack."
        },
        {
          "name": "Next.js",
          "motivation": "The file path `_next/static/chunks/5800.3d0f4f05c39b505d.js` is a characteristic build output structure for Next.js applications. Additionally, the `_N_E` suffix in `self.webpackChunk_N_E` is a common convention in Next.js projects (often standing for Next Export or similar), suggesting the code is part of a Next.js framework."
        }
      ]
    },
    {
      "file": "_next/static/chunks/588.238b76aa288ad206.js",
      "occurences": [
        {
          "name": "Next.js",
          "motivation": "The file path `_next/static/chunks/588.238b76aa288ad206.js` is a strong indicator of a Next.js application. The `webpackChunk_N_E` also suggests Next.js, as `_N_E` often relates to Next.js internals."
        },
        {
          "name": "Webpack",
          "motivation": "The code uses the `self.webpackChunk_N_E.push()` method. This is the standard JavaScript runtime mechanism used by Webpack to load and manage modules (chunks) in a bundled application."
        }
      ]
    },
    {
      "file": "_next/static/chunks/6123.649d3f8f96ed0031.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code employs the `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)` pattern. This is the standard mechanism Webpack uses for asynchronously loading and registering code chunks (modules) as part of its runtime. Additionally, within the module definition `function(n,t,e){...}`, `e.r(t)` (equivalent to `__webpack_require__.r(exports)`) and `e.d(t, ...)` (equivalent to `__webpack_require__.d(exports, ...)`) are direct calls to Webpack's module system helper functions."
        },
        {
          "name": "Next.js",
          "motivation": "The global webpack chunk array is named `self.webpackChunk_N_E`. The `_N_E` suffix is a common convention adopted by Next.js for its Webpack build output, strongly indicating that this code snippet is part of a Next.js application. The file path `_next/static/chunks/...` provided in the context also aligns with Next.js's build structure."
        },
        {
          "name": "React",
          "motivation": "Next.js, inferred from the `webpackChunk_N_E` naming convention in the code, is a popular framework built upon React. Consequently, React is the underlying JavaScript library used for building the user interface of the application to which this code chunk belongs."
        }
      ]
    },
    {
      "file": "_next/static/chunks/6275.f83fb72d5f956738.js",
      "occurences": [
        {
          "name": "Lit (LitElement/LitHTML)",
          "motivation": "The code includes references to `window.litElementVersions`, `window.reactiveElementVersions`, and `window.litHtmlVersions`. It defines custom elements (e.g., `wcm-modal`, `wcm-button`) that extend `HTMLElement` (specifically `tc extends x` where `x extends HTMLElement`), use a templating syntax `H\\`...\\`` (characteristic of LitHTML's `html` tag function), and lifecycle methods like `render`, `firstUpdated`, `connectedCallback`, `requestUpdate`, and `createRenderRoot`. These are all core features of the Lit library for building web components."
        },
        {
          "name": "qrcode.js",
          "motivation": "The code contains a significant section dedicated to QR code generation. Functions like `ex.create` (referenced by `rd.generate` calling `ex.create(t,{errorCorrectionLevel:\"Q\"}).modules.data`) are characteristic of the `qrcode` library. Additionally, internal structures and terminologies like `BitMatrix`, `Polynomial`, `Encoder`, `MaskPattern`, `ErrorCorrectionLevel` are present, which are standard components of QR code generation libraries like `qrcode.js`."
        },
        {
          "name": "Motion One",
          "motivation": "The code includes `window.__MOTION_DEV_TOOLS_RECORD`, which is a marker for the Motion One animation library. It also features functions and patterns typical of animation libraries, such as `eb(this.routerEl,{opacity:[1,0],scale:[1,1.02]},{duration:.15,delay:.1})` for programmatic animations, references to easing functions (`ease`, `cubic-bezier`), and animation properties like `duration`, `delay`, `playState`. CSS custom properties like `--motion-${t}` are also indicative of Motion One."
        }
      ]
    },
    {
      "file": "_next/static/chunks/6520.8f32c390829273bd.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code structure `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)` is a characteristic pattern of JavaScript code bundled by Webpack. This specific format, including `_N_E`, is commonly used by Next.js, which utilizes Webpack for its bundling and code-splitting functionalities. The functions `c.r` and `c.d` used within the module factory are also typical Webpack runtime helper functions (`__webpack_require__.r` and `__webpack_require__.d`)."
        }
      ]
    },
    {
      "file": "_next/static/chunks/6578.a3420136ba433a25.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code uses the `self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)` pattern. This is a common boilerplate for modules bundled by Webpack. The `_N_E` suffix is often associated with Next.js projects, which use Webpack for bundling."
        }
      ]
    },
    {
      "file": "_next/static/chunks/6674.9073e5ff13ca164b.js",
      "occurences": [
        {
          "name": "Next.js",
          "motivation": "The file path `_next/static/chunks/6674.9073e5ff13ca164b.js` (provided as context for the file) is a standard convention for JavaScript chunks generated by Next.js applications. The `self.webpackChunk_N_E` global variable used in the chunk loading mechanism is also characteristic of Next.js builds (where `_N_E` often refers to Next Export or Next Environment)."
        },
        {
          "name": "React",
          "motivation": "Next.js is a popular React framework. The JavaScript chunk, while primarily containing data (a JSON string), is part of a larger Next.js application, which inherently uses React for building user interfaces. The nature of the data (UI text strings) further implies it's for a React-based UI."
        },
        {
          "name": "Webpack",
          "motivation": "The code structure `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)` is the runtime mechanism used by Webpack to asynchronously load and register JavaScript modules (chunks). This indicates that Webpack was used to bundle the application."
        },
        {
          "name": "Wallet Connection UI Library (e.g., RainbowKit, Web3Modal)",
          "motivation": "The core content of this JavaScript file is a large JSON string. This JSON object defines internationalization texts, seemingly in Malay, for a comprehensive cryptocurrency wallet connection interface. \nKey evidence includes:\n- Top-level keys like `\"connect_wallet\"`, `\"sign_in\"`, `\"profile\"`.\n- A detailed section `\"wallet_connectors\"` which lists numerous specific wallets such as `\"argent\"`, `\"metamask\"`, `\"coinbase\"`, `\"walletconnect\"`, `\"trust\"`, `\"ledger\"`, etc.\n- For many wallets, there are sub-sections like `\"qr_code\"` and `\"extension\"` (or `\"desktop\"`) providing step-by-step user instructions (e.g., `\"step1\": {\"title\": ..., \"description\": ...}`).\n- UI text for various connection states and actions like `\"connect.status.opening\"`, `\"chains.wrong_network\"`.\n\nThis structure and the specific content are highly characteristic of libraries designed to simplify the integration of multiple crypto wallets into a decentralized application (dApp). Libraries such as RainbowKit or Web3Modal provide pre-built UI components (modals, buttons, instructional guides) for which these detailed text strings are used to support internationalization and user guidance."
        }
      ]
    },
    {
      "file": "_next/static/chunks/6838.a573c1747076b0b5.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code is structured as a Webpack chunk, evidenced by the `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)` wrapper. This is the mechanism Webpack uses for loading and executing code modules, particularly in a code-splitting scenario. Additionally, the module definition uses `n.r(a)` and `n.d(a, ...)` which are common shorthands for Webpack's internal helper functions (`__webpack_require__.r` and `__webpack_require__.d`) used to define module exports."
        },
        {
          "name": "Next.js",
          "motivation": "The use of `webpackChunk_N_E` as the global for Webpack's chunk loading (specifically, the `_N_E` suffix) is a characteristic pattern of Next.js applications. Furthermore, the file path provided in the problem description, `_next/static/chunks/....js`, is the standard location for Next.js static assets and JavaScript chunks."
        }
      ]
    },
    {
      "file": "_next/static/chunks/707.69c64a32cb42ecee.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code snippet `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[707],{...}]);` is standard boilerplate used by Webpack. `self.webpackChunk_N_E` is a global array (or an object with a `push` method that mimics an array's behavior) that Webpack's runtime uses to asynchronously load and link JavaScript modules (chunks). The presence of this pattern directly indicates that the code is part of an application bundled using Webpack, and this chunk is actively utilizing the Webpack runtime mechanism to register itself."
        }
      ]
    },
    {
      "file": "_next/static/chunks/7172.04f16ef6b5c24ecc.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code is structured as a Webpack chunk, indicated by the `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push` pattern. This is a module bundler, not a functional library in the traditional sense, but it dictates the code's structure."
        },
        {
          "name": "@walletconnect/universal-provider",
          "motivation": "The code includes a class `s4` which corresponds to `UniversalProvider`. This class initializes and uses `SignClient` (class `n1`) and manages sessions, namespaces, and RPC provider instances for different chains (e.g., `EthereumProvider` - class `op`). Methods like `connect`, `request`, `pair`, and `authenticate` are present."
        },
        {
          "name": "@walletconnect/sign-client",
          "motivation": "Class `n1` is identified as `SignClient`. It's initialized within `UniversalProvider` (class `s4`) or can be standalone. It uses `Core` (class `nI`) and an `Engine` (class `nW`) to handle session proposals, settlements, requests, pings, and authentications according to the WalletConnect v2 Sign API."
        },
        {
          "name": "@walletconnect/core",
          "motivation": "Class `nI` is identified as the `Core` module of WalletConnect. It initializes and manages sub-modules like `Crypto` (class `iz`), `Relayer` (class `i6`), `Pairing` (class `ni`), `History` (class `nn`), `Expirer` (class `ns`), `Storage` (class `ee`), and `Heartbeat` (class `C`)."
        },
        {
          "name": "@noble/ciphers",
          "motivation": "Includes implementations for ChaCha20Poly1305 (in module `50972` with class `OK`) and Poly1305 (in module `50081` with class `Poly1305`), which are characteristic of the `@noble/ciphers` library."
        },
        {
          "name": "@noble/curves",
          "motivation": "Contains implementations for Ed25519 (module `48280` with functions like `_w` for key generation and `Xx` for signing) and X25519 (module `11153` with functions like `Au` for key pair generation and `gi` for shared key derivation). These are core functionalities of `@noble/curves`."
        },
        {
          "name": "@noble/hashes",
          "motivation": "Includes implementations for SHA256 (module `43094` with class `mE`), SHA512 (module `16214` with class `SHA512`), and HMAC (module `76568` with class `HMAC`). These align with the features provided by `@noble/hashes`."
        },
        {
          "name": "eventemitter3",
          "motivation": "The code frequently uses `new m.EventEmitter` (where `m` is imported from `r(55445)` via `v=r.n(m)`). This pattern is typical of `eventemitter3`, used for event handling in various WalletConnect components."
        },
        {
          "name": "pino",
          "motivation": "Logger initialization (`er()(ev({level:e.logger||...}))` where `er` is from `r(97435)`) and the creation of child loggers (`e_(t,this.name)`) are characteristic of the pino logging library. The code also uses structured logging with levels."
        },
        {
          "name": "idb-keyval (or similar IndexedDB wrapper)",
          "motivation": "The code initializes an IndexedDB-based key-value store for WalletConnect (`K=(e={})=>{... name:\"idb-keyval\" ...}` used in `W` class's `indexedDb` an instance of which is used by `new W()` in `ee` class). This setup is for `WALLET_CONNECT_V2_INDEXED_DB`."
        },
        {
          "name": "tslib",
          "motivation": "Module `r(45161)` (imported as `i` in `65970` via `let i=r(45161)`) exports helper functions like `__awaiter`, `__extends`, `__assign`, which are standard TypeScript runtime helpers provided by `tslib`."
        },
        {
          "name": "lodash",
          "motivation": "A large, minified section of code (assigned to `sf.exports` from `r(55445)`) includes many utility functions identifiable as lodash (e.g., `rp.isNil`, `rp.cloneDeep`, `rp.merge`). The export pattern `(e6.exports=tW)._=tW` is also common for bundled lodash."
        },
        {
          "name": "cross-fetch (or ponyfill)",
          "motivation": "The code uses `fetch` via an imported module `n2()` from `r(5108)`. This module (`5108`) is a fetch ponyfill, providing `fetch` functionality."
        },
        {
          "name": "safe-json-utils",
          "motivation": "Module `r(80577)` provides `s` (safeJsonParse) and `o` (safeJsonStringify) functions that handle BigInt serialization/deserialization (e.g., `t.toString()+\"n\"`), a key feature of libraries designed for safer JSON operations."
        },
        {
          "name": "@ipld/cid & multiformats",
          "motivation": "The code includes classes and functions for CID (Content Identifier) creation and parsing (e.g., `tz` class in `r(77674)` and `iq` class using it, `tz.create`, `tz.parse`), along with various multibase encoders/decoders (e.g., `e2` for base32, `tn` for base58btc in `tQ`, and `ec` for base64url in `r(77674)`) and multihash logic. These are core components of the `@ipld/cid` and `multiformats` libraries."
        },
        {
          "name": "unstorage",
          "motivation": "The code defines a storage interface in class `W` (`r(65970)` -> `W{constructor(){this.indexedDb=function(e={}){...}}}`) that allows mounting different storage drivers (like memory (`q()`) and idb-keyval (`K()`)), and provides a unified API. This pattern is characteristic of `unstorage`."
        },
        {
          "name": "destr",
          "motivation": "Function `O(e,t={}){...return JSON.parse(e,P)}` in `r(65970)` is used for JSON parsing with additional safety checks (like for `__proto__` and `constructor` pollution, and handling of `true`, `false`, `null`, `NaN`, `Infinity`), which aligns with the `destr` library's features."
        }
      ]
    },
    {
      "file": "_next/static/chunks/7434.a89ae5ff2b45515b.js",
      "occurences": [
        {
          "name": "Next.js (webpack)",
          "motivation": "The code uses `self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)`, which is a common pattern for webpack-bundled code, often seen in Next.js applications. This specific chunk defines a module."
        }
      ]
    },
    {
      "file": "_next/static/chunks/7850.5aa36703f66f58fa.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code uses the `self.webpackChunk_N_E = self.webpackChunk_N_E || []).push(...)` pattern. This is the standard way Webpack dynamically loads chunks of code in a web application. This specific snippet is a module (or part of one) being registered with the Webpack runtime."
        }
      ]
    },
    {
      "file": "_next/static/chunks/7913.d6f8213535a4475b.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code uses the `self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)` pattern, which is a clear indicator of Webpack's runtime for managing and loading JavaScript modules."
        }
      ]
    },
    {
      "file": "_next/static/chunks/7950.4392fb6e79ffe4e9.js",
      "occurences": [
        {
          "name": "Next.js (Webpack Runtime)",
          "motivation": "The code is structured as a Webpack chunk, identifiable by the `self.webpackChunk_N_E.push(...)` call. The `_N_E` suffix in `webpackChunk_N_E` is characteristic of Next.js applications. The chunk utilizes Webpack runtime helper functions (passed as `n`, with calls like `n.r(e)` and `n.d(e, ...)` which typically map to `__webpack_require__.r` and `__webpack_require__.d`) for module definition and export. This indicates the code is operating within the Next.js framework's customized Webpack bundling and runtime environment."
        }
      ]
    },
    {
      "file": "_next/static/chunks/8458.64aee33179a97009.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code utilizes the `self.webpackChunk_N_E.push()` method. This is a characteristic pattern of the Webpack runtime environment, used for asynchronously loading and integrating JavaScript modules (chunks) into an application. The `_N_E` suffix in `webpackChunk_N_E` often indicates a Next.js build, which uses Webpack."
        }
      ]
    },
    {
      "file": "_next/static/chunks/8510.968e942cd4913b48.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code uses `self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)`. This is the characteristic runtime code used by Webpack to manage and load JavaScript modules (chunks) asynchronously. The structure `[[8510],{58510:function(...){...}}]` is a clear indication of a Webpack bundle."
        }
      ]
    },
    {
      "file": "_next/static/chunks/8910.845c03d95c19c4f6.js",
      "occurences": [
        {
          "name": "Webpack (module bundler)",
          "motivation": "The code uses the `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)` pattern. This is the runtime mechanism used by Webpack to load and register code chunks dynamically. The `_N_E` suffix in `webpackChunk_N_E` often indicates a Next.js build, which utilizes Webpack."
        }
      ]
    },
    {
      "file": "_next/static/chunks/8969.2fab388a056c0c7d.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code utilizes the `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)` pattern. This is a distinctive signature of Webpack's runtime environment, specifically for loading and defining asynchronous code chunks. The `_N_E` suffix in `webpackChunk_N_E` typically indicates a Next.js project, which relies on Webpack for bundling. Furthermore, the presence of internal Webpack helper functions, such as `t.r(l)` (which marks a module as a namespace object) and `t.d(l, {default:function(){return i}})` (which defines getters for module exports), confirms the use of Webpack's module system."
        }
      ]
    },
    {
      "file": "_next/static/chunks/9284.7c78cfedd2e55485.js",
      "occurences": [
        {
          "name": "Preact",
          "motivation": "Module `79080` exports Preact's core API (`h`, `Component`, `Fragment`, `createElement`, `render`, `options`, etc.) and is used extensively for rendering UI components within the SDK (e.g., snackbars, dialogs via `eR.h(...)` where `eR` refers to module `79080`)."
        },
        {
          "name": "Coinbase Wallet SDK",
          "motivation": "The codebase defines `createCoinbaseWalletSDK` (in module `69284`), uses \"CBWSDK\" and \"walletlink\" as `localStorage` key prefixes, and contains classes and logic specific to the Coinbase Wallet SDK's functionality, such as `CoinbaseWalletSDK` (class `e8`), `SCWSignerController` (class `el`), and `WalletLinkRelay` (class `eV`). The variable `er` is explicitly set to `@coinbase/wallet-sdk` and `en` to its version `4.3.0`."
        },
        {
          "name": "clsx",
          "motivation": "Module `54365` provides a function identical to the `clsx` utility, used for conditionally joining CSS class names. This is confirmed by `n.d(t,{clsx:function(){return r}})` where `r` is the utility function."
        },
        {
          "name": "Cryptographic Hashing Utilities (Noble Hashes or similar)",
          "motivation": "Modules `32517` (Keccak, SHA3), `28772` (hash utilities), `10662` (SHA256 implementation `eI` extending `ey`), and `16177` (SHA constants) provide various cryptographic hash functions and related utilities. The class structure (e.g., `Keccak` class `w` extending `i.Hash`, `SHA256` class `eI` extending base class `ey`) and function signatures are characteristic of libraries like `@noble/hashes`."
        },
        {
          "name": "Buffer (Polyfill/Module)",
          "motivation": "Module `82957` is used to access the `Buffer` object (`var r=n(82957).Buffer;`). This `Buffer` is then used throughout the codebase for handling binary data, a common practice in Ethereum-related JavaScript libraries, often requiring a polyfill in browser environments."
        },
        {
          "name": "Ethereum ABI & EIP-712 Utilities",
          "motivation": "Module `31549` (`rawEncode`, `solidityPack`) and module `11057` (`TypedDataUtils` for EIP-712, `hashForSignTypedData_v3`, `hashForSignTypedData_v4`) are used for encoding and hashing data according to Ethereum ABI specifications and EIP-712 typed data signing. This functionality is crucial for interacting with smart contracts and signing messages."
        }
      ]
    },
    {
      "file": "_next/static/chunks/9525.1124e5273ac70c92.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code uses the structure `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)` which is characteristic of Webpack's module bundling and dynamic chunk loading system. The `t.r(c)` and `t.d(c, ...)` calls are also common Webpack helper functions for module definitions."
        }
      ]
    },
    {
      "file": "_next/static/chunks/9542.f23f0aba07bbe6e3.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code uses the `self.webpackChunk_N_E.push()` pattern. This is the standard way Webpack loads and registers JavaScript modules (chunks) in the browser. The functions `o.r(a)` and `o.d(a, ...)` are also typical Webpack runtime helpers for defining module exports."
        },
        {
          "name": "Next.js",
          "motivation": "The specific naming convention `webpackChunk_N_E` (where `_N_E` stands for Next Export or similar Next.js identifier) strongly suggests that Webpack is being used as part of a Next.js application build process. Next.js uses Webpack under the hood for bundling."
        }
      ]
    },
    {
      "file": "_next/static/chunks/9737.27b41f53c8ede002.js",
      "occurences": [
        {
          "name": "Next.js",
          "motivation": "The file path `_next/static/chunks/...` is a standard directory structure for Next.js applications. Additionally, the Webpack chunk naming convention `webpackChunk_N_E` (where `_N_E` often stands for Next.js Export) is commonly used in Next.js projects."
        },
        {
          "name": "React",
          "motivation": "Next.js is a popular framework built on top of React. The use of Next.js, as indicated by the file path and Webpack chunk naming, strongly implies that React is the underlying UI library for the application, even though no React-specific API calls are present in this particular snippet."
        },
        {
          "name": "Webpack",
          "motivation": "The provided JavaScript code is structured as a Webpack chunk. This is evident from the `self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)` pattern, and the internal module loading functions aliased as `n` (e.g., `n.r` for marking exports as ES modules, `n.d` for defining exports, and `n(...)` for requiring other modules). This indicates Webpack's runtime code is present and managing the module."
        }
      ]
    },
    {
      "file": "_next/static/chunks/app/_not-found/page-bd63460d84f03281.js",
      "occurences": [
        {
          "name": "Next.js",
          "motivation": "The code structure `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)` and `(window.__NEXT_P=window.__NEXT_P||[]).push([\"/_not-found/page\",...])` are characteristic of a Next.js application. The file path `_next/static/chunks/app/_not-found/page-bd63460d84f03281.js` also indicates a Next.js build artifact, specifically for a not-found page within the App Router."
        },
        {
          "name": "React",
          "motivation": "The code uses functions like `(0,i.jsxs)` and `(0,i.jsx)`, where `i` is derived from `n(57437)`. These are common patterns for compiled JSX (JavaScript XML) used by React. The imported module `n(57437)` is likely `react/jsx-runtime`, and `n(2265)` (also imported) is likely the core `react` library. The function `s` defines a component that returns JSX elements, which is the fundamental way of building UIs in React."
        }
      ]
    },
    {
      "file": "_next/static/chunks/app/blockexplorer/address/[address]/page-35acdb9e6751336c.js",
      "occurences": [
        {
          "name": "Webpack",
          "motivation": "The code utilizes `self.webpackChunk_N_E.push(...)` and `e.O(...)` which are characteristic patterns of Webpack's runtime. These are used for asynchronously loading and managing JavaScript modules (chunks) that Webpack has bundled."
        },
        {
          "name": "Next.js",
          "motivation": "The file path `_next/static/chunks/app/blockexplorer/address/[address]/page-35acdb9e6751336c.js` conforms to the standard directory structure and naming convention for compiled assets in a Next.js application, specifically for a page within the App Router. Next.js uses Webpack for bundling, which is consistent with the observed Webpack patterns. The pattern `Promise.resolve().then(t.bind(t, moduleId))` is used by Next.js for lazy-loading client components."
        },
        {
          "name": "React",
          "motivation": "The application is built with Next.js, which is a React framework. The code defines modules like `Faucet` and `FaucetButton` (e.g., `34762:function(e,n,t){...Faucet:function(){return r}});let r=()=>null}`) which are structured as simple React functional components. These components are then loaded using `Promise.resolve().then(t.bind(t, moduleId))`, typical for client components in Next.js/React."
        }
      ]
    },
    {
      "file": "_next/static/chunks/app/blockexplorer/page-95ed5e56cc336662.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code uses `(0,r.eJ)` and `(0,n.eJ)` (minified `useState`), `(0,n.d4)` (minified `useEffect`), and JSX syntax indicated by `(0,t.jsx)` and `(0,t.jsxs)`. These are core React features."
        },
        {
          "name": "Next.js Router",
          "motivation": "The code calls `(0,l.useRouter)()`, which is the standard hook for accessing the router instance in Next.js. The result `s` (router instance) is then used with `s.push(...)` for programmatic navigation."
        },
        {
          "name": "Wagmi/Viem",
          "motivation": "The code utilizes `(0,d.t)({chainId:i.c.id})`, which is characteristic of `wagmi`'s `usePublicClient` hook (or a similar client hook). The returned client instance `n` is then used to make an Ethereum RPC call: `n.getTransaction({hash:e})`. `wagmi` relies on `viem` for low-level Ethereum interactions, and `viem` typically uses `fetch` for HTTP/S based providers."
        },
        {
          "name": "Toast Notification Library",
          "motivation": "The code calls `f.t6.error(...)` to display error messages to the user. `f.t6` likely represents an imported toast manager object (e.g., from `react-hot-toast`, `react-toastify`, or a similar notification library) commonly used for displaying brief, auto-expiring messages."
        },
        {
          "name": "Scaffold-ETH Toolkit (or similar boilerplate-specific utilities)",
          "motivation": "The presence of custom hooks like `(0,x.p)()` which returns `{targetNetwork:p}` (likely providing network configuration) and `(0,h.lp)()` (which, based on its return signature `{blocks, transactionReceipts, ...}`, is likely a hook like `useFetchBlocks`) are indicative of a structured Ethereum development boilerplate such as Scaffold-ETH. Additionally, references in error messages to `localhost` configuration (`i.c.id`), the command `yarn chain`, and the configuration file `scaffold.config.ts` strongly point to this type of environment."
        }
      ]
    },
    {
      "file": "_next/static/chunks/app/layout-eaa9a40b0ea35827.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code uses `(0,r.jsx)` and `(0,r.jsxs)` which are indicative of JSX transpilation, a core feature of React. It also uses React hooks like `(0,s.useState)`, `(0,s.createContext)`, and `(0,s.useContext)` (seen in `(0,j.b)()` and `let i=(0,s.createContext)(...)`)."
        },
        {
          "name": "Wagmi",
          "motivation": "The code initializes Wagmi using `(0,h.F,{config:w.g,...})`, which corresponds to the `WagmiConfig` provider component from the Wagmi library. `w.g` is the Wagmi configuration object."
        },
        {
          "name": "ConnectKit",
          "motivation": "The code includes `(0,i.pj,{avatar:m.u5,theme:...})`, which is the typical usage pattern for `ConnectKitProvider` from the ConnectKit library, used for providing a wallet connection UI."
        },
        {
          "name": "@tanstack/react-query",
          "motivation": "The code instantiates `new c.S({defaultOptions:{queries:{refetchOnWindowFocus:!1}}})` (which is `new QueryClient(...)`) and uses it within `(0,o.aH,{client:k,...})` (which is `QueryClientProvider`). These are key components of @tanstack/react-query for managing server state."
        },
        {
          "name": "next-themes",
          "motivation": "The code utilizes `(0,x.F)()` (which is `useTheme` hook) and `(0,s.f,{defaultTheme:\"light\",...})` (which is `ThemeProvider` component from `next-themes` as seen in `75495:function(e,n,t){...t.d(n,{ThemeProvider:function(){return i}});...let i=e=>{...return(0,r.jsx)(s.f,{defaultTheme:\"light\",...t,children:n})}}`) to manage application theming."
        },
        {
          "name": "nextjs-progressbar",
          "motivation": "The code includes `(0,r.jsx)(d.Cd,{height:\"3px\",color:\"#2299dd\"})`. `d.Cd` corresponds to `NextNProgress` component (often minified this way) from `nextjs-progressbar`, used for displaying a loading bar."
        }
      ]
    },
    {
      "file": "_next/static/chunks/app/page-cce2e81fc74959c1.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code utilizes `(0,s.jsx)` for rendering JSX elements, `(0,a.eJ)` (commonly minified `React.useState`) for component state management, and `(0,a.d4)` (commonly minified `React.useEffect`) for handling side effects. These function call patterns are characteristic of compiled React applications."
        },
        {
          "name": "Wagmi",
          "motivation": "The code employs hooks like `(0,d.S)()` (identified as `useWriteContract`) and `(0,h.m)()` (identified as `useAccount`). The function `writeContractAsync` (destructured from the result of `(0,d.S)()`) is also used. These are specific to the Wagmi library for Ethereum wallet interactions and smart contract calls."
        },
        {
          "name": "Viem",
          "motivation": "The code uses `(0,l.v)({...})` (identified as `createPublicClient`) to instantiate an Ethereum client, `(0,o.d)()` (identified as the `http` transport) for client communication, and `(0,n.f)(p)` (identified as `parseEther`) for utility functions like converting ETH amounts to Wei. The public client's `simulateContract` method is also invoked. These functionalities are core to the Viem library."
        }
      ]
    },
    {
      "file": "_next/static/chunks/fd9d1056-0e4a1a21f0a7d14f.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code is replete with React internal symbols, concepts, and lifecycle/hook implementations. Examples include:\n- `l.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED` (React's internal object)\n- `s.ReactCurrentDispatcher`, `s.ReactCurrentBatchConfig`, `s.ReactCurrentOwner` (React's current state holders)\n- Symbols like `Symbol.for(\"react.element\")`, `Symbol.for(\"react.fragment\")` used for identifying React elements and fragments.\n- Minified implementations of core React hooks like `useState` (e.g., `rW`, `rD` functions handling state logic), `useEffect` (e.g., `r3`, `r4` functions handling effects), `useContext` (e.g., `ao` function for reading context).\n- Mentions of Fiber nodes and reconciliation logic (e.g., `__reactFiber$`, variables like `ok` representing the current root Fiber).\n- Error messages constructed with `i(errorCode)` which map to `react.dev/errors/`."
        },
        {
          "name": "ReactDOM",
          "motivation": "The code contains functions and logic specific to ReactDOM for interacting with the DOM and managing the root of a React application. \n- It defines and exports client-side ReactDOM APIs such as `createRoot`, `hydrateRoot`, `findDOMNode`, `render`, `unmountComponentAtNode` (these are assigned to `t.createRoot`, `t.hydrateRoot`, etc., towards the end of the snippet).\n- It includes extensive DOM manipulation logic, such as creating DOM elements (e.g., `s1(I.current).createElementNS(...)`), setting HTML attributes and properties (e.g., `sG` and `sZ` functions), and handling DOM events (e.g., event listener setup in `sI`, event dispatch logic in `sU`).\n- Hydration logic is present (e.g., functions like `t9` which checks for dehydrated content, `co` which handles hydrating specific elements).\n- The `cd` object, which is assigned to `cF.current` (effectively `Dispatcher.current` for ReactDOM), provides methods like `prefetchDNS`, `preconnect`, `preload`, `preinitStyle`, and `preinitScript`. These are resource loading APIs provided by `react-dom/client`.\n- The file path context (though not in the snippet, implied by `_next/static/chunks/`) and the Webpack bootstrap code `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)` suggest this is a chunk from a Next.js application, which uses ReactDOM for rendering."
        }
      ]
    },
    {
      "file": "_next/static/chunks/framework-36380f1dda9c24b1.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code extensively uses React-specific APIs and patterns.\n- Presence of React symbols: `Symbol.for(\"react.element\")`, `Symbol.for(\"react.fragment\")`.\n- Defines `jsx` and `jsxs` transform helper functions (e.g., in module `16968`).\n- Contains React component infrastructure (`Component`, `PureComponent`, `isReactComponent`, `setState` in module `22156`).\n- References internal React objects like `__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED`, `ReactCurrentOwner`, `ReactCurrentDispatcher`.\n- A React version string `\"18.3.1\"` is present in module `22156`."
        },
        {
          "name": "ReactDOM",
          "motivation": "The code includes functionalities specific to ReactDOM, which is React's renderer for the web (primarily in module `64448`).\n- Exports ReactDOM entry points like `createRoot`, `hydrateRoot`, `findDOMNode`, `createPortal`.\n- Contains extensive logic for DOM manipulation, synthetic event system setup (e.g., `SyntheticEvent` related code, event delegation setup like `ru(t,e,r,n)`).\n- Manages DOM properties and attributes, including HTML and SVG namespaces.\n- Includes ReactDOM-specific internal structures like `iu.rendererPackageName=\"react-dom\"`.\n- A ReactDOM version string `\"18.3.1-next-f1338f8080-20240426\"` is present."
        },
        {
          "name": "Scheduler",
          "motivation": "The code incorporates the React Scheduler package for managing concurrent tasks and updates, primarily within module `60053` (referenced by `63840`).\n- Uses `unstable_scheduleCallback`, `unstable_cancelCallback`, `unstable_now`, `unstable_shouldYield`, `unstable_getCurrentPriorityLevel`.\n- Defines priority levels like `unstable_IdlePriority`, `unstable_ImmediatePriority`, `unstable_UserBlockingPriority`, `unstable_NormalPriority`.\n- Module `60053` implements the scheduler's logic, including a priority queue (`t(c,n)`) and task execution loop (`function x(e,t)`)."
        },
        {
          "name": "Webpack (runtime)",
          "motivation": "The JavaScript file is structured as a Webpack bundle.\n- The code begins with the Webpack runtime bootstrapping mechanism: `(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push(...)`.\n- This structure, along with the numeric module identifiers (e.g., `16968`, `22156`), is characteristic of Webpack's module loading and management system."
        }
      ]
    },
    {
      "file": "_next/static/chunks/main-daa4e9d8980da834.js",
      "occurences": [
        {
          "name": "React",
          "motivation": "The code extensively uses React's core APIs and patterns: `React.Component`, hooks like `useState`, `useEffect`, `useMemo`, `useLayoutEffect`, `createContext`, `startTransition`, and React DOM's `hydrateRoot`. This clearly indicates React as a foundational library for UI rendering and management."
        },
        {
          "name": "Next.js",
          "motivation": "The codebase integrates multiple Next.js specific features: the `__NEXT_DATA__` global variable, a client-side router (`createRouter`, page data fetching from `/_next/data/`), specialized contexts (`HeadManagerContext`, `ImageConfigContext`), script loading optimizations (`next/script` patterns like `handleClientScriptLoad`), and a Hot Module Replacement (HMR) WebSocket mechanism. These elements are characteristic of a Next.js application runtime."
        },
        {
          "name": "web-vitals",
          "motivation": "A dedicated module (`r(65736)`) implements functionality to collect standard web performance metrics (CLS, FCP, FID, INP, LCP, TTFB) using `PerformanceObserver`. This mirrors the core behavior of the `web-vitals` library. The collected metrics are then passed to a `reportWebVitals` callback if provided by the application, facilitated by the Next.js runtime."
        }
      ]
    },
    {
      "file": "_next/static/chunks/polyfills-42372ed130431b0a.js",
      "occurences": [
        {
          "name": "core-js",
          "motivation": "The code contains a self-executing function that initializes a shared object `__core-js_shared__` on the global scope (`i`). This object is populated with version information (`version: \"3.38.1\"`), mode, copyright (`© 2014-2024 Denis Pushkarev (zloirock.ru)`), license, and source, which are characteristic of the `core-js` library. Numerous functions throughout the script reference this shared state or use `core-js` specific helper functions and naming conventions (e.g., `Ce` for conditional polyfill installation, `dt` for well-known symbols, extensive Symbol polyfills, and other ES feature polyfills)."
        },
        {
          "name": "Fetch API Polyfill",
          "motivation": "The script defines a function `hb` which implements the `fetch` API using `XMLHttpRequest` internally. It then assigns this function to `self.fetch` if `self.fetch` is not already defined: `self.fetch||(self.fetch=hb,...)`. This pattern indicates a polyfill for the Fetch API. The polyfill also sets up `self.Headers`, `self.Request`, and `self.Response` using custom constructors (`tb`, `ub`, `cb` respectively) defined within this script."
        },
        {
          "name": "URL API Polyfill",
          "motivation": "The script defines a constructor `Rg` (internally using parsing logic in `xg`) that emulates the `URL` API. It is conditionally assigned to the global `URL` object via `Ce({global:!0,constructor:!0,forced:!Mp,sham:!u},{URL:Rg})`, where `Mp` is a feature test evaluating native `URL` capabilities. This indicates a polyfill for the `URL` API, potentially activated if the native version is deemed insufficient by the `Mp` test or if explicitly `forced` by other conditions in the `Ce` function."
        },
        {
          "name": "URLSearchParams API Polyfill",
          "motivation": "The script defines a constructor `Sv` (internally using logic in `wv`) that emulates the `URLSearchParams` API. It is conditionally assigned to the global `URLSearchParams` object via `Ce({global:!0,constructor:!0,forced:!Mp},{URLSearchParams:Sv})`, where `Mp` is a feature test evaluating native `URLSearchParams` capabilities. This indicates a polyfill for the `URLSearchParams` API, potentially activated if the native version is deemed insufficient by the `Mp` test or if explicitly `forced` by other conditions in the `Ce` function."
        }
      ]
    },
    {
      "file": "_next/static/chunks/webpack-c22509b6385de486.js",
      "occurences": [
        {
          "name": "Next.js",
          "motivation": "The JavaScript code is characteristic of the client-side runtime of a Next.js application. This is indicated by:\n1. The global `self.webpackChunk_N_E = self.webpackChunk_N_E || []`. The `_N_E` suffix is conventionally used by Next.js for its Webpack chunk array.\n2. The chunk loading mechanism, which includes functions like `i.u` (to get chunk URLs like `static/chunks/...`) and `i.l` (to load chunks using script tags), is typical of Webpack, which Next.js uses for bundling. The base path for chunks is set via `i.p=\"./_next/\"`.\n3. The potential use of `trustedTypes.createPolicy(\"nextjs#bundler\", ...)` explicitly mentions `\"nextjs#bundler\"`, further linking this runtime code to Next.js.\nEssentially, this code is the Webpack bootstrap tailored for and part of a Next.js application."
        }
      ]
    },
    {
      "file": "blockexplorer/address/0x0000000000000000000000000000000000000000/index.html#inline-script-3",
      "occurences": [
        {
          "name": "Next.js",
          "motivation": "The code `self.__next_f.push([1,\"...\"])` is a pattern commonly found in Next.js applications. `__next_f` is an array used by Next.js for managing client-side rendering tasks, including loading critical resources like CSS. The paths `\"./_next/static/css/b30489573339f853.css\"` and `\"./_next/static/css/06fcc46807dabc5c.css\"` are standard Next.js build output paths for static assets."
        }
      ]
    },
    {
      "file": "blockexplorer/address/0x0000000000000000000000000000000000000000/index.html#inline-script-6",
      "occurences": [
        {
          "name": "Next.js",
          "motivation": "The code uses `self.__next_f.push(...)`, which is an internal mechanism characteristic of the Next.js framework. This array is typically used by Next.js for managing data related to server-side rendering, hydration, or streaming updates, such as flight data for React Server Components. The data being pushed in this snippet is a serialized representation of instructions to create HTML meta and link tags, likely for the document's `<head>` section."
        }
      ]
    },
    {
      "file": "blockexplorer/index.html#inline-script-3",
      "occurences": [
        {
          "name": "Next.js",
          "motivation": "The code `self.__next_f.push([1,\"...\"])` is a pattern commonly found in Next.js applications. `__next_f` is an array used by Next.js for managing client-side rendering tasks, including loading critical resources like CSS. The paths `\"./_next/static/css/b30489573339f853.css\"` and `\"./_next/static/css/06fcc46807dabc5c.css\"` are standard Next.js build output paths for static assets."
        }
      ]
    },
    {
      "file": "blockexplorer/index.html#inline-script-4",
      "occurences": [
        {
          "name": "Next.js",
          "motivation": "The code snippet `self.__next_f.push(...)` is a distinctive feature of the Next.js framework. This mechanism is used by Next.js for its client-side operations, including streaming rendering, hydration, and dynamically loading JavaScript chunks. The paths like `\"static/chunks/app/blockexplorer/page-95ed5e56cc336662.js\"` are also characteristic of Next.js's build output structure for page and component bundles."
        },
        {
          "name": "React",
          "motivation": "Next.js is a framework built on top of React. The data pushed to `self.__next_f` includes identifiers like `\"ClientPageRoot\"` and `\"ThemeProvider\"`. These are common naming patterns for React components. The Next.js framework uses this data to manage the rendering and hydration of React components on the client side."
        }
      ]
    },
    {
      "file": "blockexplorer/index.html#inline-script-6",
      "occurences": [
        {
          "name": "Next.js",
          "motivation": "The code `self.__next_f.push(...)` is a known pattern used by Next.js for streaming server-rendered content or data chunks for hydration/update on the client side. The data structure being pushed resembles serialized HTML element information."
        }
      ]
    },
    {
      "file": "blockexplorer/transaction/0x0000000000000000000000000000000000000000/index.html#inline-script-3",
      "occurences": [
        {
          "name": "Next.js",
          "motivation": "The code `self.__next_f.push([1,\"...\"])` is a pattern commonly found in Next.js applications. `__next_f` is an array used by Next.js for managing client-side rendering tasks, including loading critical resources like CSS. The paths `\"./_next/static/css/b30489573339f853.css\"` and `\"./_next/static/css/06fcc46807dabc5c.css\"` are standard Next.js build output paths for static assets."
        }
      ]
    },
    {
      "file": "blockexplorer/transaction/0x0000000000000000000000000000000000000000/index.html#inline-script-4",
      "occurences": [
        {
          "name": "Next.js",
          "motivation": "The code uses `self.__next_f.push(...)`, which is a characteristic pattern for Next.js client-side data hydration and Fast Refresh functionality. The serialized data within the array, such as `I[..., [..., \"static/chunks/app/layout-eaa9a40b0ea35827.js\"], \"ThemeProvider\"]`, refers to module IDs, chunk paths, and component names, which are typical of how Next.js manages and serves client-side JavaScript."
        }
      ]
    },
    {
      "file": "blockexplorer/transaction/0x0000000000000000000000000000000000000000/index.html#inline-script-6",
      "occurences": [
        {
          "name": "Next.js",
          "motivation": "The code uses `self.__next_f.push(...)`. This is a known pattern used by Next.js to push data chunks for hydrating pages or managing framework-specific operations on the client side. The structure of the pushed array, `[1, \"a:[...]\\n4:null\\n\"]`, suggests serialized data, likely for rendering HTML elements, which is common in Next.js."
        }
      ]
    },
    {
      "file": "debug/index.html#inline-script-3",
      "occurences": [
        {
          "name": "Next.js",
          "motivation": "The code `self.__next_f.push([1,\"...\"])` is a pattern commonly found in Next.js applications. `__next_f` is an array used by Next.js for managing client-side rendering tasks, including loading critical resources like CSS. The paths `\"./_next/static/css/b30489573339f853.css\"` and `\"./_next/static/css/06fcc46807dabc5c.css\"` are standard Next.js build output paths for static assets."
        }
      ]
    },
    {
      "file": "debug/index.html#inline-script-5",
      "occurences": [
        {
          "name": "Next.js",
          "motivation": "The code uses `self.__next_f.push([...])`, which is a characteristic pattern of Next.js for streaming React Server Components (RSC) payloads or page data to the client. The serialized data structure includes properties like `buildId`, `assetPrefix`, `initialTree`, `initialSeedData`, and references to `_next/static/...` paths (e.g., `\"href\":\"./_next/static/css/b30489573339f853.css\"`). The general format of `[\"$\", \"element_or_component_name\", key, {props...}]` is indicative of Next.js's internal data representation for rendering."
        }
      ]
    },
    {
      "file": "debug/index.html#inline-script-6",
      "occurences": [
        {
          "name": "Next.js",
          "motivation": "The code `self.__next_f.push(...)` indicates usage of the Next.js framework. `__next_f` is an internal array used by Next.js, often related to its Fast Refresh feature, server components data, or other client-side hydration/update mechanisms."
        }
      ]
    },
    {
      "file": "index.html#inline-script-3",
      "occurences": [
        {
          "name": "Next.js",
          "motivation": "The code `self.__next_f.push([1,\"...\"])` is a pattern commonly found in Next.js applications. `__next_f` is an array used by Next.js for managing client-side rendering tasks, including loading critical resources like CSS. The paths `\"./_next/static/css/b30489573339f853.css\"` and `\"./_next/static/css/06fcc46807dabc5c.css\"` are standard Next.js build output paths for static assets."
        }
      ]
    },
    {
      "file": "index.html#inline-script-4",
      "occurences": [
        {
          "name": "Next.js",
          "motivation": "The code `self.__next_f.push(...)` is a characteristic pattern used by the Next.js framework. This array is typically used for streaming server-rendered UI updates or flight data to the client, which includes information about JavaScript chunks to load (e.g., `static/chunks/app/page-cce2e81fc74959c1.js`) and component hydration (e.g., `ClientPageRoot`, `ThemeProvider`)."
        }
      ]
    },
    {
      "file": "index.html#inline-script-5",
      "occurences": [
        {
          "name": "Next.js",
          "motivation": "The code snippet `self.__next_f.push([1, \"...\"])` is a characteristic pattern used by Next.js for streaming Server Components data (RSC Payload) to the client. The serialized string, which is the second element of the pushed array, contains several indicators of Next.js:\n- `buildId`: A unique identifier for the Next.js build.\n- `assetPrefix`: Configuration for how Next.js serves static assets.\n- `initialTree`, `initialSeedData`: Data structures used by Next.js for client-side rendering and hydration.\n- References to paths like `./_next/static/css/...`, which are standard for Next.js static assets (e.g., `\"href\":\"./_next/static/css/b30489573339f853.css\"`).\n- Terms like `parallelRouterKey`, `segmentPath`, `globalErrorComponent`, which are concepts within the Next.js App Router architecture."
        }
      ]
    },
    {
      "file": "index.html#inline-script-6",
      "occurences": [
        {
          "name": "Next.js",
          "motivation": "The code snippet `self.__next_f.push([...])` is a characteristic pattern used by the Next.js framework. `__next_f` (or similar, like `__N_DATA__` for page data, or flight data streams) is an internal mechanism Next.js uses to pass data from the server to the client, often for hydration or streaming React Server Components (RSC) payloads. The 'f' in `__next_f` commonly refers to 'flight' data."
        }
      ]
    }
  ],
  "urls": [],
  "ethereum": [
    {
      "file": "_next/static/chunks/245-298a505156a30a82.js",
      "occurences": [
        {
          "count": 2
        }
      ]
    },
    {
      "file": "_next/static/chunks/8032.6383e9cbaae5f548.js",
      "occurences": [
        {
          "count": 1
        }
      ]
    }
  ],
  "fallbacks": [
    {
      "file": "_next/static/chunks/7172.04f16ef6b5c24ecc.js",
      "occurences": [
        {
          "type": "rpc",
          "motivation": "The code utilizes `@walletconnect/universal-provider` (as evidenced by the `s4` class structure, which initializes `SignClient`, and the presence of `EthereumProvider`). The UniversalProvider is designed to parse and use the `ds-rpc-<CHAIN_ID>=url` query parameter, allowing decentralized applications to specify fallback RPC endpoints for various blockchain networks."
        },
        {
          "type": "bundler",
          "motivation": "The inclusion of `@walletconnect/universal-provider` (class `s4`) indicates support for ERC-4337 Account Abstraction. This provider is known to parse and utilize the `ds-bundler-<CHAIN_ID>=url` query parameter, enabling dapps to specify fallback bundler service endpoints for user operations on different chains."
        }
      ]
    }
  ]
}