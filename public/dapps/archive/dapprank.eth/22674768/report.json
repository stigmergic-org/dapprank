{
  "version": 2,
  "contentHash": "bafybeibdjp3axkanrsr6aikixrwzouwal6dgionbb7dvt6wetikz7whibe",
  "timestamp": 1749566097,
  "blockNumber": 22674768,
  "rootMimeType": "inode/directory",
  "totalSize": 13881231,
  "favicon": "favicon.x-icon",
  "title": "Dapp Rank - Benchmarks Censorship Resistance",
  "distributionPurity": {
    "externalScripts": [],
    "externalMedia": []
  },
  "networkingPurity": [
    {
      "file": "11.6484c7d621bf73004f07.js",
      "occurences": [
        {
          "method": "XMLHttpRequest",
          "urls": [
            "https://plausible.io/api/event"
          ],
          "library": "Plausible",
          "type": "auxiliary",
          "motivation": "The Plausible analytics library uses `XMLHttpRequest` to send event data. The code snippet `i.open(\"POST\",`${t.apiHost}/api/event`,!0)` shows this, where `t.apiHost` defaults to `\"https://plausible.io\"`."
        },
        {
          "method": "fetch",
          "urls": [
            "https://eth.merkle.io"
          ],
          "library": "Viem",
          "type": "rpc",
          "motivation": "Viem uses `fetch` for its HTTP transport. The code initializes a default Ethereum chain configuration with `rpcUrls:{default:{http:[\"https://eth.merkle.io\"]}}`. This URL is used when Viem actions (e.g., `eth_call`, `eth_getBlockByNumber`) are dispatched via an HTTP transport. Other RPC URLs can be configured by the user of the library."
        },
        {
          "method": "fetch",
          "urls": [
            "https://ipfs.io/ipfs/[CID]/[path]",
            "https://ipfs.io/ipns/[domain]/[path]",
            "https://arweave.net/[txid]/[path]",
            "[dynamic_http_url_from_ens_avatar_record]"
          ],
          "library": "Viem",
          "type": "auxiliary",
          "motivation": "Viem's `getEnsAvatar` action fetches avatar images or metadata. This involves resolving URIs from ENS records, which can point to IPFS gateways (defaulting to `https://ipfs.io`), Arweave gateways (defaulting to `https://arweave.net`), or other HTTP URLs. The code uses `fetch(e,{method:\"HEAD\"})` and `fetch(t).then((e=>e.json()))` for these purposes."
        },
        {
          "method": "WebSocket",
          "urls": [
            "[websocket_rpc_url]"
          ],
          "library": "Viem",
          "type": "rpc",
          "motivation": "Viem supports WebSocket transports for real-time updates (e.g., `watchBlockNumber`, `watchPendingTransactions`). The code contains logic checking `e.transport.type` for `\"webSocket\"`. If a Viem client is configured with a WebSocket RPC URL, this method will be used. No specific WebSocket URL is hardcoded, as it depends on runtime configuration."
        }
      ]
    },
    {
      "file": "721.e71308e7ff412a118d8f.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "{url}"
          ],
          "library": "otherwise",
          "type": "auxiliary",
          "motivation": "The code defines an async function `w` which explicitly calls `fetch` within a loop. The URL is taken from an array `t` (representing the `urls` from the OffchainLookup revert data) and dynamically modified using `o.replace(\"{sender}\",a).replace(\"{data}\",e)`, where `o` is the URL template, `a` is the sender address, and `e` is the call data. These URLs point to external CCIP-Read (EIP-3668) gateways specified by a smart contract to resolve off-chain data, making them `auxiliary`. The HTTP method (`GET` or `POST`) depends on whether the URL template includes `\"{data}\"`. `POST` requests include `sender` and `data` in the JSON body."
        },
        {
          "method": "fetch",
          "urls": [],
          "library": "viem",
          "type": "rpc",
          "motivation": "The function `b` calls `(0,s.T)(e, {...})`. Based on the library identification as `viem`, `(0,s.T)` likely corresponds to a viem action that makes an RPC call, such as `call` or `readContract`. This specific call (`(0,s.T)`) simulates the callback execution on-chain (`data: (0,h.xW)([m,(0,p.h)(...)])`) after fetching the off-chain data. This simulation requires an RPC call to an Ethereum node. The specific URL is not present in the snippet but would be configured within the viem client `e`."
        }
      ]
    },
    {
      "file": "index.c39499afa29ff7cc9f69.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://mainnet.gateway.tenderly.co/"
          ],
          "library": "Viem",
          "type": "rpc",
          "motivation": "Viem's `http` transport is configured with a hardcoded Tenderly RPC URL. The full URL in the code is `https://mainnet.gateway.tenderly.co/`.concat(\"2W7uM9cYyjQjHkxDYFSXgH\"), where \"2W7uM9cYyjQjHkxDYFSXgH\" is an API key path component (excluded from the listed URL). Viem uses `fetch` internally for its http transport."
        },
        {
          "method": "fetch",
          "urls": [
            "/dapps/archive/<ENS_NAME>/?format=car",
            "/dapps/index/?format=car"
          ],
          "type": "self",
          "motivation": "The script fetches CAR files from its own backend at paths like `/dapps/archive/{dapp_ens_name}/?format=car` (where `{dapp_ens_name}` is dynamic) and `/dapps/index/?format=car` to load dapp data and archive information. These are relative paths to the current domain."
        },
        {
          "method": "fetch",
          "urls": [
            "https://delegated-ipfs.dev/routing/v1/providers/<CID>"
          ],
          "type": "auxiliary",
          "motivation": "The script fetches IPFS provider/seeder information for a given CID from the `delegated-ipfs.dev` service to display seeder counts. The `<CID>` part of the URL is dynamic."
        }
      ]
    }
  ],
  "libraryUsage": [
    {
      "file": "11.6484c7d621bf73004f07.js",
      "occurences": [
        {
          "name": "Plausible",
          "motivation": "The code includes a minified version of the Plausible analytics library. This is identified by the `Plausible` name in the code, functions like `trackEvent` and `trackPageview`, and an `XMLHttpRequest` call to a Plausible API endpoint (`/api/event`)."
        },
        {
          "name": "Viem",
          "motivation": "The code contains the version string `viem@2.23.5`. It also defines and uses Viem's `BaseError` class and numerous Viem actions such as `readContract`, `estimateGas`, `getEnsAddress`, `prepareTransactionRequest`, `sendRawTransaction`, `publicClient` setup, and complex ENS resolution logic. Many internal Viem functions and patterns are present."
        },
        {
          "name": "debug",
          "motivation": "The code includes the `debug` library, identifiable by its characteristic setup pattern `t.debug=t,t.default=t`, and usage of functions like `t.enable(t.load())`, `t.humanize`, and `t.selectColor`."
        },
        {
          "name": "multiformats/bases",
          "motivation": "The code imports and uses various base encoding/decoding factories from a library compatible with `multiformats/bases`. This is evident from functions like `(0,r.yE)({prefix:\"b\",name:\"base32\",...})` for base32, `(0,r._Q)({prefix:\"k\",name:\"base36\",...})` for base36, and similar patterns for base58btc, base64, etc. These are used for CID string representations."
        },
        {
          "name": "multiformats/cid",
          "motivation": "The code extensively uses CID (Content Identifier) objects and their methods, such as `Ae.TO.asCID`, `Ae.TO.create`, `Ae.TO.parse`, `Ae.TO.decode` (where `Ae.TO` is likely `CID` from `multiformats/cid` or a compatible library like the one from `js-multiformats`)."
        },
        {
          "name": "multiformats/multihash",
          "motivation": "The library is used for creating and parsing multihashes, which are a core component of CIDs. This is evident in functions like `Hr(this.code,t)` or `a.vt(this.code,t)` which are analogous to `multihash.create()` and `multihash.decode()`."
        },
        {
          "name": "@ipld/dag-pb",
          "motivation": "The code contains logic for encoding and decoding DAG-PB nodes, specifically for UnixFS. Functions like `he.decode(e)` and `m.encode((0,m.prepare)({Data:r.marshal(),Links:t}))` (where `m` is the dag-pb codec from chunk `4400`) point to this library or a compatible one."
        },
        {
          "name": "@ipld/dag-cbor",
          "motivation": "The code includes functions for encoding and decoding DAG-CBOR data structures. This is seen with `Dt.decode(c)` and `r.lF(e,s)` (where `r` from chunk `1909` is `CBOR.encode`)."
        },
        {
          "name": "@noble/curves or similar ECC library",
          "motivation": "The code includes direct usage of `secp256k1.Signature` objects and methods for signature creation, recovery (`recoverPublicKey`), and manipulation, indicating an elliptic curve cryptography library like `@noble/curves`."
        },
        {
          "name": "eventemitter3 or compatible EventEmitter",
          "motivation": "The code defines a class `a` with `a.prototype.on`, `a.prototype.emit`, and `a.EventEmitter=a`, which is the classic EventEmitter pattern. Chunk `228` exports this EventEmitter."
        },
        {
          "name": "p-queue or compatible Promise Queue",
          "motivation": "The class `Cn` in chunk `4198` extends an EventEmitter and implements promise queue functionalities with methods like `add`, `start`, `pause`, `onEmpty`, `onIdle`, and concurrency control."
        },
        {
          "name": "protobufjs/minimal or similar protobuf library",
          "motivation": "The code defines a class `te` (in chunk `4198`) with methods typical of a protobuf message builder (`uint32`, `bytes`, `string`, `fork`, `ldelim`, `finish`). It also includes extensive logic for encoding and decoding protobuf messages, particularly for UnixFS data structures (e.g., `he.decode`, `fe.codec().encode`)."
        },
        {
          "name": "uint8arraylist",
          "motivation": "The code defines a class `f` in chunk `4198` that manipulates lists of Uint8Arrays. It uses a specific symbol `Symbol.for(\"@achingbrain/uint8arraylist\")` for identification, and has methods like `append`, `consume`, `slice`, `subarray`."
        },
        {
          "name": "Async Iteration Utilities (it-pipe, p-map, etc.)",
          "motivation": "The code in chunk `4198` (`hn` function, `on` function using `p-map` like concurrency for async tasks) and patterns like chaining of async iterators with transformations (`tn`, `en`) for processing streams of data (e.g., file importing, DAG traversal) suggest the use of async iteration utility libraries."
        },
        {
          "name": "helia-unixfs / ipfs-unixfs",
          "motivation": "The code contains extensive logic for handling the UnixFS v1 data model. This includes the `xe` class (representing a UnixFS entry), `he` (UnixFSPB protobuf definitions), `ge` (UnixFS type map: Raw, Directory, File, etc.), and complex logic for importing files/directories (`xt` function) and resolving paths within UnixFS structures (`Dn` function, HAMT sharding logic)."
        },
        {
          "name": "ox",
          "motivation": "The code defines an error class `Ct` in chunk `1784` which has a version string `Object.defineProperty(this,\"version\",{enumerable:!0,configurable:!0,writable:!0,value:\"ox@0.1.1\"})`. This library appears to provide utility functions (hex manipulation, ABI encoding, etc.) used within the codebase."
        }
      ]
    },
    {
      "file": "721.e71308e7ff412a118d8f.js",
      "occurences": [
        {
          "name": "viem",
          "motivation": "The code structure utilizes error classes (`n.C` extending a base error, `l.Ci` for HTTP requests), ABI decoding (`(0,i.W)` likely `decodeErrorResult`), address comparison (`(0,f.h)` likely `isAddressEqual`), data encoding/decoding (`(0,h.xW)` likely `concatHex`, `(0,p.h)` likely `encodeAbiParameters`, `(0,y.q)` likely `isHex`), and interaction patterns (handling `OffchainLookup` reverts based on EIP-3668) that are characteristic of the `viem` library. The internal webpack references (`t(...)`) likely resolve to various modules within `viem` (e.g., `viem/errors`, `viem/abi`, `viem/utils`). The structure `(0,x.y)(...)` is typical for how Webpack bundles and calls imported functions from libraries like viem."
        }
      ]
    },
    {
      "file": "index.c39499afa29ff7cc9f69.js",
      "occurences": [
        {
          "name": "Viem",
          "motivation": "The code uses Viem's `createPublicClient` (identified as `(0,x.l)`) along with transports like `http` (`(0,b.L)`) and `custom` (`(0,f.I)`), and functions like `readContract` (e.g., `e.readContract`) for Ethereum blockchain interactions. Chain definitions (e.g., `y.r` likely being `mainnet` from `viem/chains`) are also used."
        },
        {
          "name": "ipfs-unixfs",
          "motivation": "The code utilizes functions characteristic of `ipfs-unixfs` such as `create экспортамиFs` (identified as `(0,P.Si)`) for creating a file system interface over IPFS, and methods like `cat` (`n.cat`) and `ls` (`t.ls`) to interact with IPFS content, particularly for handling CAR files fetched from the server."
        },
        {
          "name": "Multiformats",
          "motivation": "The code uses `multiformats/cid` (likely through `E.TO.decode` or similar, related to webpack module `r(9061)`) for CID decoding and manipulation, especially when processing content hashes from ENS and IPFS CAR files."
        },
        {
          "name": "Remark / Rehype",
          "motivation": "The code uses a Markdown processing pipeline involving `remark` (`(0,cn.l)`), `rehype-raw` (`pn.A`), and `rehype-stringify` (`gn.A`) to convert Markdown strings (e.g., from dapp motivations or descriptions) into HTML for display."
        },
        {
          "name": "Plausible Analytics",
          "motivation": "The code initializes Plausible Analytics using `Plausible({domain: \"dapprank.eth.link\", ...}).enableAutoPageviews()` (identified as `(0,(0,Mn.A)({...}).enableAutoPageviews)`) for website analytics."
        }
      ]
    }
  ],
  "urls": [],
  "ethereum": [
    {
      "file": "index.c39499afa29ff7cc9f69.js",
      "occurences": [
        {
          "count": 14
        }
      ]
    }
  ],
  "fallbacks": [
    {
      "file": "index.c39499afa29ff7cc9f69.js",
      "occurences": [
        {
          "type": "rpc",
          "motivation": "The script's `U()` function, responsible for initializing its Ethereum client (Viem), explicitly parses the `ds-rpc-<CHAIN_ID>` query parameter using `new URLSearchParams(window.location.search).get('ds-rpc-' + n)`. The retrieved URL, if present, is then used to configure Viem's `http` transport, effectively using it for RPC calls made by this script for its own operations (e.g., ENS resolution)."
        }
      ]
    }
  ]
}