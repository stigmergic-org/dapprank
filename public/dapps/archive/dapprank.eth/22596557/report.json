{
  "version": 2,
  "contentHash": "bafybeibk5ffpq7mldk3bhklwft6d2qmhildslcut3kmhun4rc4rqolb6da",
  "timestamp": 1748622444,
  "blockNumber": 22596557,
  "rootMimeType": "inode/directory",
  "totalSize": 18974932,
  "favicon": "favicon.x-icon",
  "title": "Dapp Rank - Benchmarks Censorship Resistance",
  "distributionPurity": {
    "externalScripts": [],
    "externalMedia": []
  },
  "networkingPurity": [
    {
      "file": "721.e71308e7ff412a118d8f.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "{url}"
          ],
          "library": "otherwise",
          "type": "auxiliary",
          "motivation": "The code defines an async function `w` which explicitly calls `fetch` within a loop. The URL is taken from an array `t` (representing the `urls` from the OffchainLookup revert data) and dynamically modified using `o.replace(\"{sender}\",a).replace(\"{data}\",e)`, where `o` is the URL template, `a` is the sender address, and `e` is the call data. These URLs point to external CCIP-Read (EIP-3668) gateways specified by a smart contract to resolve off-chain data, making them `auxiliary`. The HTTP method (`GET` or `POST`) depends on whether the URL template includes `\"{data}\"`. `POST` requests include `sender` and `data` in the JSON body."
        },
        {
          "method": "fetch",
          "urls": [],
          "library": "viem",
          "type": "rpc",
          "motivation": "The function `b` calls `(0,s.T)(e, {...})`. Based on the library identification as `viem`, `(0,s.T)` likely corresponds to a viem action that makes an RPC call, such as `call` or `readContract`. This specific call (`(0,s.T)`) simulates the callback execution on-chain (`data: (0,h.xW)([m,(0,p.h)(...)])`) after fetching the off-chain data. This simulation requires an RPC call to an Ethereum node. The specific URL is not present in the snippet but would be configured within the viem client `e`."
        }
      ]
    },
    {
      "file": "index.b70b97ce6b7c090e6c3d.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "/dapps/index/?format=car"
          ],
          "library": "custom",
          "type": "self",
          "motivation": "The `K(n)` function calls `fetch(o)` where `o` can be `\"/dapps/index/?format=car\"`. This is used to fetch the CAR file for the main dapps index."
        },
        {
          "method": "fetch",
          "urls": [
            "/dapps/archive/{dapp_name}/?format=car"
          ],
          "library": "custom",
          "type": "self",
          "motivation": "The `K(n)` function calls `fetch(o)` where `o` can be constructed as `\"/dapps/archive/\" + n + \"/?format=car\"`. This is used to fetch CAR files for individual dapp archives. `{dapp_name}` is a placeholder for the actual dapp identifier."
        },
        {
          "method": "fetch",
          "urls": [
            "https://delegated-ipfs.dev/routing/v1/providers/{content_hash}"
          ],
          "library": "custom",
          "type": "auxiliary",
          "motivation": "The code contains a function that fetches seeder information for an IPFS content hash using the URL `\"https://delegated-ipfs.dev/routing/v1/providers/\" + contentHash`. `{content_hash}` is a placeholder for the actual hash."
        },
        {
          "method": "fetch",
          "urls": [
            "https://mainnet.gateway.tenderly.co/"
          ],
          "library": "viem",
          "type": "rpc",
          "motivation": "The `T()` function, which sets up the `viem` public client, uses `\"https://mainnet.gateway.tenderly.co/\"` (API key removed) as a default RPC endpoint. This results in `fetch` calls made by `viem`'s HTTP transport."
        }
      ]
    }
  ],
  "libraryUsage": [
    {
      "file": "721.e71308e7ff412a118d8f.js",
      "occurences": [
        {
          "name": "viem",
          "motivation": "The code structure utilizes error classes (`n.C` extending a base error, `l.Ci` for HTTP requests), ABI decoding (`(0,i.W)` likely `decodeErrorResult`), address comparison (`(0,f.h)` likely `isAddressEqual`), data encoding/decoding (`(0,h.xW)` likely `concatHex`, `(0,p.h)` likely `encodeAbiParameters`, `(0,y.q)` likely `isHex`), and interaction patterns (handling `OffchainLookup` reverts based on EIP-3668) that are characteristic of the `viem` library. The internal webpack references (`t(...)`) likely resolve to various modules within `viem` (e.g., `viem/errors`, `viem/abi`, `viem/utils`). The structure `(0,x.y)(...)` is typical for how Webpack bundles and calls imported functions from libraries like viem."
        }
      ]
    },
    {
      "file": "index.b70b97ce6b7c090e6c3d.js",
      "occurences": [
        {
          "name": "viem",
          "motivation": "The code imports and utilizes functions commonly found in Ethereum interaction libraries like `viem`. Specifically:\n- It uses `createPublicClient` (likely `r(2427)` aliased as `(0,x.l)`) with `http` (`r(1784)`) and `custom` (`r(5387)`) transports, configured for `mainnet` (`r(2792)`).\n- It performs `readContract` calls (e.g., for ENS Universal Resolver at `0x64969fb44091A7E5fA1213D30D7A7e8488edf693`).\n- It uses utility functions like `encodeFunctionData` (`r(8503)`), `decodeFunctionResult` (`r(1965)`), `namehash` (`r(7570)`), and `cidToString` (`r(9061)`).\n- It interacts with `window.ethereum` for chain ID and requests."
        },
        {
          "name": "Helia (and related IPFS libraries like Carbites, ipfs-unixfs)",
          "motivation": "The code interacts with IPFS data and CAR files:\n- It uses functions suggestive of `helia` or a similar IPFS client, for example, `K(n)` fetches a CAR file (`?format=car`) and processes it using `CarReader.fromBytes` (likely from `carbites`, `r(8184)` is `CarReader`).\n- It uses a `MemoryBlockstore` (likely `r(1950)`).\n- It makes `cat` calls on the IPFS filesystem object (e.g., `n.cat(e,{path:r})` in `J()`).\n- Codecs like `dagCbor` (`r(4868)`), `dagPb` (`r(4602)`), `raw` (`r(4400)`), and `json` (`r(2595)`) are registered/used, which are typical for IPFS/IPLD operations.\n- It concatenates Uint8Arrays (`r(4330)` is `concat`)."
        },
        {
          "name": "Unified (with Remark and Rehype plugins)",
          "motivation": "The code processes Markdown strings and converts them to HTML:\n- It uses `unified` (likely `r(3668)` aliased as `(0,cn.l)`), `remark-parse` (likely `r(4303)` aliased as `pn.A`), and `remark-rehype` (likely `r(7642)` aliased as `gn.A`).\n- The pattern `unified().use(remarkParse).use(remarkRehype).processSync(markdownString)` is used in the `bn()` function to convert markdown motivation texts into HTML."
        }
      ]
    }
  ],
  "urls": [],
  "ethereum": [
    {
      "file": "index.b70b97ce6b7c090e6c3d.js",
      "occurences": [
        {
          "count": 14
        }
      ]
    }
  ],
  "fallbacks": [
    {
      "file": "index.b70b97ce6b7c090e6c3d.js",
      "occurences": [
        {
          "type": "rpc",
          "motivation": "The script's `T()` function, responsible for creating an Ethereum client (likely `viem`), explicitly parses `window.location.search` for the `ds-rpc-1` query parameter. If found, its value is used as an RPC URL for chain ID 1. Additionally, the script's UI generation code (`un(n)`) reads `dappspec.fallbacks.rpcs` from a target dapp's manifest and displays information indicating that the target dapp supports RPC overrides via `?ds-rpc-<CHAIN_ID>=url` query parameters."
        },
        {
          "type": "bundler",
          "motivation": "The script parses `dappspec.json` files of target dapps. If a dapp's `dappspec.json` includes `fallbacks.bundlers: true`, the script's UI generation code (`un(n)`) uses this information. It calls `In(n, \"bundler\")` to check for detected implementation details in the target dapp's code and displays explanatory text stating that custom bundler endpoints can be specified via `?ds-bundler-<CHAIN_ID>=url` query parameters."
        },
        {
          "type": "dservice-external",
          "motivation": "The script parses `dappspec.json` files of target dapps. If a dapp's `dappspec.json` includes `fallbacks.dservice: true`, the script's UI generation code (`un(n)`) uses this information. It calls `In(n, \"dservice\")` to check for detected implementation details and displays explanatory text stating that custom DService endpoints for external services can be specified via `?ds-<ens-name>=url` query parameters."
        },
        {
          "type": "dservice-self",
          "motivation": "The script parses `dappspec.json` files of target dapps and processes the `fallbacks.dservice` flag. The DappSpec documentation generated by the script itself (in the `/dappspec` route) clarifies that the dservice fallback mechanism includes overriding the main service URL via `?ds-self=url`. Thus, by processing `fallbacks.dservice`, the script acknowledges and supports the concept of self-dservice overrides as defined in the specification it presents."
        }
      ]
    }
  ]
}