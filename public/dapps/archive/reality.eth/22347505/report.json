{
  "version": 2,
  "contentHash": "bafybeih2co3oy5vqt5paiqimjeczoijzmomeua2qedfemgmw34xd6bbepe",
  "timestamp": 1745609536,
  "blockNumber": 22347505,
  "rootMimeType": "inode/directory",
  "totalSize": 34044099,
  "favicon": "favicon.ico",
  "title": "reality.eth - Crowd-sourced verification for smart contracts",
  "distributionPurity": {
    "externalScripts": [
      {
        "file": "app/index.html",
        "occurences": [
          {
            "type": "link",
            "url": "https://fonts.googleapis.com/icon?family=Material+Icons"
          },
          {
            "type": "link",
            "url": "https://ajax.googleapis.com/ajax/libs/jqueryui/1/themes/flick/jquery-ui.css"
          }
        ]
      },
      {
        "file": "app/template-generator/index.html",
        "occurences": [
          {
            "type": "link",
            "url": "https://fonts.googleapis.com"
          },
          {
            "type": "link",
            "url": "https://fonts.gstatic.com"
          },
          {
            "type": "link",
            "url": "https://fonts.googleapis.com/css2?family=Roboto+Mono:wght@400&family=Roboto:wght@100;300;400;500;700;900&display=swap"
          }
        ]
      },
      {
        "file": "index.html",
        "occurences": [
          {
            "type": "script",
            "url": "https://code.jquery.com/jquery-3.3.1.min.js"
          }
        ]
      }
    ],
    "externalMedia": []
  },
  "networkingPurity": [
    {
      "file": "app/docs/html/_static/jquery-3.5.1.js",
      "occurences": [
        {
          "method": "XMLHttpRequest",
          "urls": [],
          "library": "jQuery",
          "type": "auxiliary",
          "motivation": "jQuery's `$.ajax` method and its derivatives (`$.get`, `$.post`, `$.getJSON`, `$.fn.load`) utilize `XMLHttpRequest` for making network requests. The code includes `jQuery.ajaxSettings.xhr = function() { try { return new window.XMLHttpRequest(); } catch ( e ) {} };` to create XHR objects and `jQuery.ajaxTransport` uses the `xhr.open()` and `xhr.send()` methods. The specific URLs are determined by the calling code that uses these jQuery functions, not hardcoded in the library itself."
        }
      ]
    },
    {
      "file": "app/docs/html/_static/jquery.js",
      "occurences": [
        {
          "method": "XMLHttpRequest",
          "urls": [],
          "library": "jQuery",
          "type": "auxiliary",
          "motivation": "jQuery's AJAX functionality (`$.ajax`, `$.get`, `$.post`, etc.) uses `XMLHttpRequest` internally. The code includes logic to create an `XMLHttpRequest` object: `S.ajaxSettings.xhr=function(){try{return new C.XMLHttpRequest}catch(e){}}`. However, the specific URLs for these requests are determined by the user of the jQuery library when calling functions like `$.ajax(options)`, `$.get(url)`, etc., and are not hardcoded within the library itself. Therefore, no specific URLs from the codebase can be listed."
        }
      ]
    },
    {
      "file": "app/docs/html/search.html",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "searchindex.js"
          ],
          "library": "Sphinx Search Tools",
          "type": "self",
          "motivation": "The code calls `Search.loadIndex(\"searchindex.js\");` within an inline script, triggering the `searchtools.js` library. This function likely uses `fetch` (or potentially `XMLHttpRequest`) to load the search index file (`searchindex.js`) from the relative path on the same server to enable search functionality."
        }
      ]
    },
    {
      "file": "app/js/app.c7220a5e.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://public.api.bsky.app/xrpc/app.bsky.feed.getPostThread"
          ],
          "library": "otherwise",
          "type": "auxiliary",
          "motivation": "A direct `fetch` call is made to the Bluesky API endpoint `https://public.api.bsky.app/xrpc/app.bsky.feed.getPostThread?uri=...` to retrieve post thread data. The URL is constructed by concatenating a base URL with a query parameter."
        },
        {
          "method": "fetch",
          "urls": [
            "Configured RPC Endpoint"
          ],
          "library": "ethers.js",
          "type": "rpc",
          "motivation": "The code initializes `ethers.providers.JsonRpcProvider(K)`, where `K` is derived from `D.hostedRPC` or `N.hostedRPC` obtained from configuration data (`x.chainData(chainId)`). This provider internally uses `fetch` to communicate with the configured Ethereum JSON-RPC endpoint for blockchain interactions."
        },
        {
          "method": "fetch",
          "urls": [
            "Configured Graph Endpoint"
          ],
          "library": "axios",
          "type": "auxiliary",
          "motivation": "The code makes multiple `axios.post` calls (variable `c` or `p` initialized from `n(9669)`) to URLs stored in configuration (`D.graphURL` or `N.graphURL` from `x.chainData(chainId)`). These POST requests send GraphQL queries (`{query: ...}`) to fetch blockchain data indexed by The Graph protocol."
        }
      ]
    },
    {
      "file": "app/template-generator/static/js/2.e78c704b.chunk.js",
      "occurences": [
        {
          "method": "fetch",
          "urls": [
            "https://cloudflare-eth.com/",
            "https://*.alchemyapi.io/v2/",
            "https://*.g.alchemy.com/v2/",
            "https://rpc.ankr.com/*/",
            "https://*.infura.io/v3/",
            "https://*.gateway.pokt.network/v1/lb/",
            "https://*.quiknode.pro/*/",
            "https://mainnet.era.zksync.io",
            "https://zksync.drpc.org",
            "https://rpc.sepolia.org",
            "https://rpc2.sepolia.org",
            "https://rpc-sepolia.rockx.com",
            "https://rpc.sepolia.ethpandaops.io",
            "https://sepolia.gateway.tenderly.co",
            "https://ethereum-sepolia-rpc.publicnode.com",
            "https://sepolia.drpc.org",
            "https://api.etherscan.io",
            "https://api-*.etherscan.io",
            "https://api.*scan.com"
          ],
          "library": "ethers.js",
          "type": "rpc",
          "motivation": "The code includes logic for various ethers.js providers (`AlchemyProvider`, `AnkrProvider`, `CloudflareProvider`, `EtherscanProvider`, `InfuraProvider`, `PocketProvider`, `QuickNodeProvider`, `JsonRpcProvider`, `StaticJsonRpcProvider`) which internally use `fetch` (via `fetchJson` and `_fetchData`) to interact with JSON-RPC endpoints. The URLs are constructed dynamically based on the provider, network, and API key."
        },
        {
          "method": "fetch",
          "urls": [
            "https://api.etherscan.io",
            "https://api-*.etherscan.io",
            "https://api.*scan.com",
            "https://*.arbiscan.io",
            "https://*.polygonscan.com",
            "https://optimistic.etherscan.io",
            "https://*.basescan.org"
          ],
          "library": "ethers.js",
          "type": "auxiliary",
          "motivation": "The `EtherscanProvider` uses `fetch` to interact with the Etherscan API (and similar block explorer APIs for other chains like PolygonScan, Arbiscan, BaseScan, Optimistic Etherscan) for fetching chain data, transaction history, etc. These are auxiliary API calls, not direct RPC calls."
        },
        {
          "method": "fetch",
          "urls": [],
          "library": "ethers.js",
          "type": "auxiliary",
          "motivation": "The `ccipReadFetch` function within the ethers.js provider logic uses `fetchJson` to resolve CCIP-Read URLs. The specific URLs are determined at runtime based on the response from a resolver contract and are dynamically constructed using templates like `{sender}` and `{data}`."
        },
        {
          "method": "WebSocket",
          "urls": [
            "wss://*.alchemyapi.io/v2/",
            "wss://*.g.alchemy.com/v2/",
            "wss://*.infura.io/ws/v3/"
          ],
          "library": "ethers.js",
          "type": "rpc",
          "motivation": "The code defines WebSocket providers (`AlchemyWebSocketProvider`, `InfuraWebSocketProvider`, `WebSocketProvider`) that instantiate the native `WebSocket` object with URLs constructed dynamically based on the provider, network, and API key to establish persistent RPC connections."
        },
        {
          "method": "fetch",
          "urls": [
            "https://cloudflare-dns.com/dns-query"
          ],
          "library": "@ensdomains/dnsprovejs",
          "type": "auxiliary",
          "motivation": "The code initializes `DNSProver` from `@ensdomains/dnsprovejs` using `DNSProver.create('https://cloudflare-dns.com/dns-query')`. This library internally uses `cross-fetch` (which uses `fetch`) to perform DNS over HTTPS (DoH) queries to the specified endpoint for DNS record resolution and proof retrieval needed for ENS DNSSEC integration."
        }
      ]
    },
    {
      "file": "js/vendor/jquery-3.3.1.min.js",
      "occurences": [
        {
          "method": "XMLHttpRequest",
          "urls": [],
          "library": "jQuery",
          "type": "auxiliary",
          "motivation": "The code defines `w.ajaxSettings.xhr = function(){try{return new e.XMLHttpRequest}catch(e){}}`, which indicates that jQuery uses `XMLHttpRequest` for its AJAX operations (`w.ajax`, `w.get`, `w.post`, `w.fn.load`, etc.). The specific URLs are determined by the calling code that uses the jQuery library, and no specific URLs are hardcoded within the library file itself."
        }
      ]
    }
  ],
  "libraryUsage": [
    {
      "file": "app/docs/html/_static/doctools.js",
      "occurences": [
        {
          "name": "jQuery",
          "motivation": "The code extensively uses the `jQuery` object and the `$` alias for DOM manipulation (e.g., `$(document).ready`, `$('div[id] > :header:first')`), event handling (`$(document).keydown`), AJAX helpers (though none are used in this specific file, utility functions like `jQuery.getQueryParameters` are defined), and extending jQuery's functionality (`jQuery.fn.highlightText`, `jQuery.urldecode`). The code also checks for `jQuery.browser`."
        },
        {
          "name": "Underscore.js / Lodash (partial/conflicted)",
          "motivation": "The code starts with `$u = _.noConflict()`. This indicates that a library assigning itself to `_` (typically Underscore.js or Lodash) was loaded before this script. However, the `_` variable is immediately rebound to `Documentation.gettext`, and the `$u` variable is not used elsewhere in the script. Therefore, while Underscore/Lodash might be present on the page, this specific script (`doctools.js`) does not actively utilize its core functions after the initial `noConflict` call."
        }
      ]
    },
    {
      "file": "app/docs/html/_static/jquery-3.5.1.js",
      "occurences": [
        {
          "name": "jQuery",
          "motivation": "The code header explicitly states `/*! jQuery JavaScript Library v3.5.1 ...` and the entire file implements the jQuery library's functionality, including DOM manipulation, event handling, and AJAX requests. It also mentions including Sizzle.js, which is jQuery's selector engine."
        }
      ]
    },
    {
      "file": "app/docs/html/_static/jquery.js",
      "occurences": [
        {
          "name": "jQuery",
          "motivation": "The code contains the comment `/*! jQuery v3.5.1 | (c) JS Foundation and other contributors | jquery.org/license */` at the beginning. It defines the core jQuery function `S` and assigns it to `C.jQuery` and `C.$` (`C` is typically `window`). The `S.fn.jquery` property is set to the version string `'3.5.1'`."
        }
      ]
    },
    {
      "file": "app/docs/html/_static/js/html5shiv-printshiv.min.js",
      "occurences": [
        {
          "name": "HTML5 Shiv",
          "motivation": "The code includes a comment `/** * @preserve HTML5 Shiv 3.7.3-pre | @afarkas @jdalton @jon_neal @rem | MIT/GPL2 Licensed */` at the beginning. The code defines functions (`createElement`, `createDocumentFragment`, `shivDocument`, `shivPrint`) and checks related to enabling HTML5 elements (like `article`, `aside`, `figure`, etc.) and CSS styling for them in older browsers, which is the explicit purpose of HTML5 Shiv."
        }
      ]
    },
    {
      "file": "app/docs/html/_static/js/html5shiv.min.js",
      "occurences": [
        {
          "name": "HTML5 Shiv",
          "motivation": "The code contains a comment block `/** @preserve HTML5 Shiv 3.7.3 ... */` explicitly naming the library and its version. The code's functionality involves creating and manipulating HTML elements (`createElement`, `createDocumentFragment`) and applying styles to ensure HTML5 elements (`article`, `aside`, `dialog`, etc.) are rendered correctly in older browsers, which is the core purpose of HTML5 Shiv."
        }
      ]
    },
    {
      "file": "app/docs/html/_static/js/theme.js",
      "occurences": [
        {
          "name": "jQuery",
          "motivation": "The code explicitly checks for `window.jQuery` and uses `t(2)` which exports `jQuery`. It heavily relies on jQuery functions like `$(...)`, `.on()`, `.toggleClass()`, `.addClass()`, `.removeClass()`, `.find()`, `.closest()`, `.siblings()`, `.height()`, `.scrollTop()`, `.wrap()`, `.prepend()` for DOM manipulation and event handling."
        },
        {
          "name": "Sphinx RTD Theme Navigation",
          "motivation": "The code defines an object `ThemeNav` with methods like `init`, `reset`, `onScroll`, `onResize`, `toggleCurrent` specifically designed to handle the navigation sidebar behavior (highlighting active links based on scroll/hash, expanding/collapsing sections, handling sticky navigation) typical in Sphinx documentation themes, particularly the Read the Docs theme. It assigns this logic to `window.SphinxRtdTheme.Navigation`."
        }
      ]
    },
    {
      "file": "app/docs/html/_static/language_data.js",
      "occurences": [
        {
          "name": "Sphinx Search Tools Helper",
          "motivation": "`The code comments mention 'searchtools.js' and 'Copyright 2007-2021 by the Sphinx team', indicating it's part of the JavaScript support utilities for Sphinx documentation search. It provides a custom implementation of the Porter Stemmer algorithm (`Stemmer` class) and functions for splitting search queries (`splitQuery`, `splitChars`), using only vanilla JavaScript.`"
        }
      ]
    },
    {
      "file": "app/docs/html/_static/underscore.js",
      "occurences": [
        {
          "name": "Underscore.js",
          "motivation": "The code header explicitly states `// Underscore.js 1.12.0` and links to `https://underscorejs.org`. The code also includes copyright information for Underscore.js and uses typical library patterns for exporting (`module.exports`, `define`, attaching to `window._`). The code itself implements numerous utility functions characteristic of Underscore."
        }
      ]
    },
    {
      "file": "app/docs/html/arbitrators.html#inline-script-1",
      "occurences": [
        {
          "name": "jQuery",
          "motivation": "The code uses the `jQuery(function () { ... });` syntax, which is the standard way to execute code when the DOM is ready using the jQuery library."
        },
        {
          "name": "SphinxRtdTheme",
          "motivation": "The code explicitly calls `SphinxRtdTheme.Navigation.enable(true)`, indicating the use of the Sphinx Read the Docs theme JavaScript."
        }
      ]
    },
    {
      "file": "app/docs/html/audit.html#inline-script-1",
      "occurences": [
        {
          "name": "jQuery",
          "motivation": "The code uses the `jQuery(function () { ... });` syntax, which is the standard way to execute code when the DOM is ready using the jQuery library."
        },
        {
          "name": "SphinxRtdTheme",
          "motivation": "The code explicitly calls `SphinxRtdTheme.Navigation.enable(true)`, indicating the use of the Sphinx Read the Docs theme JavaScript."
        }
      ]
    },
    {
      "file": "app/docs/html/audit_v2.html#inline-script-1",
      "occurences": [
        {
          "name": "jQuery",
          "motivation": "The code uses the `jQuery(function () { ... });` syntax, which is the standard way to execute code when the DOM is ready using the jQuery library."
        },
        {
          "name": "SphinxRtdTheme",
          "motivation": "The code explicitly calls `SphinxRtdTheme.Navigation.enable(true)`, indicating the use of the Sphinx Read the Docs theme JavaScript."
        }
      ]
    },
    {
      "file": "app/docs/html/audit_v2_ERC20.html#inline-script-1",
      "occurences": [
        {
          "name": "jQuery",
          "motivation": "The code uses the `jQuery(function () { ... });` syntax, which is the standard way to execute code when the DOM is ready using the jQuery library."
        },
        {
          "name": "SphinxRtdTheme",
          "motivation": "The code explicitly calls `SphinxRtdTheme.Navigation.enable(true)`, indicating the use of the Sphinx Read the Docs theme JavaScript."
        }
      ]
    },
    {
      "file": "app/docs/html/audit_v3.html#inline-script-1",
      "occurences": [
        {
          "name": "jQuery",
          "motivation": "The code uses the `jQuery(function () { ... });` syntax, which is the standard way to execute code when the DOM is ready using the jQuery library."
        },
        {
          "name": "SphinxRtdTheme",
          "motivation": "The code explicitly calls `SphinxRtdTheme.Navigation.enable(true)`, indicating the use of the Sphinx Read the Docs theme JavaScript."
        }
      ]
    },
    {
      "file": "app/docs/html/contract_explanation.html#inline-script-1",
      "occurences": [
        {
          "name": "jQuery",
          "motivation": "The code uses the `jQuery(function () { ... });` syntax, which is the standard way to execute code when the DOM is ready using the jQuery library."
        },
        {
          "name": "SphinxRtdTheme",
          "motivation": "The code explicitly calls `SphinxRtdTheme.Navigation.enable(true)`, indicating the use of the Sphinx Read the Docs theme JavaScript."
        }
      ]
    },
    {
      "file": "app/docs/html/contracts.html#inline-script-1",
      "occurences": [
        {
          "name": "jQuery",
          "motivation": "The code uses the `jQuery(function () { ... });` syntax, which is the standard way to execute code when the DOM is ready using the jQuery library."
        },
        {
          "name": "SphinxRtdTheme",
          "motivation": "The code explicitly calls `SphinxRtdTheme.Navigation.enable(true)`, indicating the use of the Sphinx Read the Docs theme JavaScript."
        }
      ]
    },
    {
      "file": "app/docs/html/dapp.html#inline-script-1",
      "occurences": [
        {
          "name": "jQuery",
          "motivation": "The code uses the `jQuery(function () { ... });` syntax, which is the standard way to execute code when the DOM is ready using the jQuery library."
        },
        {
          "name": "SphinxRtdTheme",
          "motivation": "The code explicitly calls `SphinxRtdTheme.Navigation.enable(true)`, indicating the use of the Sphinx Read the Docs theme JavaScript."
        }
      ]
    },
    {
      "file": "app/docs/html/dapp_links.html#inline-script-1",
      "occurences": [
        {
          "name": "jQuery",
          "motivation": "The code uses the `jQuery(function () { ... });` syntax, which is the standard way to execute code when the DOM is ready using the jQuery library."
        },
        {
          "name": "SphinxRtdTheme",
          "motivation": "The code explicitly calls `SphinxRtdTheme.Navigation.enable(true)`, indicating the use of the Sphinx Read the Docs theme JavaScript."
        }
      ]
    },
    {
      "file": "app/docs/html/fees.html#inline-script-1",
      "occurences": [
        {
          "name": "jQuery",
          "motivation": "The code uses the `jQuery(function () { ... });` syntax, which is the standard way to execute code when the DOM is ready using the jQuery library."
        },
        {
          "name": "SphinxRtdTheme",
          "motivation": "The code explicitly calls `SphinxRtdTheme.Navigation.enable(true)`, indicating the use of the Sphinx Read the Docs theme JavaScript."
        }
      ]
    },
    {
      "file": "app/docs/html/genindex.html",
      "occurences": [
        {
          "name": "jQuery",
          "motivation": "The code explicitly includes `_static/jquery.js` via a `<script>` tag and uses the `jQuery` function (or `$`) in an inline script: `jQuery(function () { ... });`."
        },
        {
          "name": "Underscore.js",
          "motivation": "The code explicitly includes `_static/underscore.js` via a `<script>` tag."
        },
        {
          "name": "Sphinx Documentation Tools",
          "motivation": "The code includes `_static/documentation_options.js` and `_static/doctools.js`, which are standard components of documentation generated by the Sphinx tool."
        },
        {
          "name": "Sphinx ReadTheDocs Theme JS",
          "motivation": "The code includes `_static/js/theme.js` and calls `SphinxRtdTheme.Navigation.enable(true);`. This indicates the use of the JavaScript specific to the ReadTheDocs theme for Sphinx."
        }
      ]
    },
    {
      "file": "app/docs/html/index.html#inline-script-1",
      "occurences": [
        {
          "name": "jQuery",
          "motivation": "The code uses the `jQuery(function () { ... });` syntax, which is the standard way to execute code when the DOM is ready using the jQuery library."
        },
        {
          "name": "SphinxRtdTheme",
          "motivation": "The code explicitly calls `SphinxRtdTheme.Navigation.enable(true)`, indicating the use of the Sphinx Read the Docs theme JavaScript."
        }
      ]
    },
    {
      "file": "app/docs/html/javascript.html#inline-script-1",
      "occurences": [
        {
          "name": "jQuery",
          "motivation": "The code uses the `jQuery(function () { ... });` syntax, which is the standard way to execute code when the DOM is ready using the jQuery library."
        },
        {
          "name": "SphinxRtdTheme",
          "motivation": "The code explicitly calls `SphinxRtdTheme.Navigation.enable(true)`, indicating the use of the Sphinx Read the Docs theme JavaScript."
        }
      ]
    },
    {
      "file": "app/docs/html/search.html",
      "occurences": [
        {
          "name": "jQuery",
          "motivation": "The code includes `<script src=\"_static/jquery.js\"></script>` and uses jQuery functions like `jQuery(function () { ... })`."
        },
        {
          "name": "Underscore.js",
          "motivation": "The code includes `<script src=\"_static/underscore.js\"></script>`."
        },
        {
          "name": "Sphinx Doctools",
          "motivation": "The code includes `<script src=\"_static/doctools.js\"></script>`, which is a standard part of documentation generated by Sphinx."
        },
        {
          "name": "Sphinx Read the Docs Theme",
          "motivation": "The code includes `<script type=\"text/javascript\" src=\"_static/js/theme.js\"></script>` and calls `SphinxRtdTheme.Navigation.enable(true);`, indicating the use of the theme's JavaScript."
        },
        {
          "name": "Sphinx Search Tools",
          "motivation": "The code includes `<script type=\"text/javascript\" src=\"_static/searchtools.js\"></script>` and calls `Search.loadIndex(\"searchindex.js\");` from this library."
        },
        {
          "name": "HTML5 Shiv",
          "motivation": "The code includes `<!--[if lt IE 9]><script src=\"_static/js/html5shiv.min.js\"></script><![endif]-->` as a conditional include for older Internet Explorer versions."
        }
      ]
    },
    {
      "file": "app/docs/html/whitepaper.html#inline-script-1",
      "occurences": [
        {
          "name": "jQuery",
          "motivation": "The code uses the `jQuery(function () { ... });` syntax, which is the standard way to execute code when the DOM is ready using the jQuery library."
        },
        {
          "name": "SphinxRtdTheme",
          "motivation": "The code explicitly calls `SphinxRtdTheme.Navigation.enable(true)`, indicating the use of the Sphinx Read the Docs theme JavaScript."
        }
      ]
    },
    {
      "file": "app/js/app.c7220a5e.js",
      "occurences": [
        {
          "name": "ethers.js",
          "motivation": "The code extensively uses `r.BigNumber`, `r.utils`, `r.Contract`, `r.providers.Web3Provider`, and `r.providers.JsonRpcProvider` where `r` is assigned `n(36046)`, which are characteristic features and classes of the ethers.js library for interacting with Ethereum."
        },
        {
          "name": "jQuery",
          "motivation": "The code uses `C(...)` frequently for DOM manipulation and event handling (e.g., `C(document).on(...)`, `C(...).find(...)`, `C(...).addClass(...)`, `C(...).val(...)`, `C(...).click(...)`). The variable `C` is assigned `n(19755)`, a common pattern for bundled jQuery."
        },
        {
          "name": "axios",
          "motivation": "The code uses `c.post(url, {query: ...})` to make HTTP POST requests, specifically for GraphQL queries to The Graph endpoints. The variable `c` is assigned `n(9669)`, which corresponds to the axios library, commonly used for making HTTP requests."
        },
        {
          "name": "interact.js",
          "motivation": "The code initializes draggable behavior using `a()(\".rcbrowser-header\").draggable(...)`. The variable `a` is assigned `n(68496)`, and the `.draggable()` method signature matches that of interact.js."
        },
        {
          "name": "perfect-scrollbar",
          "motivation": "The code calls `s().initialize(...)` and `s().update(...)` on elements with the class `.rcbrowser-inner`. The variable `s` is assigned `n(95891)`, and these methods are characteristic of the perfect-scrollbar library for custom scrollbars."
        },
        {
          "name": "timeago.js",
          "motivation": "The code initializes a timeago instance (`i = new o`) where `o` is `n(46645)`, and then calls `i.render(...)` on elements with the class `.timeago` to display relative timestamps. This pattern is typical of timeago.js."
        },
        {
          "name": "jdenticon",
          "motivation": "The code calls `u(32, parseInt(hexString, 16))` where `u` is `n(61191)` to generate an avatar based on a hex string (likely an Ethereum address). This function signature and usage pattern match the jdenticon library for generating identicons."
        }
      ]
    },
    {
      "file": "app/template-generator/index.html#inline-script-1",
      "occurences": [
        {
          "name": "Webpack Runtime",
          "motivation": "The code structure (`webpackJsonp@reality.eth/template-generator`, functions `t`, `r`, `l`, module cache `n`, installed chunks `o`) is characteristic of the Webpack module loader runtime environment."
        },
        {
          "name": "@reality.eth/template-generator (Bundled Code)",
          "motivation": "The global variable `webpackJsonp@reality.eth/template-generator` strongly suggests that the code being bundled and loaded by Webpack belongs to a project or package named `@reality.eth/template-generator`."
        }
      ]
    },
    {
      "file": "app/template-generator/static/js/2.e78c704b.chunk.js",
      "occurences": [
        {
          "name": "ethers.js",
          "motivation": "The code contains numerous references to ethers.js classes and concepts, such as `BigNumber`, `SigningKey`, `HDNode`, `AbiCoder`, `Interface`, `providers`, `Contract`, `ContractFactory`, `utils`, `constants`. Log messages explicitly mention the version `ethers/5.8.0` or similar submodule versions (e.g., `bytes/5.8.0`, `address/5.8.0`)."
        },
        {
          "name": "React",
          "motivation": "The code uses React's component structure (`a.a.Component`) and JSX syntax (`a.a.createElement`), indicating React is used for the UI."
        },
        {
          "name": "react-router",
          "motivation": "The presence of components named `Router` and `Router-History` (`g(\"Router-History\")`, `g(\"Router\")`) suggests the use of a routing library like `react-router` or `react-router-dom`."
        },
        {
          "name": "bn.js",
          "motivation": "The code extensively uses a `BN` class (`s.a.BN` or `l.BN` depending on scope) which is characteristic of the `bn.js` library, often bundled with cryptographic libraries like `elliptic`."
        },
        {
          "name": "elliptic",
          "motivation": "The code interacts with elliptic curve cryptography, specifically mentioning `secp256k1` (`new a.a(\"secp256k1\")`) and using functions like `keyFromPrivate`, `keyFromPublic`, `recoverPubKey`, which are typical of the `elliptic` library."
        },
        {
          "name": "js-sha3",
          "motivation": "The code uses Keccak hashing (`new i.Keccak(256).update(n).digest()`, `i.a.keccak_256`), which is provided by libraries like `js-sha3`."
        },
        {
          "name": "Buffer",
          "motivation": "The code explicitly uses the `Buffer` class (`e.from`, `s.Buffer.alloc`, `e.isBuffer`), indicating the use of the Node.js Buffer API or a polyfill."
        },
        {
          "name": "bs58",
          "motivation": "Functions like `f.encode` and `f.decode` are used in conjunction with a Base58 alphabet (`\"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"`), typical of Base58 encoding/decoding libraries."
        },
        {
          "name": "bip39 / hdkey",
          "motivation": "The code includes functions like `mnemonicToSeed`, `mnemonicToEntropy`, `entropyToMnemonic`, `HDNode`, and path derivation (`derivePath`), which are characteristic of BIP39 mnemonic and HD wallet libraries."
        },
        {
          "name": "hash.js / crypto-browserify",
          "motivation": "Uses SHA256 (`new v).update(e.from(t)).digest()`) and RIPEMD160 (`(new u.RIPEMD160).update(t).digest()`) hashing algorithms, often provided by `hash.js` or bundled within `crypto-browserify`."
        },
        {
          "name": "blakejs",
          "motivation": "Explicit calls to `blake2b` (`l.blake2b`) indicate the use of a Blake2 hashing library like `blakejs`."
        },
        {
          "name": "Ethereum Contract Interaction Library (like ethers.js or web3.js)",
          "motivation": "The code includes large JSON strings containing ABI (Application Binary Interface) and bytecode for Solidity contracts (`PublicResolver`, `DNSRegistrar`, `HashRegistrar`, `Deed`). This indicates the use of a library designed to interact with Ethereum smart contracts, likely for deploying or calling their methods."
        },
        {
          "name": "BN.js",
          "motivation": "The code includes a bundled version of the `bn.js` library (evident from function names like `isBN`, `toArrayLike`, `umod`, `invm`), which is commonly used for handling large numbers required in Ethereum operations."
        },
        {
          "name": "elliptic",
          "motivation": "The code includes a bundled version of the `elliptic` library (specifically mentioning `ec` and curves like `secp256k1`), used for elliptic curve cryptography essential for Ethereum key pairs and signatures."
        },
        {
          "name": "js-sha3 / keccak",
          "motivation": "The code contains implementations or imports related to `keccak256` and `sha3`, necessary for hashing operations in Ethereum (e.g., function signatures, name hashing)."
        },
        {
          "name": "hash.js",
          "motivation": "The presence of modules related to `hash.js` (like `hash.sha`, `hash.ripemd`) indicates the use of various standard hashing algorithms."
        },
        {
          "name": "multiformats",
          "motivation": "Imports and usage patterns related to `@multiformats/cid`, `@multiformats/bases/base*`, `@multiformats/hashes/hasher`, `@multiformats/hashes/digest`, `@multiformats/varint`, and `@multiformats/bytes` are present. These libraries are used for handling Content Identifiers (CIDs) and related multiformat data structures, likely for IPFS or IPLD integration, often used with ENS contenthash."
        },
        {
          "name": "base-x",
          "motivation": "The code includes a base encoding/decoding library, likely `base-x` or similar, used for handling various bases like base58btc or base32, often used in conjunction with multihash or CIDs."
        },
        {
          "name": "buffer",
          "motivation": "The code extensively uses `Buffer` or a polyfill like `safe-buffer` for handling binary data, common in blockchain interactions and cryptography."
        },
        {
          "name": "dns-packet",
          "motivation": "The code includes functionality related to DNS packet encoding/decoding (e.g., `opcode`, `rcode`, record types like `DNSKEY`, `DS`, `RRSIG`), suggesting interaction with DNS records, likely for DNSSEC integration with ENS."
        },
        {
          "name": "eth-ens-namehash",
          "motivation": "The code explicitly uses functions like `namehash` and `labelhash` from a module likely corresponding to the `eth-ens-namehash` library for ENS name processing."
        },
        {
          "name": "@ensdomains/content-hash",
          "motivation": "The code includes a module that seems to correspond to the `@ensdomains/content-hash` library, used for encoding and decoding ENS contenthashes."
        },
        {
          "name": "@ensdomains/dnsprovejs",
          "motivation": "The code includes the `DNSProver` class and related functions from the `@ensdomains/dnsprovejs` library, used for verifying DNSSEC proofs for ENS names."
        }
      ]
    },
    {
      "file": "app/template-generator/static/media/index.3c0ed312.cjs",
      "occurences": [
        {
          "name": "ipCodec",
          "motivation": "The code defines a self-contained module assigned to the variable `ipCodec`. It includes IP address validation (`isFormat`), encoding (`encode`), and decoding (`decode`) functions for both IPv4 (`v4`) and IPv6 (`v6`). The UMD (Universal Module Definition) pattern at the end (`typeof define`, `typeof module`, `typeof exports`) confirms it's designed as a reusable library/module."
        }
      ]
    },
    {
      "file": "index.html#inline-script-1",
      "occurences": [
        {
          "name": "jQuery",
          "motivation": "```javascript\nwindow.jQuery || document.write('<script src=\"js/vendor/jquery-3.3.1.min.js\"><\\/script>')\n```\nThis line explicitly checks for the existence of the `window.jQuery` object. If it's not found (evaluates to falsy), it uses `document.write` to dynamically load the jQuery library script (`jquery-3.3.1.min.js`) from a relative path. This is a common pattern for ensuring jQuery is available."
        }
      ]
    },
    {
      "file": "js/vendor/jquery-3.3.1.min.js",
      "occurences": [
        {
          "name": "jQuery",
          "motivation": "The code begins with the comment `/*! jQuery v3.3.1 | (c) JS Foundation and other contributors | jquery.org/license */`. The code structure, including `w.fn`, `w.extend`, `w.ajax`, `w.fn.init`, and the overall pattern, is characteristic of the jQuery library."
        }
      ]
    },
    {
      "file": "js/vendor/modernizr-3.6.0.min.js",
      "occurences": [
        {
          "name": "Modernizr",
          "motivation": "The code contains the header `/*! modernizr 3.6.0 (Custom Build) | MIT *`, defines a global `Modernizr` object, and uses Modernizr's characteristic methods like `addTest`, `mq`, `prefixedCSSValue`, `testAllProps`, `testProp`, etc., for browser feature detection."
        }
      ]
    }
  ],
  "urls": [],
  "ethereum": [
    {
      "file": "app/js/app.c7220a5e.js",
      "occurences": [
        {
          "count": 6
        }
      ]
    },
    {
      "file": "app/template-generator/static/js/2.e78c704b.chunk.js",
      "occurences": [
        {
          "count": 9
        }
      ]
    },
    {
      "file": "app/template-generator/static/js/main.fedb967a.chunk.js",
      "occurences": [
        {
          "count": 1
        }
      ]
    }
  ],
  "fallbacks": []
}